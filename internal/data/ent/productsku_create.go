// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"skrshop/internal/data/ent/productsku"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductSkuCreate is the builder for creating a ProductSku entity.
type ProductSkuCreate struct {
	config
	mutation *ProductSkuMutation
	hooks    []Hook
}

// SetSpuID sets the "spu_id" field.
func (psc *ProductSkuCreate) SetSpuID(i int64) *ProductSkuCreate {
	psc.mutation.SetSpuID(i)
	return psc
}

// SetNillableSpuID sets the "spu_id" field if the given value is not nil.
func (psc *ProductSkuCreate) SetNillableSpuID(i *int64) *ProductSkuCreate {
	if i != nil {
		psc.SetSpuID(*i)
	}
	return psc
}

// SetAttrs sets the "attrs" field.
func (psc *ProductSkuCreate) SetAttrs(s string) *ProductSkuCreate {
	psc.mutation.SetAttrs(s)
	return psc
}

// SetBannerURL sets the "banner_url" field.
func (psc *ProductSkuCreate) SetBannerURL(s string) *ProductSkuCreate {
	psc.mutation.SetBannerURL(s)
	return psc
}

// SetMainURL sets the "main_url" field.
func (psc *ProductSkuCreate) SetMainURL(s string) *ProductSkuCreate {
	psc.mutation.SetMainURL(s)
	return psc
}

// SetPriceFee sets the "price_fee" field.
func (psc *ProductSkuCreate) SetPriceFee(i int64) *ProductSkuCreate {
	psc.mutation.SetPriceFee(i)
	return psc
}

// SetNillablePriceFee sets the "price_fee" field if the given value is not nil.
func (psc *ProductSkuCreate) SetNillablePriceFee(i *int64) *ProductSkuCreate {
	if i != nil {
		psc.SetPriceFee(*i)
	}
	return psc
}

// SetPriceScale sets the "price_scale" field.
func (psc *ProductSkuCreate) SetPriceScale(i int8) *ProductSkuCreate {
	psc.mutation.SetPriceScale(i)
	return psc
}

// SetNillablePriceScale sets the "price_scale" field if the given value is not nil.
func (psc *ProductSkuCreate) SetNillablePriceScale(i *int8) *ProductSkuCreate {
	if i != nil {
		psc.SetPriceScale(*i)
	}
	return psc
}

// SetMarketPriceFee sets the "market_price_fee" field.
func (psc *ProductSkuCreate) SetMarketPriceFee(i int64) *ProductSkuCreate {
	psc.mutation.SetMarketPriceFee(i)
	return psc
}

// SetNillableMarketPriceFee sets the "market_price_fee" field if the given value is not nil.
func (psc *ProductSkuCreate) SetNillableMarketPriceFee(i *int64) *ProductSkuCreate {
	if i != nil {
		psc.SetMarketPriceFee(*i)
	}
	return psc
}

// SetMarketPriceScale sets the "market_price_scale" field.
func (psc *ProductSkuCreate) SetMarketPriceScale(i int8) *ProductSkuCreate {
	psc.mutation.SetMarketPriceScale(i)
	return psc
}

// SetNillableMarketPriceScale sets the "market_price_scale" field if the given value is not nil.
func (psc *ProductSkuCreate) SetNillableMarketPriceScale(i *int8) *ProductSkuCreate {
	if i != nil {
		psc.SetMarketPriceScale(*i)
	}
	return psc
}

// SetCreateAt sets the "create_at" field.
func (psc *ProductSkuCreate) SetCreateAt(t time.Time) *ProductSkuCreate {
	psc.mutation.SetCreateAt(t)
	return psc
}

// SetUpdateAt sets the "update_at" field.
func (psc *ProductSkuCreate) SetUpdateAt(t time.Time) *ProductSkuCreate {
	psc.mutation.SetUpdateAt(t)
	return psc
}

// SetStatus sets the "status" field.
func (psc *ProductSkuCreate) SetStatus(i int8) *ProductSkuCreate {
	psc.mutation.SetStatus(i)
	return psc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (psc *ProductSkuCreate) SetNillableStatus(i *int8) *ProductSkuCreate {
	if i != nil {
		psc.SetStatus(*i)
	}
	return psc
}

// Mutation returns the ProductSkuMutation object of the builder.
func (psc *ProductSkuCreate) Mutation() *ProductSkuMutation {
	return psc.mutation
}

// Save creates the ProductSku in the database.
func (psc *ProductSkuCreate) Save(ctx context.Context) (*ProductSku, error) {
	var (
		err  error
		node *ProductSku
	)
	psc.defaults()
	if len(psc.hooks) == 0 {
		if err = psc.check(); err != nil {
			return nil, err
		}
		node, err = psc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductSkuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = psc.check(); err != nil {
				return nil, err
			}
			psc.mutation = mutation
			node, err = psc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(psc.hooks) - 1; i >= 0; i-- {
			mut = psc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, psc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (psc *ProductSkuCreate) SaveX(ctx context.Context) *ProductSku {
	v, err := psc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (psc *ProductSkuCreate) defaults() {
	if _, ok := psc.mutation.SpuID(); !ok {
		v := productsku.DefaultSpuID
		psc.mutation.SetSpuID(v)
	}
	if _, ok := psc.mutation.PriceFee(); !ok {
		v := productsku.DefaultPriceFee
		psc.mutation.SetPriceFee(v)
	}
	if _, ok := psc.mutation.PriceScale(); !ok {
		v := productsku.DefaultPriceScale
		psc.mutation.SetPriceScale(v)
	}
	if _, ok := psc.mutation.MarketPriceFee(); !ok {
		v := productsku.DefaultMarketPriceFee
		psc.mutation.SetMarketPriceFee(v)
	}
	if _, ok := psc.mutation.MarketPriceScale(); !ok {
		v := productsku.DefaultMarketPriceScale
		psc.mutation.SetMarketPriceScale(v)
	}
	if _, ok := psc.mutation.Status(); !ok {
		v := productsku.DefaultStatus
		psc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psc *ProductSkuCreate) check() error {
	if _, ok := psc.mutation.SpuID(); !ok {
		return &ValidationError{Name: "spu_id", err: errors.New("ent: missing required field \"spu_id\"")}
	}
	if v, ok := psc.mutation.SpuID(); ok {
		if err := productsku.SpuIDValidator(v); err != nil {
			return &ValidationError{Name: "spu_id", err: fmt.Errorf("ent: validator failed for field \"spu_id\": %w", err)}
		}
	}
	if _, ok := psc.mutation.Attrs(); !ok {
		return &ValidationError{Name: "attrs", err: errors.New("ent: missing required field \"attrs\"")}
	}
	if _, ok := psc.mutation.BannerURL(); !ok {
		return &ValidationError{Name: "banner_url", err: errors.New("ent: missing required field \"banner_url\"")}
	}
	if _, ok := psc.mutation.MainURL(); !ok {
		return &ValidationError{Name: "main_url", err: errors.New("ent: missing required field \"main_url\"")}
	}
	if _, ok := psc.mutation.PriceFee(); !ok {
		return &ValidationError{Name: "price_fee", err: errors.New("ent: missing required field \"price_fee\"")}
	}
	if v, ok := psc.mutation.PriceFee(); ok {
		if err := productsku.PriceFeeValidator(v); err != nil {
			return &ValidationError{Name: "price_fee", err: fmt.Errorf("ent: validator failed for field \"price_fee\": %w", err)}
		}
	}
	if _, ok := psc.mutation.PriceScale(); !ok {
		return &ValidationError{Name: "price_scale", err: errors.New("ent: missing required field \"price_scale\"")}
	}
	if _, ok := psc.mutation.MarketPriceFee(); !ok {
		return &ValidationError{Name: "market_price_fee", err: errors.New("ent: missing required field \"market_price_fee\"")}
	}
	if v, ok := psc.mutation.MarketPriceFee(); ok {
		if err := productsku.MarketPriceFeeValidator(v); err != nil {
			return &ValidationError{Name: "market_price_fee", err: fmt.Errorf("ent: validator failed for field \"market_price_fee\": %w", err)}
		}
	}
	if _, ok := psc.mutation.MarketPriceScale(); !ok {
		return &ValidationError{Name: "market_price_scale", err: errors.New("ent: missing required field \"market_price_scale\"")}
	}
	if _, ok := psc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New("ent: missing required field \"create_at\"")}
	}
	if _, ok := psc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New("ent: missing required field \"update_at\"")}
	}
	if _, ok := psc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	return nil
}

func (psc *ProductSkuCreate) sqlSave(ctx context.Context) (*ProductSku, error) {
	_node, _spec := psc.createSpec()
	if err := sqlgraph.CreateNode(ctx, psc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (psc *ProductSkuCreate) createSpec() (*ProductSku, *sqlgraph.CreateSpec) {
	var (
		_node = &ProductSku{config: psc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: productsku.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productsku.FieldID,
			},
		}
	)
	if value, ok := psc.mutation.SpuID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productsku.FieldSpuID,
		})
		_node.SpuID = value
	}
	if value, ok := psc.mutation.Attrs(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productsku.FieldAttrs,
		})
		_node.Attrs = value
	}
	if value, ok := psc.mutation.BannerURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productsku.FieldBannerURL,
		})
		_node.BannerURL = value
	}
	if value, ok := psc.mutation.MainURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productsku.FieldMainURL,
		})
		_node.MainURL = value
	}
	if value, ok := psc.mutation.PriceFee(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productsku.FieldPriceFee,
		})
		_node.PriceFee = value
	}
	if value, ok := psc.mutation.PriceScale(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productsku.FieldPriceScale,
		})
		_node.PriceScale = value
	}
	if value, ok := psc.mutation.MarketPriceFee(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productsku.FieldMarketPriceFee,
		})
		_node.MarketPriceFee = value
	}
	if value, ok := psc.mutation.MarketPriceScale(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productsku.FieldMarketPriceScale,
		})
		_node.MarketPriceScale = value
	}
	if value, ok := psc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productsku.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := psc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productsku.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := psc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productsku.FieldStatus,
		})
		_node.Status = value
	}
	return _node, _spec
}

// ProductSkuCreateBulk is the builder for creating many ProductSku entities in bulk.
type ProductSkuCreateBulk struct {
	config
	builders []*ProductSkuCreate
}

// Save creates the ProductSku entities in the database.
func (pscb *ProductSkuCreateBulk) Save(ctx context.Context) ([]*ProductSku, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pscb.builders))
	nodes := make([]*ProductSku, len(pscb.builders))
	mutators := make([]Mutator, len(pscb.builders))
	for i := range pscb.builders {
		func(i int, root context.Context) {
			builder := pscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductSkuMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pscb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pscb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pscb *ProductSkuCreateBulk) SaveX(ctx context.Context) []*ProductSku {
	v, err := pscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
