// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"skrshop/internal/data/ent/predicate"
	"skrshop/internal/data/ent/productsku"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductSkuUpdate is the builder for updating ProductSku entities.
type ProductSkuUpdate struct {
	config
	hooks    []Hook
	mutation *ProductSkuMutation
}

// Where adds a new predicate for the ProductSkuUpdate builder.
func (psu *ProductSkuUpdate) Where(ps ...predicate.ProductSku) *ProductSkuUpdate {
	psu.mutation.predicates = append(psu.mutation.predicates, ps...)
	return psu
}

// SetSpuID sets the "spu_id" field.
func (psu *ProductSkuUpdate) SetSpuID(i int64) *ProductSkuUpdate {
	psu.mutation.ResetSpuID()
	psu.mutation.SetSpuID(i)
	return psu
}

// SetNillableSpuID sets the "spu_id" field if the given value is not nil.
func (psu *ProductSkuUpdate) SetNillableSpuID(i *int64) *ProductSkuUpdate {
	if i != nil {
		psu.SetSpuID(*i)
	}
	return psu
}

// AddSpuID adds i to the "spu_id" field.
func (psu *ProductSkuUpdate) AddSpuID(i int64) *ProductSkuUpdate {
	psu.mutation.AddSpuID(i)
	return psu
}

// SetAttrs sets the "attrs" field.
func (psu *ProductSkuUpdate) SetAttrs(s string) *ProductSkuUpdate {
	psu.mutation.SetAttrs(s)
	return psu
}

// SetBannerURL sets the "banner_url" field.
func (psu *ProductSkuUpdate) SetBannerURL(s string) *ProductSkuUpdate {
	psu.mutation.SetBannerURL(s)
	return psu
}

// SetMainURL sets the "main_url" field.
func (psu *ProductSkuUpdate) SetMainURL(s string) *ProductSkuUpdate {
	psu.mutation.SetMainURL(s)
	return psu
}

// SetPriceFee sets the "price_fee" field.
func (psu *ProductSkuUpdate) SetPriceFee(i int64) *ProductSkuUpdate {
	psu.mutation.ResetPriceFee()
	psu.mutation.SetPriceFee(i)
	return psu
}

// SetNillablePriceFee sets the "price_fee" field if the given value is not nil.
func (psu *ProductSkuUpdate) SetNillablePriceFee(i *int64) *ProductSkuUpdate {
	if i != nil {
		psu.SetPriceFee(*i)
	}
	return psu
}

// AddPriceFee adds i to the "price_fee" field.
func (psu *ProductSkuUpdate) AddPriceFee(i int64) *ProductSkuUpdate {
	psu.mutation.AddPriceFee(i)
	return psu
}

// SetPriceScale sets the "price_scale" field.
func (psu *ProductSkuUpdate) SetPriceScale(i int8) *ProductSkuUpdate {
	psu.mutation.ResetPriceScale()
	psu.mutation.SetPriceScale(i)
	return psu
}

// SetNillablePriceScale sets the "price_scale" field if the given value is not nil.
func (psu *ProductSkuUpdate) SetNillablePriceScale(i *int8) *ProductSkuUpdate {
	if i != nil {
		psu.SetPriceScale(*i)
	}
	return psu
}

// AddPriceScale adds i to the "price_scale" field.
func (psu *ProductSkuUpdate) AddPriceScale(i int8) *ProductSkuUpdate {
	psu.mutation.AddPriceScale(i)
	return psu
}

// SetMarketPriceFee sets the "market_price_fee" field.
func (psu *ProductSkuUpdate) SetMarketPriceFee(i int64) *ProductSkuUpdate {
	psu.mutation.ResetMarketPriceFee()
	psu.mutation.SetMarketPriceFee(i)
	return psu
}

// SetNillableMarketPriceFee sets the "market_price_fee" field if the given value is not nil.
func (psu *ProductSkuUpdate) SetNillableMarketPriceFee(i *int64) *ProductSkuUpdate {
	if i != nil {
		psu.SetMarketPriceFee(*i)
	}
	return psu
}

// AddMarketPriceFee adds i to the "market_price_fee" field.
func (psu *ProductSkuUpdate) AddMarketPriceFee(i int64) *ProductSkuUpdate {
	psu.mutation.AddMarketPriceFee(i)
	return psu
}

// SetMarketPriceScale sets the "market_price_scale" field.
func (psu *ProductSkuUpdate) SetMarketPriceScale(i int8) *ProductSkuUpdate {
	psu.mutation.ResetMarketPriceScale()
	psu.mutation.SetMarketPriceScale(i)
	return psu
}

// SetNillableMarketPriceScale sets the "market_price_scale" field if the given value is not nil.
func (psu *ProductSkuUpdate) SetNillableMarketPriceScale(i *int8) *ProductSkuUpdate {
	if i != nil {
		psu.SetMarketPriceScale(*i)
	}
	return psu
}

// AddMarketPriceScale adds i to the "market_price_scale" field.
func (psu *ProductSkuUpdate) AddMarketPriceScale(i int8) *ProductSkuUpdate {
	psu.mutation.AddMarketPriceScale(i)
	return psu
}

// SetCreateAt sets the "create_at" field.
func (psu *ProductSkuUpdate) SetCreateAt(t time.Time) *ProductSkuUpdate {
	psu.mutation.SetCreateAt(t)
	return psu
}

// SetUpdateAt sets the "update_at" field.
func (psu *ProductSkuUpdate) SetUpdateAt(t time.Time) *ProductSkuUpdate {
	psu.mutation.SetUpdateAt(t)
	return psu
}

// SetStatus sets the "status" field.
func (psu *ProductSkuUpdate) SetStatus(i int8) *ProductSkuUpdate {
	psu.mutation.ResetStatus()
	psu.mutation.SetStatus(i)
	return psu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (psu *ProductSkuUpdate) SetNillableStatus(i *int8) *ProductSkuUpdate {
	if i != nil {
		psu.SetStatus(*i)
	}
	return psu
}

// AddStatus adds i to the "status" field.
func (psu *ProductSkuUpdate) AddStatus(i int8) *ProductSkuUpdate {
	psu.mutation.AddStatus(i)
	return psu
}

// Mutation returns the ProductSkuMutation object of the builder.
func (psu *ProductSkuUpdate) Mutation() *ProductSkuMutation {
	return psu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psu *ProductSkuUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(psu.hooks) == 0 {
		if err = psu.check(); err != nil {
			return 0, err
		}
		affected, err = psu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductSkuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = psu.check(); err != nil {
				return 0, err
			}
			psu.mutation = mutation
			affected, err = psu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(psu.hooks) - 1; i >= 0; i-- {
			mut = psu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, psu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (psu *ProductSkuUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *ProductSkuUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *ProductSkuUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psu *ProductSkuUpdate) check() error {
	if v, ok := psu.mutation.SpuID(); ok {
		if err := productsku.SpuIDValidator(v); err != nil {
			return &ValidationError{Name: "spu_id", err: fmt.Errorf("ent: validator failed for field \"spu_id\": %w", err)}
		}
	}
	if v, ok := psu.mutation.PriceFee(); ok {
		if err := productsku.PriceFeeValidator(v); err != nil {
			return &ValidationError{Name: "price_fee", err: fmt.Errorf("ent: validator failed for field \"price_fee\": %w", err)}
		}
	}
	if v, ok := psu.mutation.MarketPriceFee(); ok {
		if err := productsku.MarketPriceFeeValidator(v); err != nil {
			return &ValidationError{Name: "market_price_fee", err: fmt.Errorf("ent: validator failed for field \"market_price_fee\": %w", err)}
		}
	}
	return nil
}

func (psu *ProductSkuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productsku.Table,
			Columns: productsku.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productsku.FieldID,
			},
		},
	}
	if ps := psu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psu.mutation.SpuID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productsku.FieldSpuID,
		})
	}
	if value, ok := psu.mutation.AddedSpuID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productsku.FieldSpuID,
		})
	}
	if value, ok := psu.mutation.Attrs(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productsku.FieldAttrs,
		})
	}
	if value, ok := psu.mutation.BannerURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productsku.FieldBannerURL,
		})
	}
	if value, ok := psu.mutation.MainURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productsku.FieldMainURL,
		})
	}
	if value, ok := psu.mutation.PriceFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productsku.FieldPriceFee,
		})
	}
	if value, ok := psu.mutation.AddedPriceFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productsku.FieldPriceFee,
		})
	}
	if value, ok := psu.mutation.PriceScale(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productsku.FieldPriceScale,
		})
	}
	if value, ok := psu.mutation.AddedPriceScale(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productsku.FieldPriceScale,
		})
	}
	if value, ok := psu.mutation.MarketPriceFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productsku.FieldMarketPriceFee,
		})
	}
	if value, ok := psu.mutation.AddedMarketPriceFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productsku.FieldMarketPriceFee,
		})
	}
	if value, ok := psu.mutation.MarketPriceScale(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productsku.FieldMarketPriceScale,
		})
	}
	if value, ok := psu.mutation.AddedMarketPriceScale(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productsku.FieldMarketPriceScale,
		})
	}
	if value, ok := psu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productsku.FieldCreateAt,
		})
	}
	if value, ok := psu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productsku.FieldUpdateAt,
		})
	}
	if value, ok := psu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productsku.FieldStatus,
		})
	}
	if value, ok := psu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productsku.FieldStatus,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productsku.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProductSkuUpdateOne is the builder for updating a single ProductSku entity.
type ProductSkuUpdateOne struct {
	config
	hooks    []Hook
	mutation *ProductSkuMutation
}

// SetSpuID sets the "spu_id" field.
func (psuo *ProductSkuUpdateOne) SetSpuID(i int64) *ProductSkuUpdateOne {
	psuo.mutation.ResetSpuID()
	psuo.mutation.SetSpuID(i)
	return psuo
}

// SetNillableSpuID sets the "spu_id" field if the given value is not nil.
func (psuo *ProductSkuUpdateOne) SetNillableSpuID(i *int64) *ProductSkuUpdateOne {
	if i != nil {
		psuo.SetSpuID(*i)
	}
	return psuo
}

// AddSpuID adds i to the "spu_id" field.
func (psuo *ProductSkuUpdateOne) AddSpuID(i int64) *ProductSkuUpdateOne {
	psuo.mutation.AddSpuID(i)
	return psuo
}

// SetAttrs sets the "attrs" field.
func (psuo *ProductSkuUpdateOne) SetAttrs(s string) *ProductSkuUpdateOne {
	psuo.mutation.SetAttrs(s)
	return psuo
}

// SetBannerURL sets the "banner_url" field.
func (psuo *ProductSkuUpdateOne) SetBannerURL(s string) *ProductSkuUpdateOne {
	psuo.mutation.SetBannerURL(s)
	return psuo
}

// SetMainURL sets the "main_url" field.
func (psuo *ProductSkuUpdateOne) SetMainURL(s string) *ProductSkuUpdateOne {
	psuo.mutation.SetMainURL(s)
	return psuo
}

// SetPriceFee sets the "price_fee" field.
func (psuo *ProductSkuUpdateOne) SetPriceFee(i int64) *ProductSkuUpdateOne {
	psuo.mutation.ResetPriceFee()
	psuo.mutation.SetPriceFee(i)
	return psuo
}

// SetNillablePriceFee sets the "price_fee" field if the given value is not nil.
func (psuo *ProductSkuUpdateOne) SetNillablePriceFee(i *int64) *ProductSkuUpdateOne {
	if i != nil {
		psuo.SetPriceFee(*i)
	}
	return psuo
}

// AddPriceFee adds i to the "price_fee" field.
func (psuo *ProductSkuUpdateOne) AddPriceFee(i int64) *ProductSkuUpdateOne {
	psuo.mutation.AddPriceFee(i)
	return psuo
}

// SetPriceScale sets the "price_scale" field.
func (psuo *ProductSkuUpdateOne) SetPriceScale(i int8) *ProductSkuUpdateOne {
	psuo.mutation.ResetPriceScale()
	psuo.mutation.SetPriceScale(i)
	return psuo
}

// SetNillablePriceScale sets the "price_scale" field if the given value is not nil.
func (psuo *ProductSkuUpdateOne) SetNillablePriceScale(i *int8) *ProductSkuUpdateOne {
	if i != nil {
		psuo.SetPriceScale(*i)
	}
	return psuo
}

// AddPriceScale adds i to the "price_scale" field.
func (psuo *ProductSkuUpdateOne) AddPriceScale(i int8) *ProductSkuUpdateOne {
	psuo.mutation.AddPriceScale(i)
	return psuo
}

// SetMarketPriceFee sets the "market_price_fee" field.
func (psuo *ProductSkuUpdateOne) SetMarketPriceFee(i int64) *ProductSkuUpdateOne {
	psuo.mutation.ResetMarketPriceFee()
	psuo.mutation.SetMarketPriceFee(i)
	return psuo
}

// SetNillableMarketPriceFee sets the "market_price_fee" field if the given value is not nil.
func (psuo *ProductSkuUpdateOne) SetNillableMarketPriceFee(i *int64) *ProductSkuUpdateOne {
	if i != nil {
		psuo.SetMarketPriceFee(*i)
	}
	return psuo
}

// AddMarketPriceFee adds i to the "market_price_fee" field.
func (psuo *ProductSkuUpdateOne) AddMarketPriceFee(i int64) *ProductSkuUpdateOne {
	psuo.mutation.AddMarketPriceFee(i)
	return psuo
}

// SetMarketPriceScale sets the "market_price_scale" field.
func (psuo *ProductSkuUpdateOne) SetMarketPriceScale(i int8) *ProductSkuUpdateOne {
	psuo.mutation.ResetMarketPriceScale()
	psuo.mutation.SetMarketPriceScale(i)
	return psuo
}

// SetNillableMarketPriceScale sets the "market_price_scale" field if the given value is not nil.
func (psuo *ProductSkuUpdateOne) SetNillableMarketPriceScale(i *int8) *ProductSkuUpdateOne {
	if i != nil {
		psuo.SetMarketPriceScale(*i)
	}
	return psuo
}

// AddMarketPriceScale adds i to the "market_price_scale" field.
func (psuo *ProductSkuUpdateOne) AddMarketPriceScale(i int8) *ProductSkuUpdateOne {
	psuo.mutation.AddMarketPriceScale(i)
	return psuo
}

// SetCreateAt sets the "create_at" field.
func (psuo *ProductSkuUpdateOne) SetCreateAt(t time.Time) *ProductSkuUpdateOne {
	psuo.mutation.SetCreateAt(t)
	return psuo
}

// SetUpdateAt sets the "update_at" field.
func (psuo *ProductSkuUpdateOne) SetUpdateAt(t time.Time) *ProductSkuUpdateOne {
	psuo.mutation.SetUpdateAt(t)
	return psuo
}

// SetStatus sets the "status" field.
func (psuo *ProductSkuUpdateOne) SetStatus(i int8) *ProductSkuUpdateOne {
	psuo.mutation.ResetStatus()
	psuo.mutation.SetStatus(i)
	return psuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (psuo *ProductSkuUpdateOne) SetNillableStatus(i *int8) *ProductSkuUpdateOne {
	if i != nil {
		psuo.SetStatus(*i)
	}
	return psuo
}

// AddStatus adds i to the "status" field.
func (psuo *ProductSkuUpdateOne) AddStatus(i int8) *ProductSkuUpdateOne {
	psuo.mutation.AddStatus(i)
	return psuo
}

// Mutation returns the ProductSkuMutation object of the builder.
func (psuo *ProductSkuUpdateOne) Mutation() *ProductSkuMutation {
	return psuo.mutation
}

// Save executes the query and returns the updated ProductSku entity.
func (psuo *ProductSkuUpdateOne) Save(ctx context.Context) (*ProductSku, error) {
	var (
		err  error
		node *ProductSku
	)
	if len(psuo.hooks) == 0 {
		if err = psuo.check(); err != nil {
			return nil, err
		}
		node, err = psuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductSkuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = psuo.check(); err != nil {
				return nil, err
			}
			psuo.mutation = mutation
			node, err = psuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(psuo.hooks) - 1; i >= 0; i-- {
			mut = psuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, psuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *ProductSkuUpdateOne) SaveX(ctx context.Context) *ProductSku {
	node, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psuo *ProductSkuUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *ProductSkuUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psuo *ProductSkuUpdateOne) check() error {
	if v, ok := psuo.mutation.SpuID(); ok {
		if err := productsku.SpuIDValidator(v); err != nil {
			return &ValidationError{Name: "spu_id", err: fmt.Errorf("ent: validator failed for field \"spu_id\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.PriceFee(); ok {
		if err := productsku.PriceFeeValidator(v); err != nil {
			return &ValidationError{Name: "price_fee", err: fmt.Errorf("ent: validator failed for field \"price_fee\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.MarketPriceFee(); ok {
		if err := productsku.MarketPriceFeeValidator(v); err != nil {
			return &ValidationError{Name: "market_price_fee", err: fmt.Errorf("ent: validator failed for field \"market_price_fee\": %w", err)}
		}
	}
	return nil
}

func (psuo *ProductSkuUpdateOne) sqlSave(ctx context.Context) (_node *ProductSku, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productsku.Table,
			Columns: productsku.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productsku.FieldID,
			},
		},
	}
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProductSku.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := psuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psuo.mutation.SpuID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productsku.FieldSpuID,
		})
	}
	if value, ok := psuo.mutation.AddedSpuID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productsku.FieldSpuID,
		})
	}
	if value, ok := psuo.mutation.Attrs(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productsku.FieldAttrs,
		})
	}
	if value, ok := psuo.mutation.BannerURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productsku.FieldBannerURL,
		})
	}
	if value, ok := psuo.mutation.MainURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productsku.FieldMainURL,
		})
	}
	if value, ok := psuo.mutation.PriceFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productsku.FieldPriceFee,
		})
	}
	if value, ok := psuo.mutation.AddedPriceFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productsku.FieldPriceFee,
		})
	}
	if value, ok := psuo.mutation.PriceScale(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productsku.FieldPriceScale,
		})
	}
	if value, ok := psuo.mutation.AddedPriceScale(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productsku.FieldPriceScale,
		})
	}
	if value, ok := psuo.mutation.MarketPriceFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productsku.FieldMarketPriceFee,
		})
	}
	if value, ok := psuo.mutation.AddedMarketPriceFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productsku.FieldMarketPriceFee,
		})
	}
	if value, ok := psuo.mutation.MarketPriceScale(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productsku.FieldMarketPriceScale,
		})
	}
	if value, ok := psuo.mutation.AddedMarketPriceScale(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productsku.FieldMarketPriceScale,
		})
	}
	if value, ok := psuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productsku.FieldCreateAt,
		})
	}
	if value, ok := psuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productsku.FieldUpdateAt,
		})
	}
	if value, ok := psuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productsku.FieldStatus,
		})
	}
	if value, ok := psuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productsku.FieldStatus,
		})
	}
	_node = &ProductSku{config: psuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productsku.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
