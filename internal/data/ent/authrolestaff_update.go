// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"skrshop/internal/data/ent/authrolestaff"
	"skrshop/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AuthRoleStaffUpdate is the builder for updating AuthRoleStaff entities.
type AuthRoleStaffUpdate struct {
	config
	hooks    []Hook
	mutation *AuthRoleStaffMutation
}

// Where adds a new predicate for the AuthRoleStaffUpdate builder.
func (arsu *AuthRoleStaffUpdate) Where(ps ...predicate.AuthRoleStaff) *AuthRoleStaffUpdate {
	arsu.mutation.predicates = append(arsu.mutation.predicates, ps...)
	return arsu
}

// SetStatus sets the "status" field.
func (arsu *AuthRoleStaffUpdate) SetStatus(i int8) *AuthRoleStaffUpdate {
	arsu.mutation.ResetStatus()
	arsu.mutation.SetStatus(i)
	return arsu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (arsu *AuthRoleStaffUpdate) SetNillableStatus(i *int8) *AuthRoleStaffUpdate {
	if i != nil {
		arsu.SetStatus(*i)
	}
	return arsu
}

// AddStatus adds i to the "status" field.
func (arsu *AuthRoleStaffUpdate) AddStatus(i int8) *AuthRoleStaffUpdate {
	arsu.mutation.AddStatus(i)
	return arsu
}

// SetCreateAt sets the "create_at" field.
func (arsu *AuthRoleStaffUpdate) SetCreateAt(t time.Time) *AuthRoleStaffUpdate {
	arsu.mutation.SetCreateAt(t)
	return arsu
}

// SetUpdateAt sets the "update_at" field.
func (arsu *AuthRoleStaffUpdate) SetUpdateAt(t time.Time) *AuthRoleStaffUpdate {
	arsu.mutation.SetUpdateAt(t)
	return arsu
}

// Mutation returns the AuthRoleStaffMutation object of the builder.
func (arsu *AuthRoleStaffUpdate) Mutation() *AuthRoleStaffMutation {
	return arsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (arsu *AuthRoleStaffUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(arsu.hooks) == 0 {
		affected, err = arsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuthRoleStaffMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			arsu.mutation = mutation
			affected, err = arsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(arsu.hooks) - 1; i >= 0; i-- {
			mut = arsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, arsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (arsu *AuthRoleStaffUpdate) SaveX(ctx context.Context) int {
	affected, err := arsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (arsu *AuthRoleStaffUpdate) Exec(ctx context.Context) error {
	_, err := arsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arsu *AuthRoleStaffUpdate) ExecX(ctx context.Context) {
	if err := arsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (arsu *AuthRoleStaffUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   authrolestaff.Table,
			Columns: authrolestaff.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: authrolestaff.FieldID,
			},
		},
	}
	if ps := arsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := arsu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: authrolestaff.FieldStatus,
		})
	}
	if value, ok := arsu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: authrolestaff.FieldStatus,
		})
	}
	if value, ok := arsu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authrolestaff.FieldCreateAt,
		})
	}
	if value, ok := arsu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authrolestaff.FieldUpdateAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, arsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authrolestaff.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AuthRoleStaffUpdateOne is the builder for updating a single AuthRoleStaff entity.
type AuthRoleStaffUpdateOne struct {
	config
	hooks    []Hook
	mutation *AuthRoleStaffMutation
}

// SetStatus sets the "status" field.
func (arsuo *AuthRoleStaffUpdateOne) SetStatus(i int8) *AuthRoleStaffUpdateOne {
	arsuo.mutation.ResetStatus()
	arsuo.mutation.SetStatus(i)
	return arsuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (arsuo *AuthRoleStaffUpdateOne) SetNillableStatus(i *int8) *AuthRoleStaffUpdateOne {
	if i != nil {
		arsuo.SetStatus(*i)
	}
	return arsuo
}

// AddStatus adds i to the "status" field.
func (arsuo *AuthRoleStaffUpdateOne) AddStatus(i int8) *AuthRoleStaffUpdateOne {
	arsuo.mutation.AddStatus(i)
	return arsuo
}

// SetCreateAt sets the "create_at" field.
func (arsuo *AuthRoleStaffUpdateOne) SetCreateAt(t time.Time) *AuthRoleStaffUpdateOne {
	arsuo.mutation.SetCreateAt(t)
	return arsuo
}

// SetUpdateAt sets the "update_at" field.
func (arsuo *AuthRoleStaffUpdateOne) SetUpdateAt(t time.Time) *AuthRoleStaffUpdateOne {
	arsuo.mutation.SetUpdateAt(t)
	return arsuo
}

// Mutation returns the AuthRoleStaffMutation object of the builder.
func (arsuo *AuthRoleStaffUpdateOne) Mutation() *AuthRoleStaffMutation {
	return arsuo.mutation
}

// Save executes the query and returns the updated AuthRoleStaff entity.
func (arsuo *AuthRoleStaffUpdateOne) Save(ctx context.Context) (*AuthRoleStaff, error) {
	var (
		err  error
		node *AuthRoleStaff
	)
	if len(arsuo.hooks) == 0 {
		node, err = arsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuthRoleStaffMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			arsuo.mutation = mutation
			node, err = arsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(arsuo.hooks) - 1; i >= 0; i-- {
			mut = arsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, arsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (arsuo *AuthRoleStaffUpdateOne) SaveX(ctx context.Context) *AuthRoleStaff {
	node, err := arsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (arsuo *AuthRoleStaffUpdateOne) Exec(ctx context.Context) error {
	_, err := arsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arsuo *AuthRoleStaffUpdateOne) ExecX(ctx context.Context) {
	if err := arsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (arsuo *AuthRoleStaffUpdateOne) sqlSave(ctx context.Context) (_node *AuthRoleStaff, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   authrolestaff.Table,
			Columns: authrolestaff.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: authrolestaff.FieldID,
			},
		},
	}
	id, ok := arsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AuthRoleStaff.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := arsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := arsuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: authrolestaff.FieldStatus,
		})
	}
	if value, ok := arsuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: authrolestaff.FieldStatus,
		})
	}
	if value, ok := arsuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authrolestaff.FieldCreateAt,
		})
	}
	if value, ok := arsuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authrolestaff.FieldUpdateAt,
		})
	}
	_node = &AuthRoleStaff{config: arsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, arsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authrolestaff.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
