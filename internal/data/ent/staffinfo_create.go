// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"skrshop/internal/data/ent/staffinfo"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StaffInfoCreate is the builder for creating a StaffInfo entity.
type StaffInfoCreate struct {
	config
	mutation *StaffInfoMutation
	hooks    []Hook
}

// SetUID sets the "uid" field.
func (sic *StaffInfoCreate) SetUID(i int64) *StaffInfoCreate {
	sic.mutation.SetUID(i)
	return sic
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (sic *StaffInfoCreate) SetNillableUID(i *int64) *StaffInfoCreate {
	if i != nil {
		sic.SetUID(*i)
	}
	return sic
}

// SetEmail sets the "email" field.
func (sic *StaffInfoCreate) SetEmail(s string) *StaffInfoCreate {
	sic.mutation.SetEmail(s)
	return sic
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (sic *StaffInfoCreate) SetNillableEmail(s *string) *StaffInfoCreate {
	if s != nil {
		sic.SetEmail(*s)
	}
	return sic
}

// SetPhone sets the "phone" field.
func (sic *StaffInfoCreate) SetPhone(s string) *StaffInfoCreate {
	sic.mutation.SetPhone(s)
	return sic
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (sic *StaffInfoCreate) SetNillablePhone(s *string) *StaffInfoCreate {
	if s != nil {
		sic.SetPhone(*s)
	}
	return sic
}

// SetPassword sets the "password" field.
func (sic *StaffInfoCreate) SetPassword(s string) *StaffInfoCreate {
	sic.mutation.SetPassword(s)
	return sic
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (sic *StaffInfoCreate) SetNillablePassword(s *string) *StaffInfoCreate {
	if s != nil {
		sic.SetPassword(*s)
	}
	return sic
}

// SetName sets the "name" field.
func (sic *StaffInfoCreate) SetName(s string) *StaffInfoCreate {
	sic.mutation.SetName(s)
	return sic
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sic *StaffInfoCreate) SetNillableName(s *string) *StaffInfoCreate {
	if s != nil {
		sic.SetName(*s)
	}
	return sic
}

// SetAvatar sets the "avatar" field.
func (sic *StaffInfoCreate) SetAvatar(s string) *StaffInfoCreate {
	sic.mutation.SetAvatar(s)
	return sic
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (sic *StaffInfoCreate) SetNillableAvatar(s *string) *StaffInfoCreate {
	if s != nil {
		sic.SetAvatar(*s)
	}
	return sic
}

// SetGender sets the "gender" field.
func (sic *StaffInfoCreate) SetGender(i int8) *StaffInfoCreate {
	sic.mutation.SetGender(i)
	return sic
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (sic *StaffInfoCreate) SetNillableGender(i *int8) *StaffInfoCreate {
	if i != nil {
		sic.SetGender(*i)
	}
	return sic
}

// SetCreateAt sets the "create_at" field.
func (sic *StaffInfoCreate) SetCreateAt(t time.Time) *StaffInfoCreate {
	sic.mutation.SetCreateAt(t)
	return sic
}

// SetUpdateAt sets the "update_at" field.
func (sic *StaffInfoCreate) SetUpdateAt(t time.Time) *StaffInfoCreate {
	sic.mutation.SetUpdateAt(t)
	return sic
}

// Mutation returns the StaffInfoMutation object of the builder.
func (sic *StaffInfoCreate) Mutation() *StaffInfoMutation {
	return sic.mutation
}

// Save creates the StaffInfo in the database.
func (sic *StaffInfoCreate) Save(ctx context.Context) (*StaffInfo, error) {
	var (
		err  error
		node *StaffInfo
	)
	sic.defaults()
	if len(sic.hooks) == 0 {
		if err = sic.check(); err != nil {
			return nil, err
		}
		node, err = sic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StaffInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sic.check(); err != nil {
				return nil, err
			}
			sic.mutation = mutation
			node, err = sic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sic.hooks) - 1; i >= 0; i-- {
			mut = sic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sic *StaffInfoCreate) SaveX(ctx context.Context) *StaffInfo {
	v, err := sic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (sic *StaffInfoCreate) defaults() {
	if _, ok := sic.mutation.UID(); !ok {
		v := staffinfo.DefaultUID
		sic.mutation.SetUID(v)
	}
	if _, ok := sic.mutation.Email(); !ok {
		v := staffinfo.DefaultEmail
		sic.mutation.SetEmail(v)
	}
	if _, ok := sic.mutation.Phone(); !ok {
		v := staffinfo.DefaultPhone
		sic.mutation.SetPhone(v)
	}
	if _, ok := sic.mutation.Password(); !ok {
		v := staffinfo.DefaultPassword
		sic.mutation.SetPassword(v)
	}
	if _, ok := sic.mutation.Name(); !ok {
		v := staffinfo.DefaultName
		sic.mutation.SetName(v)
	}
	if _, ok := sic.mutation.Avatar(); !ok {
		v := staffinfo.DefaultAvatar
		sic.mutation.SetAvatar(v)
	}
	if _, ok := sic.mutation.Gender(); !ok {
		v := staffinfo.DefaultGender
		sic.mutation.SetGender(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sic *StaffInfoCreate) check() error {
	if _, ok := sic.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New("ent: missing required field \"uid\"")}
	}
	if v, ok := sic.mutation.UID(); ok {
		if err := staffinfo.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf("ent: validator failed for field \"uid\": %w", err)}
		}
	}
	if _, ok := sic.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New("ent: missing required field \"email\"")}
	}
	if v, ok := sic.mutation.Email(); ok {
		if err := staffinfo.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf("ent: validator failed for field \"email\": %w", err)}
		}
	}
	if _, ok := sic.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New("ent: missing required field \"phone\"")}
	}
	if v, ok := sic.mutation.Phone(); ok {
		if err := staffinfo.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf("ent: validator failed for field \"phone\": %w", err)}
		}
	}
	if _, ok := sic.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New("ent: missing required field \"password\"")}
	}
	if v, ok := sic.mutation.Password(); ok {
		if err := staffinfo.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf("ent: validator failed for field \"password\": %w", err)}
		}
	}
	if _, ok := sic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := sic.mutation.Name(); ok {
		if err := staffinfo.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if _, ok := sic.mutation.Avatar(); !ok {
		return &ValidationError{Name: "avatar", err: errors.New("ent: missing required field \"avatar\"")}
	}
	if v, ok := sic.mutation.Avatar(); ok {
		if err := staffinfo.AvatarValidator(v); err != nil {
			return &ValidationError{Name: "avatar", err: fmt.Errorf("ent: validator failed for field \"avatar\": %w", err)}
		}
	}
	if _, ok := sic.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New("ent: missing required field \"gender\"")}
	}
	if _, ok := sic.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New("ent: missing required field \"create_at\"")}
	}
	if _, ok := sic.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New("ent: missing required field \"update_at\"")}
	}
	return nil
}

func (sic *StaffInfoCreate) sqlSave(ctx context.Context) (*StaffInfo, error) {
	_node, _spec := sic.createSpec()
	if err := sqlgraph.CreateNode(ctx, sic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (sic *StaffInfoCreate) createSpec() (*StaffInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &StaffInfo{config: sic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: staffinfo.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: staffinfo.FieldID,
			},
		}
	)
	if value, ok := sic.mutation.UID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: staffinfo.FieldUID,
		})
		_node.UID = value
	}
	if value, ok := sic.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staffinfo.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := sic.mutation.Phone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staffinfo.FieldPhone,
		})
		_node.Phone = value
	}
	if value, ok := sic.mutation.Password(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staffinfo.FieldPassword,
		})
		_node.Password = value
	}
	if value, ok := sic.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staffinfo.FieldName,
		})
		_node.Name = value
	}
	if value, ok := sic.mutation.Avatar(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staffinfo.FieldAvatar,
		})
		_node.Avatar = value
	}
	if value, ok := sic.mutation.Gender(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: staffinfo.FieldGender,
		})
		_node.Gender = value
	}
	if value, ok := sic.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: staffinfo.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := sic.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: staffinfo.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	return _node, _spec
}

// StaffInfoCreateBulk is the builder for creating many StaffInfo entities in bulk.
type StaffInfoCreateBulk struct {
	config
	builders []*StaffInfoCreate
}

// Save creates the StaffInfo entities in the database.
func (sicb *StaffInfoCreateBulk) Save(ctx context.Context) ([]*StaffInfo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sicb.builders))
	nodes := make([]*StaffInfo, len(sicb.builders))
	mutators := make([]Mutator, len(sicb.builders))
	for i := range sicb.builders {
		func(i int, root context.Context) {
			builder := sicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StaffInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sicb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sicb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sicb *StaffInfoCreateBulk) SaveX(ctx context.Context) []*StaffInfo {
	v, err := sicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
