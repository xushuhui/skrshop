// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"skrshop/internal/data/ent/skrmember"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// SkrMember is the model entity for the SkrMember schema.
type SkrMember struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 账号 id
	UID int64 `json:"uid,omitempty"`
	// Nickname holds the value of the "nickname" field.
	Nickname string `json:"nickname,omitempty"`
	// Avatar holds the value of the "avatar" field.
	Avatar string `json:"avatar,omitempty"`
	// 性别 1 unknow 2 male 3 female
	Gender int8 `json:"gender,omitempty"`
	// 角色 0: 普通用户 1:vip
	Role int8 `json:"role,omitempty"`
	// 创建时间
	CreateAt time.Time `json:"create_at,omitempty"`
	// 更新时间
	UpdateAt time.Time `json:"update_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SkrMember) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case skrmember.FieldID, skrmember.FieldUID, skrmember.FieldGender, skrmember.FieldRole:
			values[i] = &sql.NullInt64{}
		case skrmember.FieldNickname, skrmember.FieldAvatar:
			values[i] = &sql.NullString{}
		case skrmember.FieldCreateAt, skrmember.FieldUpdateAt:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type SkrMember", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SkrMember fields.
func (sm *SkrMember) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case skrmember.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sm.ID = int(value.Int64)
		case skrmember.FieldUID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				sm.UID = value.Int64
			}
		case skrmember.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				sm.Nickname = value.String
			}
		case skrmember.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				sm.Avatar = value.String
			}
		case skrmember.FieldGender:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				sm.Gender = int8(value.Int64)
			}
		case skrmember.FieldRole:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				sm.Role = int8(value.Int64)
			}
		case skrmember.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				sm.CreateAt = value.Time
			}
		case skrmember.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				sm.UpdateAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this SkrMember.
// Note that you need to call SkrMember.Unwrap() before calling this method if this SkrMember
// was returned from a transaction, and the transaction was committed or rolled back.
func (sm *SkrMember) Update() *SkrMemberUpdateOne {
	return (&SkrMemberClient{config: sm.config}).UpdateOne(sm)
}

// Unwrap unwraps the SkrMember entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sm *SkrMember) Unwrap() *SkrMember {
	tx, ok := sm.config.driver.(*txDriver)
	if !ok {
		panic("ent: SkrMember is not a transactional entity")
	}
	sm.config.driver = tx.drv
	return sm
}

// String implements the fmt.Stringer.
func (sm *SkrMember) String() string {
	var builder strings.Builder
	builder.WriteString("SkrMember(")
	builder.WriteString(fmt.Sprintf("id=%v", sm.ID))
	builder.WriteString(", uid=")
	builder.WriteString(fmt.Sprintf("%v", sm.UID))
	builder.WriteString(", nickname=")
	builder.WriteString(sm.Nickname)
	builder.WriteString(", avatar=")
	builder.WriteString(sm.Avatar)
	builder.WriteString(", gender=")
	builder.WriteString(fmt.Sprintf("%v", sm.Gender))
	builder.WriteString(", role=")
	builder.WriteString(fmt.Sprintf("%v", sm.Role))
	builder.WriteString(", create_at=")
	builder.WriteString(sm.CreateAt.Format(time.ANSIC))
	builder.WriteString(", update_at=")
	builder.WriteString(sm.UpdateAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SkrMembers is a parsable slice of SkrMember.
type SkrMembers []*SkrMember

func (sm SkrMembers) config(cfg config) {
	for _i := range sm {
		sm[_i].config = cfg
	}
}
