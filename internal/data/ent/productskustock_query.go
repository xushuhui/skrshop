// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"
	"skrshop/internal/data/ent/predicate"
	"skrshop/internal/data/ent/productskustock"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductSkuStockQuery is the builder for querying ProductSkuStock entities.
type ProductSkuStockQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	fields     []string
	predicates []predicate.ProductSkuStock
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProductSkuStockQuery builder.
func (pssq *ProductSkuStockQuery) Where(ps ...predicate.ProductSkuStock) *ProductSkuStockQuery {
	pssq.predicates = append(pssq.predicates, ps...)
	return pssq
}

// Limit adds a limit step to the query.
func (pssq *ProductSkuStockQuery) Limit(limit int) *ProductSkuStockQuery {
	pssq.limit = &limit
	return pssq
}

// Offset adds an offset step to the query.
func (pssq *ProductSkuStockQuery) Offset(offset int) *ProductSkuStockQuery {
	pssq.offset = &offset
	return pssq
}

// Order adds an order step to the query.
func (pssq *ProductSkuStockQuery) Order(o ...OrderFunc) *ProductSkuStockQuery {
	pssq.order = append(pssq.order, o...)
	return pssq
}

// First returns the first ProductSkuStock entity from the query.
// Returns a *NotFoundError when no ProductSkuStock was found.
func (pssq *ProductSkuStockQuery) First(ctx context.Context) (*ProductSkuStock, error) {
	nodes, err := pssq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{productskustock.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pssq *ProductSkuStockQuery) FirstX(ctx context.Context) *ProductSkuStock {
	node, err := pssq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProductSkuStock ID from the query.
// Returns a *NotFoundError when no ProductSkuStock ID was found.
func (pssq *ProductSkuStockQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pssq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{productskustock.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pssq *ProductSkuStockQuery) FirstIDX(ctx context.Context) int {
	id, err := pssq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProductSkuStock entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one ProductSkuStock entity is not found.
// Returns a *NotFoundError when no ProductSkuStock entities are found.
func (pssq *ProductSkuStockQuery) Only(ctx context.Context) (*ProductSkuStock, error) {
	nodes, err := pssq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{productskustock.Label}
	default:
		return nil, &NotSingularError{productskustock.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pssq *ProductSkuStockQuery) OnlyX(ctx context.Context) *ProductSkuStock {
	node, err := pssq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProductSkuStock ID in the query.
// Returns a *NotSingularError when exactly one ProductSkuStock ID is not found.
// Returns a *NotFoundError when no entities are found.
func (pssq *ProductSkuStockQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pssq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{productskustock.Label}
	default:
		err = &NotSingularError{productskustock.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pssq *ProductSkuStockQuery) OnlyIDX(ctx context.Context) int {
	id, err := pssq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProductSkuStocks.
func (pssq *ProductSkuStockQuery) All(ctx context.Context) ([]*ProductSkuStock, error) {
	if err := pssq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return pssq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (pssq *ProductSkuStockQuery) AllX(ctx context.Context) []*ProductSkuStock {
	nodes, err := pssq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProductSkuStock IDs.
func (pssq *ProductSkuStockQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := pssq.Select(productskustock.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pssq *ProductSkuStockQuery) IDsX(ctx context.Context) []int {
	ids, err := pssq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pssq *ProductSkuStockQuery) Count(ctx context.Context) (int, error) {
	if err := pssq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return pssq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (pssq *ProductSkuStockQuery) CountX(ctx context.Context) int {
	count, err := pssq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pssq *ProductSkuStockQuery) Exist(ctx context.Context) (bool, error) {
	if err := pssq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return pssq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (pssq *ProductSkuStockQuery) ExistX(ctx context.Context) bool {
	exist, err := pssq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProductSkuStockQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pssq *ProductSkuStockQuery) Clone() *ProductSkuStockQuery {
	if pssq == nil {
		return nil
	}
	return &ProductSkuStockQuery{
		config:     pssq.config,
		limit:      pssq.limit,
		offset:     pssq.offset,
		order:      append([]OrderFunc{}, pssq.order...),
		predicates: append([]predicate.ProductSkuStock{}, pssq.predicates...),
		// clone intermediate query.
		sql:  pssq.sql.Clone(),
		path: pssq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateAt time.Time `json:"create_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProductSkuStock.Query().
//		GroupBy(productskustock.FieldCreateAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (pssq *ProductSkuStockQuery) GroupBy(field string, fields ...string) *ProductSkuStockGroupBy {
	group := &ProductSkuStockGroupBy{config: pssq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := pssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return pssq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateAt time.Time `json:"create_at,omitempty"`
//	}
//
//	client.ProductSkuStock.Query().
//		Select(productskustock.FieldCreateAt).
//		Scan(ctx, &v)
//
func (pssq *ProductSkuStockQuery) Select(field string, fields ...string) *ProductSkuStockSelect {
	pssq.fields = append([]string{field}, fields...)
	return &ProductSkuStockSelect{ProductSkuStockQuery: pssq}
}

func (pssq *ProductSkuStockQuery) prepareQuery(ctx context.Context) error {
	for _, f := range pssq.fields {
		if !productskustock.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pssq.path != nil {
		prev, err := pssq.path(ctx)
		if err != nil {
			return err
		}
		pssq.sql = prev
	}
	return nil
}

func (pssq *ProductSkuStockQuery) sqlAll(ctx context.Context) ([]*ProductSkuStock, error) {
	var (
		nodes = []*ProductSkuStock{}
		_spec = pssq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &ProductSkuStock{config: pssq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, pssq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (pssq *ProductSkuStockQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pssq.querySpec()
	return sqlgraph.CountNodes(ctx, pssq.driver, _spec)
}

func (pssq *ProductSkuStockQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := pssq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (pssq *ProductSkuStockQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productskustock.Table,
			Columns: productskustock.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productskustock.FieldID,
			},
		},
		From:   pssq.sql,
		Unique: true,
	}
	if fields := pssq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productskustock.FieldID)
		for i := range fields {
			if fields[i] != productskustock.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pssq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pssq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pssq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pssq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, productskustock.ValidColumn)
			}
		}
	}
	return _spec
}

func (pssq *ProductSkuStockQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pssq.driver.Dialect())
	t1 := builder.Table(productskustock.Table)
	selector := builder.Select(t1.Columns(productskustock.Columns...)...).From(t1)
	if pssq.sql != nil {
		selector = pssq.sql
		selector.Select(selector.Columns(productskustock.Columns...)...)
	}
	for _, p := range pssq.predicates {
		p(selector)
	}
	for _, p := range pssq.order {
		p(selector, productskustock.ValidColumn)
	}
	if offset := pssq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pssq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProductSkuStockGroupBy is the group-by builder for ProductSkuStock entities.
type ProductSkuStockGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pssgb *ProductSkuStockGroupBy) Aggregate(fns ...AggregateFunc) *ProductSkuStockGroupBy {
	pssgb.fns = append(pssgb.fns, fns...)
	return pssgb
}

// Scan applies the group-by query and scans the result into the given value.
func (pssgb *ProductSkuStockGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := pssgb.path(ctx)
	if err != nil {
		return err
	}
	pssgb.sql = query
	return pssgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (pssgb *ProductSkuStockGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := pssgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (pssgb *ProductSkuStockGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(pssgb.fields) > 1 {
		return nil, errors.New("ent: ProductSkuStockGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := pssgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (pssgb *ProductSkuStockGroupBy) StringsX(ctx context.Context) []string {
	v, err := pssgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pssgb *ProductSkuStockGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = pssgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productskustock.Label}
	default:
		err = fmt.Errorf("ent: ProductSkuStockGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (pssgb *ProductSkuStockGroupBy) StringX(ctx context.Context) string {
	v, err := pssgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (pssgb *ProductSkuStockGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(pssgb.fields) > 1 {
		return nil, errors.New("ent: ProductSkuStockGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := pssgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (pssgb *ProductSkuStockGroupBy) IntsX(ctx context.Context) []int {
	v, err := pssgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pssgb *ProductSkuStockGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = pssgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productskustock.Label}
	default:
		err = fmt.Errorf("ent: ProductSkuStockGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (pssgb *ProductSkuStockGroupBy) IntX(ctx context.Context) int {
	v, err := pssgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (pssgb *ProductSkuStockGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(pssgb.fields) > 1 {
		return nil, errors.New("ent: ProductSkuStockGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := pssgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (pssgb *ProductSkuStockGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := pssgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pssgb *ProductSkuStockGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = pssgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productskustock.Label}
	default:
		err = fmt.Errorf("ent: ProductSkuStockGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (pssgb *ProductSkuStockGroupBy) Float64X(ctx context.Context) float64 {
	v, err := pssgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (pssgb *ProductSkuStockGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(pssgb.fields) > 1 {
		return nil, errors.New("ent: ProductSkuStockGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := pssgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (pssgb *ProductSkuStockGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := pssgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pssgb *ProductSkuStockGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = pssgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productskustock.Label}
	default:
		err = fmt.Errorf("ent: ProductSkuStockGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (pssgb *ProductSkuStockGroupBy) BoolX(ctx context.Context) bool {
	v, err := pssgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pssgb *ProductSkuStockGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range pssgb.fields {
		if !productskustock.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := pssgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pssgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (pssgb *ProductSkuStockGroupBy) sqlQuery() *sql.Selector {
	selector := pssgb.sql
	columns := make([]string, 0, len(pssgb.fields)+len(pssgb.fns))
	columns = append(columns, pssgb.fields...)
	for _, fn := range pssgb.fns {
		columns = append(columns, fn(selector, productskustock.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(pssgb.fields...)
}

// ProductSkuStockSelect is the builder for selecting fields of ProductSkuStock entities.
type ProductSkuStockSelect struct {
	*ProductSkuStockQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (psss *ProductSkuStockSelect) Scan(ctx context.Context, v interface{}) error {
	if err := psss.prepareQuery(ctx); err != nil {
		return err
	}
	psss.sql = psss.ProductSkuStockQuery.sqlQuery(ctx)
	return psss.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (psss *ProductSkuStockSelect) ScanX(ctx context.Context, v interface{}) {
	if err := psss.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (psss *ProductSkuStockSelect) Strings(ctx context.Context) ([]string, error) {
	if len(psss.fields) > 1 {
		return nil, errors.New("ent: ProductSkuStockSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := psss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (psss *ProductSkuStockSelect) StringsX(ctx context.Context) []string {
	v, err := psss.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (psss *ProductSkuStockSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = psss.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productskustock.Label}
	default:
		err = fmt.Errorf("ent: ProductSkuStockSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (psss *ProductSkuStockSelect) StringX(ctx context.Context) string {
	v, err := psss.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (psss *ProductSkuStockSelect) Ints(ctx context.Context) ([]int, error) {
	if len(psss.fields) > 1 {
		return nil, errors.New("ent: ProductSkuStockSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := psss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (psss *ProductSkuStockSelect) IntsX(ctx context.Context) []int {
	v, err := psss.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (psss *ProductSkuStockSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = psss.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productskustock.Label}
	default:
		err = fmt.Errorf("ent: ProductSkuStockSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (psss *ProductSkuStockSelect) IntX(ctx context.Context) int {
	v, err := psss.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (psss *ProductSkuStockSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(psss.fields) > 1 {
		return nil, errors.New("ent: ProductSkuStockSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := psss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (psss *ProductSkuStockSelect) Float64sX(ctx context.Context) []float64 {
	v, err := psss.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (psss *ProductSkuStockSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = psss.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productskustock.Label}
	default:
		err = fmt.Errorf("ent: ProductSkuStockSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (psss *ProductSkuStockSelect) Float64X(ctx context.Context) float64 {
	v, err := psss.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (psss *ProductSkuStockSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(psss.fields) > 1 {
		return nil, errors.New("ent: ProductSkuStockSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := psss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (psss *ProductSkuStockSelect) BoolsX(ctx context.Context) []bool {
	v, err := psss.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (psss *ProductSkuStockSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = psss.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productskustock.Label}
	default:
		err = fmt.Errorf("ent: ProductSkuStockSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (psss *ProductSkuStockSelect) BoolX(ctx context.Context) bool {
	v, err := psss.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (psss *ProductSkuStockSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := psss.sqlQuery().Query()
	if err := psss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (psss *ProductSkuStockSelect) sqlQuery() sql.Querier {
	selector := psss.sql
	selector.Select(selector.Columns(psss.fields...)...)
	return selector
}
