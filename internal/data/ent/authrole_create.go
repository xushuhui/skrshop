// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"skrshop/internal/data/ent/authrole"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AuthRoleCreate is the builder for creating a AuthRole entity.
type AuthRoleCreate struct {
	config
	mutation *AuthRoleMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (arc *AuthRoleCreate) SetStatus(i int8) *AuthRoleCreate {
	arc.mutation.SetStatus(i)
	return arc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (arc *AuthRoleCreate) SetNillableStatus(i *int8) *AuthRoleCreate {
	if i != nil {
		arc.SetStatus(*i)
	}
	return arc
}

// SetCreateAt sets the "create_at" field.
func (arc *AuthRoleCreate) SetCreateAt(t time.Time) *AuthRoleCreate {
	arc.mutation.SetCreateAt(t)
	return arc
}

// SetUpdateAt sets the "update_at" field.
func (arc *AuthRoleCreate) SetUpdateAt(t time.Time) *AuthRoleCreate {
	arc.mutation.SetUpdateAt(t)
	return arc
}

// Mutation returns the AuthRoleMutation object of the builder.
func (arc *AuthRoleCreate) Mutation() *AuthRoleMutation {
	return arc.mutation
}

// Save creates the AuthRole in the database.
func (arc *AuthRoleCreate) Save(ctx context.Context) (*AuthRole, error) {
	var (
		err  error
		node *AuthRole
	)
	arc.defaults()
	if len(arc.hooks) == 0 {
		if err = arc.check(); err != nil {
			return nil, err
		}
		node, err = arc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuthRoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = arc.check(); err != nil {
				return nil, err
			}
			arc.mutation = mutation
			node, err = arc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(arc.hooks) - 1; i >= 0; i-- {
			mut = arc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, arc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (arc *AuthRoleCreate) SaveX(ctx context.Context) *AuthRole {
	v, err := arc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (arc *AuthRoleCreate) defaults() {
	if _, ok := arc.mutation.Status(); !ok {
		v := authrole.DefaultStatus
		arc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (arc *AuthRoleCreate) check() error {
	if _, ok := arc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if _, ok := arc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New("ent: missing required field \"create_at\"")}
	}
	if _, ok := arc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New("ent: missing required field \"update_at\"")}
	}
	return nil
}

func (arc *AuthRoleCreate) sqlSave(ctx context.Context) (*AuthRole, error) {
	_node, _spec := arc.createSpec()
	if err := sqlgraph.CreateNode(ctx, arc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (arc *AuthRoleCreate) createSpec() (*AuthRole, *sqlgraph.CreateSpec) {
	var (
		_node = &AuthRole{config: arc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: authrole.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: authrole.FieldID,
			},
		}
	)
	if value, ok := arc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: authrole.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := arc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authrole.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := arc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authrole.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	return _node, _spec
}

// AuthRoleCreateBulk is the builder for creating many AuthRole entities in bulk.
type AuthRoleCreateBulk struct {
	config
	builders []*AuthRoleCreate
}

// Save creates the AuthRole entities in the database.
func (arcb *AuthRoleCreateBulk) Save(ctx context.Context) ([]*AuthRole, error) {
	specs := make([]*sqlgraph.CreateSpec, len(arcb.builders))
	nodes := make([]*AuthRole, len(arcb.builders))
	mutators := make([]Mutator, len(arcb.builders))
	for i := range arcb.builders {
		func(i int, root context.Context) {
			builder := arcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuthRoleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, arcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, arcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, arcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (arcb *AuthRoleCreateBulk) SaveX(ctx context.Context) []*AuthRole {
	v, err := arcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
