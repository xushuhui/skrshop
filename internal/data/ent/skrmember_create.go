// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"skrshop/internal/data/ent/skrmember"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SkrMemberCreate is the builder for creating a SkrMember entity.
type SkrMemberCreate struct {
	config
	mutation *SkrMemberMutation
	hooks    []Hook
}

// SetUID sets the "uid" field.
func (smc *SkrMemberCreate) SetUID(i int64) *SkrMemberCreate {
	smc.mutation.SetUID(i)
	return smc
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (smc *SkrMemberCreate) SetNillableUID(i *int64) *SkrMemberCreate {
	if i != nil {
		smc.SetUID(*i)
	}
	return smc
}

// SetNickname sets the "nickname" field.
func (smc *SkrMemberCreate) SetNickname(s string) *SkrMemberCreate {
	smc.mutation.SetNickname(s)
	return smc
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (smc *SkrMemberCreate) SetNillableNickname(s *string) *SkrMemberCreate {
	if s != nil {
		smc.SetNickname(*s)
	}
	return smc
}

// SetAvatar sets the "avatar" field.
func (smc *SkrMemberCreate) SetAvatar(s string) *SkrMemberCreate {
	smc.mutation.SetAvatar(s)
	return smc
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (smc *SkrMemberCreate) SetNillableAvatar(s *string) *SkrMemberCreate {
	if s != nil {
		smc.SetAvatar(*s)
	}
	return smc
}

// SetGender sets the "gender" field.
func (smc *SkrMemberCreate) SetGender(i int8) *SkrMemberCreate {
	smc.mutation.SetGender(i)
	return smc
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (smc *SkrMemberCreate) SetNillableGender(i *int8) *SkrMemberCreate {
	if i != nil {
		smc.SetGender(*i)
	}
	return smc
}

// SetRole sets the "role" field.
func (smc *SkrMemberCreate) SetRole(i int8) *SkrMemberCreate {
	smc.mutation.SetRole(i)
	return smc
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (smc *SkrMemberCreate) SetNillableRole(i *int8) *SkrMemberCreate {
	if i != nil {
		smc.SetRole(*i)
	}
	return smc
}

// SetCreateAt sets the "create_at" field.
func (smc *SkrMemberCreate) SetCreateAt(t time.Time) *SkrMemberCreate {
	smc.mutation.SetCreateAt(t)
	return smc
}

// SetUpdateAt sets the "update_at" field.
func (smc *SkrMemberCreate) SetUpdateAt(t time.Time) *SkrMemberCreate {
	smc.mutation.SetUpdateAt(t)
	return smc
}

// Mutation returns the SkrMemberMutation object of the builder.
func (smc *SkrMemberCreate) Mutation() *SkrMemberMutation {
	return smc.mutation
}

// Save creates the SkrMember in the database.
func (smc *SkrMemberCreate) Save(ctx context.Context) (*SkrMember, error) {
	var (
		err  error
		node *SkrMember
	)
	smc.defaults()
	if len(smc.hooks) == 0 {
		if err = smc.check(); err != nil {
			return nil, err
		}
		node, err = smc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SkrMemberMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = smc.check(); err != nil {
				return nil, err
			}
			smc.mutation = mutation
			node, err = smc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(smc.hooks) - 1; i >= 0; i-- {
			mut = smc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, smc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (smc *SkrMemberCreate) SaveX(ctx context.Context) *SkrMember {
	v, err := smc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (smc *SkrMemberCreate) defaults() {
	if _, ok := smc.mutation.UID(); !ok {
		v := skrmember.DefaultUID
		smc.mutation.SetUID(v)
	}
	if _, ok := smc.mutation.Nickname(); !ok {
		v := skrmember.DefaultNickname
		smc.mutation.SetNickname(v)
	}
	if _, ok := smc.mutation.Avatar(); !ok {
		v := skrmember.DefaultAvatar
		smc.mutation.SetAvatar(v)
	}
	if _, ok := smc.mutation.Gender(); !ok {
		v := skrmember.DefaultGender
		smc.mutation.SetGender(v)
	}
	if _, ok := smc.mutation.Role(); !ok {
		v := skrmember.DefaultRole
		smc.mutation.SetRole(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smc *SkrMemberCreate) check() error {
	if _, ok := smc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New("ent: missing required field \"uid\"")}
	}
	if v, ok := smc.mutation.UID(); ok {
		if err := skrmember.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf("ent: validator failed for field \"uid\": %w", err)}
		}
	}
	if _, ok := smc.mutation.Nickname(); !ok {
		return &ValidationError{Name: "nickname", err: errors.New("ent: missing required field \"nickname\"")}
	}
	if v, ok := smc.mutation.Nickname(); ok {
		if err := skrmember.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf("ent: validator failed for field \"nickname\": %w", err)}
		}
	}
	if _, ok := smc.mutation.Avatar(); !ok {
		return &ValidationError{Name: "avatar", err: errors.New("ent: missing required field \"avatar\"")}
	}
	if v, ok := smc.mutation.Avatar(); ok {
		if err := skrmember.AvatarValidator(v); err != nil {
			return &ValidationError{Name: "avatar", err: fmt.Errorf("ent: validator failed for field \"avatar\": %w", err)}
		}
	}
	if _, ok := smc.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New("ent: missing required field \"gender\"")}
	}
	if _, ok := smc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New("ent: missing required field \"role\"")}
	}
	if _, ok := smc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New("ent: missing required field \"create_at\"")}
	}
	if _, ok := smc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New("ent: missing required field \"update_at\"")}
	}
	return nil
}

func (smc *SkrMemberCreate) sqlSave(ctx context.Context) (*SkrMember, error) {
	_node, _spec := smc.createSpec()
	if err := sqlgraph.CreateNode(ctx, smc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (smc *SkrMemberCreate) createSpec() (*SkrMember, *sqlgraph.CreateSpec) {
	var (
		_node = &SkrMember{config: smc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: skrmember.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: skrmember.FieldID,
			},
		}
	)
	if value, ok := smc.mutation.UID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: skrmember.FieldUID,
		})
		_node.UID = value
	}
	if value, ok := smc.mutation.Nickname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: skrmember.FieldNickname,
		})
		_node.Nickname = value
	}
	if value, ok := smc.mutation.Avatar(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: skrmember.FieldAvatar,
		})
		_node.Avatar = value
	}
	if value, ok := smc.mutation.Gender(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: skrmember.FieldGender,
		})
		_node.Gender = value
	}
	if value, ok := smc.mutation.Role(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: skrmember.FieldRole,
		})
		_node.Role = value
	}
	if value, ok := smc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: skrmember.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := smc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: skrmember.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	return _node, _spec
}

// SkrMemberCreateBulk is the builder for creating many SkrMember entities in bulk.
type SkrMemberCreateBulk struct {
	config
	builders []*SkrMemberCreate
}

// Save creates the SkrMember entities in the database.
func (smcb *SkrMemberCreateBulk) Save(ctx context.Context) ([]*SkrMember, error) {
	specs := make([]*sqlgraph.CreateSpec, len(smcb.builders))
	nodes := make([]*SkrMember, len(smcb.builders))
	mutators := make([]Mutator, len(smcb.builders))
	for i := range smcb.builders {
		func(i int, root context.Context) {
			builder := smcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SkrMemberMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, smcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, smcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, smcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (smcb *SkrMemberCreateBulk) SaveX(ctx context.Context) []*SkrMember {
	v, err := smcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
