// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"skrshop/internal/data/ent/accountplatform"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// AccountPlatform is the model entity for the AccountPlatform schema.
type AccountPlatform struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 账号 id
	UID int64 `json:"uid,omitempty"`
	// 平台 id
	PlatformID string `json:"platform_id,omitempty"`
	// 平台 access_token
	PlatformToken string `json:"platform_token,omitempty"`
	// Nickname holds the value of the "nickname" field.
	Nickname string `json:"nickname,omitempty"`
	// Avatar holds the value of the "avatar" field.
	Avatar string `json:"avatar,omitempty"`
	// 平台类型 0: 未知，1:facebook,2:google,3:wechat,4:qq,5:weibo,6:twitter
	Type int8 `json:"type,omitempty"`
	// 创建时间
	CreateAt time.Time `json:"create_at,omitempty"`
	// 更新时间
	UpdateAt time.Time `json:"update_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AccountPlatform) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case accountplatform.FieldID, accountplatform.FieldUID, accountplatform.FieldType:
			values[i] = &sql.NullInt64{}
		case accountplatform.FieldPlatformID, accountplatform.FieldPlatformToken, accountplatform.FieldNickname, accountplatform.FieldAvatar:
			values[i] = &sql.NullString{}
		case accountplatform.FieldCreateAt, accountplatform.FieldUpdateAt:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type AccountPlatform", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AccountPlatform fields.
func (ap *AccountPlatform) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case accountplatform.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ap.ID = int(value.Int64)
		case accountplatform.FieldUID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				ap.UID = value.Int64
			}
		case accountplatform.FieldPlatformID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform_id", values[i])
			} else if value.Valid {
				ap.PlatformID = value.String
			}
		case accountplatform.FieldPlatformToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform_token", values[i])
			} else if value.Valid {
				ap.PlatformToken = value.String
			}
		case accountplatform.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				ap.Nickname = value.String
			}
		case accountplatform.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				ap.Avatar = value.String
			}
		case accountplatform.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ap.Type = int8(value.Int64)
			}
		case accountplatform.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				ap.CreateAt = value.Time
			}
		case accountplatform.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				ap.UpdateAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AccountPlatform.
// Note that you need to call AccountPlatform.Unwrap() before calling this method if this AccountPlatform
// was returned from a transaction, and the transaction was committed or rolled back.
func (ap *AccountPlatform) Update() *AccountPlatformUpdateOne {
	return (&AccountPlatformClient{config: ap.config}).UpdateOne(ap)
}

// Unwrap unwraps the AccountPlatform entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ap *AccountPlatform) Unwrap() *AccountPlatform {
	tx, ok := ap.config.driver.(*txDriver)
	if !ok {
		panic("ent: AccountPlatform is not a transactional entity")
	}
	ap.config.driver = tx.drv
	return ap
}

// String implements the fmt.Stringer.
func (ap *AccountPlatform) String() string {
	var builder strings.Builder
	builder.WriteString("AccountPlatform(")
	builder.WriteString(fmt.Sprintf("id=%v", ap.ID))
	builder.WriteString(", uid=")
	builder.WriteString(fmt.Sprintf("%v", ap.UID))
	builder.WriteString(", platform_id=")
	builder.WriteString(ap.PlatformID)
	builder.WriteString(", platform_token=")
	builder.WriteString(ap.PlatformToken)
	builder.WriteString(", nickname=")
	builder.WriteString(ap.Nickname)
	builder.WriteString(", avatar=")
	builder.WriteString(ap.Avatar)
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", ap.Type))
	builder.WriteString(", create_at=")
	builder.WriteString(ap.CreateAt.Format(time.ANSIC))
	builder.WriteString(", update_at=")
	builder.WriteString(ap.UpdateAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AccountPlatforms is a parsable slice of AccountPlatform.
type AccountPlatforms []*AccountPlatform

func (ap AccountPlatforms) config(cfg config) {
	for _i := range ap {
		ap[_i].config = cfg
	}
}
