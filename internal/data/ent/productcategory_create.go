// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"skrshop/internal/data/ent/productcategory"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductCategoryCreate is the builder for creating a ProductCategory entity.
type ProductCategoryCreate struct {
	config
	mutation *ProductCategoryMutation
	hooks    []Hook
}

// SetPid sets the "pid" field.
func (pcc *ProductCategoryCreate) SetPid(i int64) *ProductCategoryCreate {
	pcc.mutation.SetPid(i)
	return pcc
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (pcc *ProductCategoryCreate) SetNillablePid(i *int64) *ProductCategoryCreate {
	if i != nil {
		pcc.SetPid(*i)
	}
	return pcc
}

// SetName sets the "name" field.
func (pcc *ProductCategoryCreate) SetName(s string) *ProductCategoryCreate {
	pcc.mutation.SetName(s)
	return pcc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pcc *ProductCategoryCreate) SetNillableName(s *string) *ProductCategoryCreate {
	if s != nil {
		pcc.SetName(*s)
	}
	return pcc
}

// SetDesc sets the "desc" field.
func (pcc *ProductCategoryCreate) SetDesc(s string) *ProductCategoryCreate {
	pcc.mutation.SetDesc(s)
	return pcc
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (pcc *ProductCategoryCreate) SetNillableDesc(s *string) *ProductCategoryCreate {
	if s != nil {
		pcc.SetDesc(*s)
	}
	return pcc
}

// SetPicURL sets the "pic_url" field.
func (pcc *ProductCategoryCreate) SetPicURL(s string) *ProductCategoryCreate {
	pcc.mutation.SetPicURL(s)
	return pcc
}

// SetNillablePicURL sets the "pic_url" field if the given value is not nil.
func (pcc *ProductCategoryCreate) SetNillablePicURL(s *string) *ProductCategoryCreate {
	if s != nil {
		pcc.SetPicURL(*s)
	}
	return pcc
}

// SetPath sets the "path" field.
func (pcc *ProductCategoryCreate) SetPath(s string) *ProductCategoryCreate {
	pcc.mutation.SetPath(s)
	return pcc
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (pcc *ProductCategoryCreate) SetNillablePath(s *string) *ProductCategoryCreate {
	if s != nil {
		pcc.SetPath(*s)
	}
	return pcc
}

// SetStatus sets the "status" field.
func (pcc *ProductCategoryCreate) SetStatus(i int8) *ProductCategoryCreate {
	pcc.mutation.SetStatus(i)
	return pcc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pcc *ProductCategoryCreate) SetNillableStatus(i *int8) *ProductCategoryCreate {
	if i != nil {
		pcc.SetStatus(*i)
	}
	return pcc
}

// SetCreateAt sets the "create_at" field.
func (pcc *ProductCategoryCreate) SetCreateAt(t time.Time) *ProductCategoryCreate {
	pcc.mutation.SetCreateAt(t)
	return pcc
}

// SetUpdateAt sets the "update_at" field.
func (pcc *ProductCategoryCreate) SetUpdateAt(t time.Time) *ProductCategoryCreate {
	pcc.mutation.SetUpdateAt(t)
	return pcc
}

// Mutation returns the ProductCategoryMutation object of the builder.
func (pcc *ProductCategoryCreate) Mutation() *ProductCategoryMutation {
	return pcc.mutation
}

// Save creates the ProductCategory in the database.
func (pcc *ProductCategoryCreate) Save(ctx context.Context) (*ProductCategory, error) {
	var (
		err  error
		node *ProductCategory
	)
	pcc.defaults()
	if len(pcc.hooks) == 0 {
		if err = pcc.check(); err != nil {
			return nil, err
		}
		node, err = pcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pcc.check(); err != nil {
				return nil, err
			}
			pcc.mutation = mutation
			node, err = pcc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pcc.hooks) - 1; i >= 0; i-- {
			mut = pcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pcc *ProductCategoryCreate) SaveX(ctx context.Context) *ProductCategory {
	v, err := pcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (pcc *ProductCategoryCreate) defaults() {
	if _, ok := pcc.mutation.Pid(); !ok {
		v := productcategory.DefaultPid
		pcc.mutation.SetPid(v)
	}
	if _, ok := pcc.mutation.Name(); !ok {
		v := productcategory.DefaultName
		pcc.mutation.SetName(v)
	}
	if _, ok := pcc.mutation.Desc(); !ok {
		v := productcategory.DefaultDesc
		pcc.mutation.SetDesc(v)
	}
	if _, ok := pcc.mutation.PicURL(); !ok {
		v := productcategory.DefaultPicURL
		pcc.mutation.SetPicURL(v)
	}
	if _, ok := pcc.mutation.Path(); !ok {
		v := productcategory.DefaultPath
		pcc.mutation.SetPath(v)
	}
	if _, ok := pcc.mutation.Status(); !ok {
		v := productcategory.DefaultStatus
		pcc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcc *ProductCategoryCreate) check() error {
	if _, ok := pcc.mutation.Pid(); !ok {
		return &ValidationError{Name: "pid", err: errors.New("ent: missing required field \"pid\"")}
	}
	if v, ok := pcc.mutation.Pid(); ok {
		if err := productcategory.PidValidator(v); err != nil {
			return &ValidationError{Name: "pid", err: fmt.Errorf("ent: validator failed for field \"pid\": %w", err)}
		}
	}
	if _, ok := pcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := pcc.mutation.Name(); ok {
		if err := productcategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if _, ok := pcc.mutation.Desc(); !ok {
		return &ValidationError{Name: "desc", err: errors.New("ent: missing required field \"desc\"")}
	}
	if v, ok := pcc.mutation.Desc(); ok {
		if err := productcategory.DescValidator(v); err != nil {
			return &ValidationError{Name: "desc", err: fmt.Errorf("ent: validator failed for field \"desc\": %w", err)}
		}
	}
	if _, ok := pcc.mutation.PicURL(); !ok {
		return &ValidationError{Name: "pic_url", err: errors.New("ent: missing required field \"pic_url\"")}
	}
	if v, ok := pcc.mutation.PicURL(); ok {
		if err := productcategory.PicURLValidator(v); err != nil {
			return &ValidationError{Name: "pic_url", err: fmt.Errorf("ent: validator failed for field \"pic_url\": %w", err)}
		}
	}
	if _, ok := pcc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New("ent: missing required field \"path\"")}
	}
	if v, ok := pcc.mutation.Path(); ok {
		if err := productcategory.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf("ent: validator failed for field \"path\": %w", err)}
		}
	}
	if _, ok := pcc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if _, ok := pcc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New("ent: missing required field \"create_at\"")}
	}
	if _, ok := pcc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New("ent: missing required field \"update_at\"")}
	}
	return nil
}

func (pcc *ProductCategoryCreate) sqlSave(ctx context.Context) (*ProductCategory, error) {
	_node, _spec := pcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pcc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pcc *ProductCategoryCreate) createSpec() (*ProductCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &ProductCategory{config: pcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: productcategory.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productcategory.FieldID,
			},
		}
	)
	if value, ok := pcc.mutation.Pid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productcategory.FieldPid,
		})
		_node.Pid = value
	}
	if value, ok := pcc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldName,
		})
		_node.Name = value
	}
	if value, ok := pcc.mutation.Desc(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldDesc,
		})
		_node.Desc = value
	}
	if value, ok := pcc.mutation.PicURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldPicURL,
		})
		_node.PicURL = value
	}
	if value, ok := pcc.mutation.Path(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldPath,
		})
		_node.Path = value
	}
	if value, ok := pcc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productcategory.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := pcc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productcategory.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := pcc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productcategory.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	return _node, _spec
}

// ProductCategoryCreateBulk is the builder for creating many ProductCategory entities in bulk.
type ProductCategoryCreateBulk struct {
	config
	builders []*ProductCategoryCreate
}

// Save creates the ProductCategory entities in the database.
func (pccb *ProductCategoryCreateBulk) Save(ctx context.Context) ([]*ProductCategory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pccb.builders))
	nodes := make([]*ProductCategory, len(pccb.builders))
	mutators := make([]Mutator, len(pccb.builders))
	for i := range pccb.builders {
		func(i int, root context.Context) {
			builder := pccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pccb *ProductCategoryCreateBulk) SaveX(ctx context.Context) []*ProductCategory {
	v, err := pccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
