// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"
	"skrshop/internal/data/ent/authrolestaff"
	"skrshop/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AuthRoleStaffQuery is the builder for querying AuthRoleStaff entities.
type AuthRoleStaffQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	fields     []string
	predicates []predicate.AuthRoleStaff
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AuthRoleStaffQuery builder.
func (arsq *AuthRoleStaffQuery) Where(ps ...predicate.AuthRoleStaff) *AuthRoleStaffQuery {
	arsq.predicates = append(arsq.predicates, ps...)
	return arsq
}

// Limit adds a limit step to the query.
func (arsq *AuthRoleStaffQuery) Limit(limit int) *AuthRoleStaffQuery {
	arsq.limit = &limit
	return arsq
}

// Offset adds an offset step to the query.
func (arsq *AuthRoleStaffQuery) Offset(offset int) *AuthRoleStaffQuery {
	arsq.offset = &offset
	return arsq
}

// Order adds an order step to the query.
func (arsq *AuthRoleStaffQuery) Order(o ...OrderFunc) *AuthRoleStaffQuery {
	arsq.order = append(arsq.order, o...)
	return arsq
}

// First returns the first AuthRoleStaff entity from the query.
// Returns a *NotFoundError when no AuthRoleStaff was found.
func (arsq *AuthRoleStaffQuery) First(ctx context.Context) (*AuthRoleStaff, error) {
	nodes, err := arsq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{authrolestaff.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (arsq *AuthRoleStaffQuery) FirstX(ctx context.Context) *AuthRoleStaff {
	node, err := arsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AuthRoleStaff ID from the query.
// Returns a *NotFoundError when no AuthRoleStaff ID was found.
func (arsq *AuthRoleStaffQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = arsq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{authrolestaff.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (arsq *AuthRoleStaffQuery) FirstIDX(ctx context.Context) int {
	id, err := arsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AuthRoleStaff entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one AuthRoleStaff entity is not found.
// Returns a *NotFoundError when no AuthRoleStaff entities are found.
func (arsq *AuthRoleStaffQuery) Only(ctx context.Context) (*AuthRoleStaff, error) {
	nodes, err := arsq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{authrolestaff.Label}
	default:
		return nil, &NotSingularError{authrolestaff.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (arsq *AuthRoleStaffQuery) OnlyX(ctx context.Context) *AuthRoleStaff {
	node, err := arsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AuthRoleStaff ID in the query.
// Returns a *NotSingularError when exactly one AuthRoleStaff ID is not found.
// Returns a *NotFoundError when no entities are found.
func (arsq *AuthRoleStaffQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = arsq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{authrolestaff.Label}
	default:
		err = &NotSingularError{authrolestaff.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (arsq *AuthRoleStaffQuery) OnlyIDX(ctx context.Context) int {
	id, err := arsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AuthRoleStaffs.
func (arsq *AuthRoleStaffQuery) All(ctx context.Context) ([]*AuthRoleStaff, error) {
	if err := arsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return arsq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (arsq *AuthRoleStaffQuery) AllX(ctx context.Context) []*AuthRoleStaff {
	nodes, err := arsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AuthRoleStaff IDs.
func (arsq *AuthRoleStaffQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := arsq.Select(authrolestaff.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (arsq *AuthRoleStaffQuery) IDsX(ctx context.Context) []int {
	ids, err := arsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (arsq *AuthRoleStaffQuery) Count(ctx context.Context) (int, error) {
	if err := arsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return arsq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (arsq *AuthRoleStaffQuery) CountX(ctx context.Context) int {
	count, err := arsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (arsq *AuthRoleStaffQuery) Exist(ctx context.Context) (bool, error) {
	if err := arsq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return arsq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (arsq *AuthRoleStaffQuery) ExistX(ctx context.Context) bool {
	exist, err := arsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AuthRoleStaffQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (arsq *AuthRoleStaffQuery) Clone() *AuthRoleStaffQuery {
	if arsq == nil {
		return nil
	}
	return &AuthRoleStaffQuery{
		config:     arsq.config,
		limit:      arsq.limit,
		offset:     arsq.offset,
		order:      append([]OrderFunc{}, arsq.order...),
		predicates: append([]predicate.AuthRoleStaff{}, arsq.predicates...),
		// clone intermediate query.
		sql:  arsq.sql.Clone(),
		path: arsq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Status int8 `json:"status,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AuthRoleStaff.Query().
//		GroupBy(authrolestaff.FieldStatus).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (arsq *AuthRoleStaffQuery) GroupBy(field string, fields ...string) *AuthRoleStaffGroupBy {
	group := &AuthRoleStaffGroupBy{config: arsq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := arsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return arsq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Status int8 `json:"status,omitempty"`
//	}
//
//	client.AuthRoleStaff.Query().
//		Select(authrolestaff.FieldStatus).
//		Scan(ctx, &v)
//
func (arsq *AuthRoleStaffQuery) Select(field string, fields ...string) *AuthRoleStaffSelect {
	arsq.fields = append([]string{field}, fields...)
	return &AuthRoleStaffSelect{AuthRoleStaffQuery: arsq}
}

func (arsq *AuthRoleStaffQuery) prepareQuery(ctx context.Context) error {
	for _, f := range arsq.fields {
		if !authrolestaff.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if arsq.path != nil {
		prev, err := arsq.path(ctx)
		if err != nil {
			return err
		}
		arsq.sql = prev
	}
	return nil
}

func (arsq *AuthRoleStaffQuery) sqlAll(ctx context.Context) ([]*AuthRoleStaff, error) {
	var (
		nodes = []*AuthRoleStaff{}
		_spec = arsq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &AuthRoleStaff{config: arsq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, arsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (arsq *AuthRoleStaffQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := arsq.querySpec()
	return sqlgraph.CountNodes(ctx, arsq.driver, _spec)
}

func (arsq *AuthRoleStaffQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := arsq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (arsq *AuthRoleStaffQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   authrolestaff.Table,
			Columns: authrolestaff.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: authrolestaff.FieldID,
			},
		},
		From:   arsq.sql,
		Unique: true,
	}
	if fields := arsq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authrolestaff.FieldID)
		for i := range fields {
			if fields[i] != authrolestaff.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := arsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := arsq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := arsq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := arsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, authrolestaff.ValidColumn)
			}
		}
	}
	return _spec
}

func (arsq *AuthRoleStaffQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(arsq.driver.Dialect())
	t1 := builder.Table(authrolestaff.Table)
	selector := builder.Select(t1.Columns(authrolestaff.Columns...)...).From(t1)
	if arsq.sql != nil {
		selector = arsq.sql
		selector.Select(selector.Columns(authrolestaff.Columns...)...)
	}
	for _, p := range arsq.predicates {
		p(selector)
	}
	for _, p := range arsq.order {
		p(selector, authrolestaff.ValidColumn)
	}
	if offset := arsq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := arsq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AuthRoleStaffGroupBy is the group-by builder for AuthRoleStaff entities.
type AuthRoleStaffGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (arsgb *AuthRoleStaffGroupBy) Aggregate(fns ...AggregateFunc) *AuthRoleStaffGroupBy {
	arsgb.fns = append(arsgb.fns, fns...)
	return arsgb
}

// Scan applies the group-by query and scans the result into the given value.
func (arsgb *AuthRoleStaffGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := arsgb.path(ctx)
	if err != nil {
		return err
	}
	arsgb.sql = query
	return arsgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (arsgb *AuthRoleStaffGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := arsgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (arsgb *AuthRoleStaffGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(arsgb.fields) > 1 {
		return nil, errors.New("ent: AuthRoleStaffGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := arsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (arsgb *AuthRoleStaffGroupBy) StringsX(ctx context.Context) []string {
	v, err := arsgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (arsgb *AuthRoleStaffGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = arsgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{authrolestaff.Label}
	default:
		err = fmt.Errorf("ent: AuthRoleStaffGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (arsgb *AuthRoleStaffGroupBy) StringX(ctx context.Context) string {
	v, err := arsgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (arsgb *AuthRoleStaffGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(arsgb.fields) > 1 {
		return nil, errors.New("ent: AuthRoleStaffGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := arsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (arsgb *AuthRoleStaffGroupBy) IntsX(ctx context.Context) []int {
	v, err := arsgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (arsgb *AuthRoleStaffGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = arsgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{authrolestaff.Label}
	default:
		err = fmt.Errorf("ent: AuthRoleStaffGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (arsgb *AuthRoleStaffGroupBy) IntX(ctx context.Context) int {
	v, err := arsgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (arsgb *AuthRoleStaffGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(arsgb.fields) > 1 {
		return nil, errors.New("ent: AuthRoleStaffGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := arsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (arsgb *AuthRoleStaffGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := arsgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (arsgb *AuthRoleStaffGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = arsgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{authrolestaff.Label}
	default:
		err = fmt.Errorf("ent: AuthRoleStaffGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (arsgb *AuthRoleStaffGroupBy) Float64X(ctx context.Context) float64 {
	v, err := arsgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (arsgb *AuthRoleStaffGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(arsgb.fields) > 1 {
		return nil, errors.New("ent: AuthRoleStaffGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := arsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (arsgb *AuthRoleStaffGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := arsgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (arsgb *AuthRoleStaffGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = arsgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{authrolestaff.Label}
	default:
		err = fmt.Errorf("ent: AuthRoleStaffGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (arsgb *AuthRoleStaffGroupBy) BoolX(ctx context.Context) bool {
	v, err := arsgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (arsgb *AuthRoleStaffGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range arsgb.fields {
		if !authrolestaff.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := arsgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := arsgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (arsgb *AuthRoleStaffGroupBy) sqlQuery() *sql.Selector {
	selector := arsgb.sql
	columns := make([]string, 0, len(arsgb.fields)+len(arsgb.fns))
	columns = append(columns, arsgb.fields...)
	for _, fn := range arsgb.fns {
		columns = append(columns, fn(selector, authrolestaff.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(arsgb.fields...)
}

// AuthRoleStaffSelect is the builder for selecting fields of AuthRoleStaff entities.
type AuthRoleStaffSelect struct {
	*AuthRoleStaffQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (arss *AuthRoleStaffSelect) Scan(ctx context.Context, v interface{}) error {
	if err := arss.prepareQuery(ctx); err != nil {
		return err
	}
	arss.sql = arss.AuthRoleStaffQuery.sqlQuery(ctx)
	return arss.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (arss *AuthRoleStaffSelect) ScanX(ctx context.Context, v interface{}) {
	if err := arss.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (arss *AuthRoleStaffSelect) Strings(ctx context.Context) ([]string, error) {
	if len(arss.fields) > 1 {
		return nil, errors.New("ent: AuthRoleStaffSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := arss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (arss *AuthRoleStaffSelect) StringsX(ctx context.Context) []string {
	v, err := arss.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (arss *AuthRoleStaffSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = arss.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{authrolestaff.Label}
	default:
		err = fmt.Errorf("ent: AuthRoleStaffSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (arss *AuthRoleStaffSelect) StringX(ctx context.Context) string {
	v, err := arss.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (arss *AuthRoleStaffSelect) Ints(ctx context.Context) ([]int, error) {
	if len(arss.fields) > 1 {
		return nil, errors.New("ent: AuthRoleStaffSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := arss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (arss *AuthRoleStaffSelect) IntsX(ctx context.Context) []int {
	v, err := arss.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (arss *AuthRoleStaffSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = arss.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{authrolestaff.Label}
	default:
		err = fmt.Errorf("ent: AuthRoleStaffSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (arss *AuthRoleStaffSelect) IntX(ctx context.Context) int {
	v, err := arss.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (arss *AuthRoleStaffSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(arss.fields) > 1 {
		return nil, errors.New("ent: AuthRoleStaffSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := arss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (arss *AuthRoleStaffSelect) Float64sX(ctx context.Context) []float64 {
	v, err := arss.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (arss *AuthRoleStaffSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = arss.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{authrolestaff.Label}
	default:
		err = fmt.Errorf("ent: AuthRoleStaffSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (arss *AuthRoleStaffSelect) Float64X(ctx context.Context) float64 {
	v, err := arss.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (arss *AuthRoleStaffSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(arss.fields) > 1 {
		return nil, errors.New("ent: AuthRoleStaffSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := arss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (arss *AuthRoleStaffSelect) BoolsX(ctx context.Context) []bool {
	v, err := arss.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (arss *AuthRoleStaffSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = arss.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{authrolestaff.Label}
	default:
		err = fmt.Errorf("ent: AuthRoleStaffSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (arss *AuthRoleStaffSelect) BoolX(ctx context.Context) bool {
	v, err := arss.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (arss *AuthRoleStaffSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := arss.sqlQuery().Query()
	if err := arss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (arss *AuthRoleStaffSelect) sqlQuery() sql.Querier {
	selector := arss.sql
	selector.Select(selector.Columns(arss.fields...)...)
	return selector
}
