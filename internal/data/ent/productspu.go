// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"skrshop/internal/data/ent/productspu"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ProductSpu is the model entity for the ProductSpu schema.
type ProductSpu struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 品牌 id
	BrandID int64 `json:"brand_id,omitempty"`
	// 分类 id
	CategoryID int64 `json:"category_id,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// 描述
	Desc string `json:"desc,omitempty"`
	// 卖点
	SellingPoint string `json:"selling_point,omitempty"`
	// spu 单位
	Unit string `json:"unit,omitempty"`
	// banner 图片 多个图片逗号分隔
	BannerURL string `json:"banner_url,omitempty"`
	// 商品介绍主图 多个图片逗号分隔
	MainURL string `json:"main_url,omitempty"`
	// 售价，整数方式保存
	PriceFee int64 `json:"price_fee,omitempty"`
	// 售价，金额对应的小数位数
	PriceScale int8 `json:"price_scale,omitempty"`
	// 市场价，整数方式保存
	MarketPriceFee int64 `json:"market_price_fee,omitempty"`
	// 市场价，金额对应的小数位数
	MarketPriceScale int8 `json:"market_price_scale,omitempty"`
	// 创建时间
	CreateAt time.Time `json:"create_at,omitempty"`
	// 更新时间
	UpdateAt time.Time `json:"update_at,omitempty"`
	// 状态 1:enable, 0:disable, -1:deleted
	Status int8 `json:"status,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductSpu) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case productspu.FieldID, productspu.FieldBrandID, productspu.FieldCategoryID, productspu.FieldPriceFee, productspu.FieldPriceScale, productspu.FieldMarketPriceFee, productspu.FieldMarketPriceScale, productspu.FieldStatus:
			values[i] = &sql.NullInt64{}
		case productspu.FieldName, productspu.FieldDesc, productspu.FieldSellingPoint, productspu.FieldUnit, productspu.FieldBannerURL, productspu.FieldMainURL:
			values[i] = &sql.NullString{}
		case productspu.FieldCreateAt, productspu.FieldUpdateAt:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProductSpu", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductSpu fields.
func (ps *ProductSpu) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productspu.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ps.ID = int(value.Int64)
		case productspu.FieldBrandID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field brand_id", values[i])
			} else if value.Valid {
				ps.BrandID = value.Int64
			}
		case productspu.FieldCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value.Valid {
				ps.CategoryID = value.Int64
			}
		case productspu.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ps.Name = value.String
			}
		case productspu.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				ps.Desc = value.String
			}
		case productspu.FieldSellingPoint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field selling_point", values[i])
			} else if value.Valid {
				ps.SellingPoint = value.String
			}
		case productspu.FieldUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unit", values[i])
			} else if value.Valid {
				ps.Unit = value.String
			}
		case productspu.FieldBannerURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field banner_url", values[i])
			} else if value.Valid {
				ps.BannerURL = value.String
			}
		case productspu.FieldMainURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field main_url", values[i])
			} else if value.Valid {
				ps.MainURL = value.String
			}
		case productspu.FieldPriceFee:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price_fee", values[i])
			} else if value.Valid {
				ps.PriceFee = value.Int64
			}
		case productspu.FieldPriceScale:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price_scale", values[i])
			} else if value.Valid {
				ps.PriceScale = int8(value.Int64)
			}
		case productspu.FieldMarketPriceFee:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field market_price_fee", values[i])
			} else if value.Valid {
				ps.MarketPriceFee = value.Int64
			}
		case productspu.FieldMarketPriceScale:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field market_price_scale", values[i])
			} else if value.Valid {
				ps.MarketPriceScale = int8(value.Int64)
			}
		case productspu.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				ps.CreateAt = value.Time
			}
		case productspu.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				ps.UpdateAt = value.Time
			}
		case productspu.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ps.Status = int8(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ProductSpu.
// Note that you need to call ProductSpu.Unwrap() before calling this method if this ProductSpu
// was returned from a transaction, and the transaction was committed or rolled back.
func (ps *ProductSpu) Update() *ProductSpuUpdateOne {
	return (&ProductSpuClient{config: ps.config}).UpdateOne(ps)
}

// Unwrap unwraps the ProductSpu entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ps *ProductSpu) Unwrap() *ProductSpu {
	tx, ok := ps.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductSpu is not a transactional entity")
	}
	ps.config.driver = tx.drv
	return ps
}

// String implements the fmt.Stringer.
func (ps *ProductSpu) String() string {
	var builder strings.Builder
	builder.WriteString("ProductSpu(")
	builder.WriteString(fmt.Sprintf("id=%v", ps.ID))
	builder.WriteString(", brand_id=")
	builder.WriteString(fmt.Sprintf("%v", ps.BrandID))
	builder.WriteString(", category_id=")
	builder.WriteString(fmt.Sprintf("%v", ps.CategoryID))
	builder.WriteString(", name=")
	builder.WriteString(ps.Name)
	builder.WriteString(", desc=")
	builder.WriteString(ps.Desc)
	builder.WriteString(", selling_point=")
	builder.WriteString(ps.SellingPoint)
	builder.WriteString(", unit=")
	builder.WriteString(ps.Unit)
	builder.WriteString(", banner_url=")
	builder.WriteString(ps.BannerURL)
	builder.WriteString(", main_url=")
	builder.WriteString(ps.MainURL)
	builder.WriteString(", price_fee=")
	builder.WriteString(fmt.Sprintf("%v", ps.PriceFee))
	builder.WriteString(", price_scale=")
	builder.WriteString(fmt.Sprintf("%v", ps.PriceScale))
	builder.WriteString(", market_price_fee=")
	builder.WriteString(fmt.Sprintf("%v", ps.MarketPriceFee))
	builder.WriteString(", market_price_scale=")
	builder.WriteString(fmt.Sprintf("%v", ps.MarketPriceScale))
	builder.WriteString(", create_at=")
	builder.WriteString(ps.CreateAt.Format(time.ANSIC))
	builder.WriteString(", update_at=")
	builder.WriteString(ps.UpdateAt.Format(time.ANSIC))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", ps.Status))
	builder.WriteByte(')')
	return builder.String()
}

// ProductSpus is a parsable slice of ProductSpu.
type ProductSpus []*ProductSpu

func (ps ProductSpus) config(cfg config) {
	for _i := range ps {
		ps[_i].config = cfg
	}
}
