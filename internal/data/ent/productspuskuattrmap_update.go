// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"skrshop/internal/data/ent/predicate"
	"skrshop/internal/data/ent/productspuskuattrmap"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductSpuSkuAttrMapUpdate is the builder for updating ProductSpuSkuAttrMap entities.
type ProductSpuSkuAttrMapUpdate struct {
	config
	hooks    []Hook
	mutation *ProductSpuSkuAttrMapMutation
}

// Where adds a new predicate for the ProductSpuSkuAttrMapUpdate builder.
func (pssamu *ProductSpuSkuAttrMapUpdate) Where(ps ...predicate.ProductSpuSkuAttrMap) *ProductSpuSkuAttrMapUpdate {
	pssamu.mutation.predicates = append(pssamu.mutation.predicates, ps...)
	return pssamu
}

// SetCreateAt sets the "create_at" field.
func (pssamu *ProductSpuSkuAttrMapUpdate) SetCreateAt(t time.Time) *ProductSpuSkuAttrMapUpdate {
	pssamu.mutation.SetCreateAt(t)
	return pssamu
}

// SetUpdateAt sets the "update_at" field.
func (pssamu *ProductSpuSkuAttrMapUpdate) SetUpdateAt(t time.Time) *ProductSpuSkuAttrMapUpdate {
	pssamu.mutation.SetUpdateAt(t)
	return pssamu
}

// SetStatus sets the "status" field.
func (pssamu *ProductSpuSkuAttrMapUpdate) SetStatus(i int8) *ProductSpuSkuAttrMapUpdate {
	pssamu.mutation.ResetStatus()
	pssamu.mutation.SetStatus(i)
	return pssamu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pssamu *ProductSpuSkuAttrMapUpdate) SetNillableStatus(i *int8) *ProductSpuSkuAttrMapUpdate {
	if i != nil {
		pssamu.SetStatus(*i)
	}
	return pssamu
}

// AddStatus adds i to the "status" field.
func (pssamu *ProductSpuSkuAttrMapUpdate) AddStatus(i int8) *ProductSpuSkuAttrMapUpdate {
	pssamu.mutation.AddStatus(i)
	return pssamu
}

// Mutation returns the ProductSpuSkuAttrMapMutation object of the builder.
func (pssamu *ProductSpuSkuAttrMapUpdate) Mutation() *ProductSpuSkuAttrMapMutation {
	return pssamu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pssamu *ProductSpuSkuAttrMapUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pssamu.hooks) == 0 {
		affected, err = pssamu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductSpuSkuAttrMapMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pssamu.mutation = mutation
			affected, err = pssamu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pssamu.hooks) - 1; i >= 0; i-- {
			mut = pssamu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pssamu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pssamu *ProductSpuSkuAttrMapUpdate) SaveX(ctx context.Context) int {
	affected, err := pssamu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pssamu *ProductSpuSkuAttrMapUpdate) Exec(ctx context.Context) error {
	_, err := pssamu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pssamu *ProductSpuSkuAttrMapUpdate) ExecX(ctx context.Context) {
	if err := pssamu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pssamu *ProductSpuSkuAttrMapUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productspuskuattrmap.Table,
			Columns: productspuskuattrmap.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productspuskuattrmap.FieldID,
			},
		},
	}
	if ps := pssamu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pssamu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productspuskuattrmap.FieldCreateAt,
		})
	}
	if value, ok := pssamu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productspuskuattrmap.FieldUpdateAt,
		})
	}
	if value, ok := pssamu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productspuskuattrmap.FieldStatus,
		})
	}
	if value, ok := pssamu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productspuskuattrmap.FieldStatus,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pssamu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productspuskuattrmap.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProductSpuSkuAttrMapUpdateOne is the builder for updating a single ProductSpuSkuAttrMap entity.
type ProductSpuSkuAttrMapUpdateOne struct {
	config
	hooks    []Hook
	mutation *ProductSpuSkuAttrMapMutation
}

// SetCreateAt sets the "create_at" field.
func (pssamuo *ProductSpuSkuAttrMapUpdateOne) SetCreateAt(t time.Time) *ProductSpuSkuAttrMapUpdateOne {
	pssamuo.mutation.SetCreateAt(t)
	return pssamuo
}

// SetUpdateAt sets the "update_at" field.
func (pssamuo *ProductSpuSkuAttrMapUpdateOne) SetUpdateAt(t time.Time) *ProductSpuSkuAttrMapUpdateOne {
	pssamuo.mutation.SetUpdateAt(t)
	return pssamuo
}

// SetStatus sets the "status" field.
func (pssamuo *ProductSpuSkuAttrMapUpdateOne) SetStatus(i int8) *ProductSpuSkuAttrMapUpdateOne {
	pssamuo.mutation.ResetStatus()
	pssamuo.mutation.SetStatus(i)
	return pssamuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pssamuo *ProductSpuSkuAttrMapUpdateOne) SetNillableStatus(i *int8) *ProductSpuSkuAttrMapUpdateOne {
	if i != nil {
		pssamuo.SetStatus(*i)
	}
	return pssamuo
}

// AddStatus adds i to the "status" field.
func (pssamuo *ProductSpuSkuAttrMapUpdateOne) AddStatus(i int8) *ProductSpuSkuAttrMapUpdateOne {
	pssamuo.mutation.AddStatus(i)
	return pssamuo
}

// Mutation returns the ProductSpuSkuAttrMapMutation object of the builder.
func (pssamuo *ProductSpuSkuAttrMapUpdateOne) Mutation() *ProductSpuSkuAttrMapMutation {
	return pssamuo.mutation
}

// Save executes the query and returns the updated ProductSpuSkuAttrMap entity.
func (pssamuo *ProductSpuSkuAttrMapUpdateOne) Save(ctx context.Context) (*ProductSpuSkuAttrMap, error) {
	var (
		err  error
		node *ProductSpuSkuAttrMap
	)
	if len(pssamuo.hooks) == 0 {
		node, err = pssamuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductSpuSkuAttrMapMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pssamuo.mutation = mutation
			node, err = pssamuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pssamuo.hooks) - 1; i >= 0; i-- {
			mut = pssamuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pssamuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pssamuo *ProductSpuSkuAttrMapUpdateOne) SaveX(ctx context.Context) *ProductSpuSkuAttrMap {
	node, err := pssamuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pssamuo *ProductSpuSkuAttrMapUpdateOne) Exec(ctx context.Context) error {
	_, err := pssamuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pssamuo *ProductSpuSkuAttrMapUpdateOne) ExecX(ctx context.Context) {
	if err := pssamuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pssamuo *ProductSpuSkuAttrMapUpdateOne) sqlSave(ctx context.Context) (_node *ProductSpuSkuAttrMap, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productspuskuattrmap.Table,
			Columns: productspuskuattrmap.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productspuskuattrmap.FieldID,
			},
		},
	}
	id, ok := pssamuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProductSpuSkuAttrMap.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := pssamuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pssamuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productspuskuattrmap.FieldCreateAt,
		})
	}
	if value, ok := pssamuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productspuskuattrmap.FieldUpdateAt,
		})
	}
	if value, ok := pssamuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productspuskuattrmap.FieldStatus,
		})
	}
	if value, ok := pssamuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productspuskuattrmap.FieldStatus,
		})
	}
	_node = &ProductSpuSkuAttrMap{config: pssamuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pssamuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productspuskuattrmap.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
