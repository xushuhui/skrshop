// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"skrshop/internal/data/ent/predicate"
	"skrshop/internal/data/ent/staffinfo"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StaffInfoUpdate is the builder for updating StaffInfo entities.
type StaffInfoUpdate struct {
	config
	hooks    []Hook
	mutation *StaffInfoMutation
}

// Where adds a new predicate for the StaffInfoUpdate builder.
func (siu *StaffInfoUpdate) Where(ps ...predicate.StaffInfo) *StaffInfoUpdate {
	siu.mutation.predicates = append(siu.mutation.predicates, ps...)
	return siu
}

// SetUID sets the "uid" field.
func (siu *StaffInfoUpdate) SetUID(i int64) *StaffInfoUpdate {
	siu.mutation.ResetUID()
	siu.mutation.SetUID(i)
	return siu
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (siu *StaffInfoUpdate) SetNillableUID(i *int64) *StaffInfoUpdate {
	if i != nil {
		siu.SetUID(*i)
	}
	return siu
}

// AddUID adds i to the "uid" field.
func (siu *StaffInfoUpdate) AddUID(i int64) *StaffInfoUpdate {
	siu.mutation.AddUID(i)
	return siu
}

// SetEmail sets the "email" field.
func (siu *StaffInfoUpdate) SetEmail(s string) *StaffInfoUpdate {
	siu.mutation.SetEmail(s)
	return siu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (siu *StaffInfoUpdate) SetNillableEmail(s *string) *StaffInfoUpdate {
	if s != nil {
		siu.SetEmail(*s)
	}
	return siu
}

// SetPhone sets the "phone" field.
func (siu *StaffInfoUpdate) SetPhone(s string) *StaffInfoUpdate {
	siu.mutation.SetPhone(s)
	return siu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (siu *StaffInfoUpdate) SetNillablePhone(s *string) *StaffInfoUpdate {
	if s != nil {
		siu.SetPhone(*s)
	}
	return siu
}

// SetPassword sets the "password" field.
func (siu *StaffInfoUpdate) SetPassword(s string) *StaffInfoUpdate {
	siu.mutation.SetPassword(s)
	return siu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (siu *StaffInfoUpdate) SetNillablePassword(s *string) *StaffInfoUpdate {
	if s != nil {
		siu.SetPassword(*s)
	}
	return siu
}

// SetName sets the "name" field.
func (siu *StaffInfoUpdate) SetName(s string) *StaffInfoUpdate {
	siu.mutation.SetName(s)
	return siu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (siu *StaffInfoUpdate) SetNillableName(s *string) *StaffInfoUpdate {
	if s != nil {
		siu.SetName(*s)
	}
	return siu
}

// SetAvatar sets the "avatar" field.
func (siu *StaffInfoUpdate) SetAvatar(s string) *StaffInfoUpdate {
	siu.mutation.SetAvatar(s)
	return siu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (siu *StaffInfoUpdate) SetNillableAvatar(s *string) *StaffInfoUpdate {
	if s != nil {
		siu.SetAvatar(*s)
	}
	return siu
}

// SetGender sets the "gender" field.
func (siu *StaffInfoUpdate) SetGender(i int8) *StaffInfoUpdate {
	siu.mutation.ResetGender()
	siu.mutation.SetGender(i)
	return siu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (siu *StaffInfoUpdate) SetNillableGender(i *int8) *StaffInfoUpdate {
	if i != nil {
		siu.SetGender(*i)
	}
	return siu
}

// AddGender adds i to the "gender" field.
func (siu *StaffInfoUpdate) AddGender(i int8) *StaffInfoUpdate {
	siu.mutation.AddGender(i)
	return siu
}

// SetCreateAt sets the "create_at" field.
func (siu *StaffInfoUpdate) SetCreateAt(t time.Time) *StaffInfoUpdate {
	siu.mutation.SetCreateAt(t)
	return siu
}

// SetUpdateAt sets the "update_at" field.
func (siu *StaffInfoUpdate) SetUpdateAt(t time.Time) *StaffInfoUpdate {
	siu.mutation.SetUpdateAt(t)
	return siu
}

// Mutation returns the StaffInfoMutation object of the builder.
func (siu *StaffInfoUpdate) Mutation() *StaffInfoMutation {
	return siu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (siu *StaffInfoUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(siu.hooks) == 0 {
		if err = siu.check(); err != nil {
			return 0, err
		}
		affected, err = siu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StaffInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = siu.check(); err != nil {
				return 0, err
			}
			siu.mutation = mutation
			affected, err = siu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(siu.hooks) - 1; i >= 0; i-- {
			mut = siu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, siu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (siu *StaffInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := siu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (siu *StaffInfoUpdate) Exec(ctx context.Context) error {
	_, err := siu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siu *StaffInfoUpdate) ExecX(ctx context.Context) {
	if err := siu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (siu *StaffInfoUpdate) check() error {
	if v, ok := siu.mutation.UID(); ok {
		if err := staffinfo.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf("ent: validator failed for field \"uid\": %w", err)}
		}
	}
	if v, ok := siu.mutation.Email(); ok {
		if err := staffinfo.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf("ent: validator failed for field \"email\": %w", err)}
		}
	}
	if v, ok := siu.mutation.Phone(); ok {
		if err := staffinfo.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf("ent: validator failed for field \"phone\": %w", err)}
		}
	}
	if v, ok := siu.mutation.Password(); ok {
		if err := staffinfo.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf("ent: validator failed for field \"password\": %w", err)}
		}
	}
	if v, ok := siu.mutation.Name(); ok {
		if err := staffinfo.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := siu.mutation.Avatar(); ok {
		if err := staffinfo.AvatarValidator(v); err != nil {
			return &ValidationError{Name: "avatar", err: fmt.Errorf("ent: validator failed for field \"avatar\": %w", err)}
		}
	}
	return nil
}

func (siu *StaffInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   staffinfo.Table,
			Columns: staffinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: staffinfo.FieldID,
			},
		},
	}
	if ps := siu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := siu.mutation.UID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: staffinfo.FieldUID,
		})
	}
	if value, ok := siu.mutation.AddedUID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: staffinfo.FieldUID,
		})
	}
	if value, ok := siu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staffinfo.FieldEmail,
		})
	}
	if value, ok := siu.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staffinfo.FieldPhone,
		})
	}
	if value, ok := siu.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staffinfo.FieldPassword,
		})
	}
	if value, ok := siu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staffinfo.FieldName,
		})
	}
	if value, ok := siu.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staffinfo.FieldAvatar,
		})
	}
	if value, ok := siu.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: staffinfo.FieldGender,
		})
	}
	if value, ok := siu.mutation.AddedGender(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: staffinfo.FieldGender,
		})
	}
	if value, ok := siu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: staffinfo.FieldCreateAt,
		})
	}
	if value, ok := siu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: staffinfo.FieldUpdateAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, siu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{staffinfo.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// StaffInfoUpdateOne is the builder for updating a single StaffInfo entity.
type StaffInfoUpdateOne struct {
	config
	hooks    []Hook
	mutation *StaffInfoMutation
}

// SetUID sets the "uid" field.
func (siuo *StaffInfoUpdateOne) SetUID(i int64) *StaffInfoUpdateOne {
	siuo.mutation.ResetUID()
	siuo.mutation.SetUID(i)
	return siuo
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (siuo *StaffInfoUpdateOne) SetNillableUID(i *int64) *StaffInfoUpdateOne {
	if i != nil {
		siuo.SetUID(*i)
	}
	return siuo
}

// AddUID adds i to the "uid" field.
func (siuo *StaffInfoUpdateOne) AddUID(i int64) *StaffInfoUpdateOne {
	siuo.mutation.AddUID(i)
	return siuo
}

// SetEmail sets the "email" field.
func (siuo *StaffInfoUpdateOne) SetEmail(s string) *StaffInfoUpdateOne {
	siuo.mutation.SetEmail(s)
	return siuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (siuo *StaffInfoUpdateOne) SetNillableEmail(s *string) *StaffInfoUpdateOne {
	if s != nil {
		siuo.SetEmail(*s)
	}
	return siuo
}

// SetPhone sets the "phone" field.
func (siuo *StaffInfoUpdateOne) SetPhone(s string) *StaffInfoUpdateOne {
	siuo.mutation.SetPhone(s)
	return siuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (siuo *StaffInfoUpdateOne) SetNillablePhone(s *string) *StaffInfoUpdateOne {
	if s != nil {
		siuo.SetPhone(*s)
	}
	return siuo
}

// SetPassword sets the "password" field.
func (siuo *StaffInfoUpdateOne) SetPassword(s string) *StaffInfoUpdateOne {
	siuo.mutation.SetPassword(s)
	return siuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (siuo *StaffInfoUpdateOne) SetNillablePassword(s *string) *StaffInfoUpdateOne {
	if s != nil {
		siuo.SetPassword(*s)
	}
	return siuo
}

// SetName sets the "name" field.
func (siuo *StaffInfoUpdateOne) SetName(s string) *StaffInfoUpdateOne {
	siuo.mutation.SetName(s)
	return siuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (siuo *StaffInfoUpdateOne) SetNillableName(s *string) *StaffInfoUpdateOne {
	if s != nil {
		siuo.SetName(*s)
	}
	return siuo
}

// SetAvatar sets the "avatar" field.
func (siuo *StaffInfoUpdateOne) SetAvatar(s string) *StaffInfoUpdateOne {
	siuo.mutation.SetAvatar(s)
	return siuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (siuo *StaffInfoUpdateOne) SetNillableAvatar(s *string) *StaffInfoUpdateOne {
	if s != nil {
		siuo.SetAvatar(*s)
	}
	return siuo
}

// SetGender sets the "gender" field.
func (siuo *StaffInfoUpdateOne) SetGender(i int8) *StaffInfoUpdateOne {
	siuo.mutation.ResetGender()
	siuo.mutation.SetGender(i)
	return siuo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (siuo *StaffInfoUpdateOne) SetNillableGender(i *int8) *StaffInfoUpdateOne {
	if i != nil {
		siuo.SetGender(*i)
	}
	return siuo
}

// AddGender adds i to the "gender" field.
func (siuo *StaffInfoUpdateOne) AddGender(i int8) *StaffInfoUpdateOne {
	siuo.mutation.AddGender(i)
	return siuo
}

// SetCreateAt sets the "create_at" field.
func (siuo *StaffInfoUpdateOne) SetCreateAt(t time.Time) *StaffInfoUpdateOne {
	siuo.mutation.SetCreateAt(t)
	return siuo
}

// SetUpdateAt sets the "update_at" field.
func (siuo *StaffInfoUpdateOne) SetUpdateAt(t time.Time) *StaffInfoUpdateOne {
	siuo.mutation.SetUpdateAt(t)
	return siuo
}

// Mutation returns the StaffInfoMutation object of the builder.
func (siuo *StaffInfoUpdateOne) Mutation() *StaffInfoMutation {
	return siuo.mutation
}

// Save executes the query and returns the updated StaffInfo entity.
func (siuo *StaffInfoUpdateOne) Save(ctx context.Context) (*StaffInfo, error) {
	var (
		err  error
		node *StaffInfo
	)
	if len(siuo.hooks) == 0 {
		if err = siuo.check(); err != nil {
			return nil, err
		}
		node, err = siuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StaffInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = siuo.check(); err != nil {
				return nil, err
			}
			siuo.mutation = mutation
			node, err = siuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(siuo.hooks) - 1; i >= 0; i-- {
			mut = siuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, siuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (siuo *StaffInfoUpdateOne) SaveX(ctx context.Context) *StaffInfo {
	node, err := siuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (siuo *StaffInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := siuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siuo *StaffInfoUpdateOne) ExecX(ctx context.Context) {
	if err := siuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (siuo *StaffInfoUpdateOne) check() error {
	if v, ok := siuo.mutation.UID(); ok {
		if err := staffinfo.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf("ent: validator failed for field \"uid\": %w", err)}
		}
	}
	if v, ok := siuo.mutation.Email(); ok {
		if err := staffinfo.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf("ent: validator failed for field \"email\": %w", err)}
		}
	}
	if v, ok := siuo.mutation.Phone(); ok {
		if err := staffinfo.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf("ent: validator failed for field \"phone\": %w", err)}
		}
	}
	if v, ok := siuo.mutation.Password(); ok {
		if err := staffinfo.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf("ent: validator failed for field \"password\": %w", err)}
		}
	}
	if v, ok := siuo.mutation.Name(); ok {
		if err := staffinfo.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := siuo.mutation.Avatar(); ok {
		if err := staffinfo.AvatarValidator(v); err != nil {
			return &ValidationError{Name: "avatar", err: fmt.Errorf("ent: validator failed for field \"avatar\": %w", err)}
		}
	}
	return nil
}

func (siuo *StaffInfoUpdateOne) sqlSave(ctx context.Context) (_node *StaffInfo, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   staffinfo.Table,
			Columns: staffinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: staffinfo.FieldID,
			},
		},
	}
	id, ok := siuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing StaffInfo.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := siuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := siuo.mutation.UID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: staffinfo.FieldUID,
		})
	}
	if value, ok := siuo.mutation.AddedUID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: staffinfo.FieldUID,
		})
	}
	if value, ok := siuo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staffinfo.FieldEmail,
		})
	}
	if value, ok := siuo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staffinfo.FieldPhone,
		})
	}
	if value, ok := siuo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staffinfo.FieldPassword,
		})
	}
	if value, ok := siuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staffinfo.FieldName,
		})
	}
	if value, ok := siuo.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staffinfo.FieldAvatar,
		})
	}
	if value, ok := siuo.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: staffinfo.FieldGender,
		})
	}
	if value, ok := siuo.mutation.AddedGender(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: staffinfo.FieldGender,
		})
	}
	if value, ok := siuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: staffinfo.FieldCreateAt,
		})
	}
	if value, ok := siuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: staffinfo.FieldUpdateAt,
		})
	}
	_node = &StaffInfo{config: siuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, siuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{staffinfo.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
