// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"skrshop/internal/data/ent/productsku"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ProductSku is the model entity for the ProductSku schema.
type ProductSku struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 账号 id
	SpuID int64 `json:"spu_id,omitempty"`
	// 销售属性值 {attr_value_id}-{attr_value_id} 多个销售属性值逗号分隔
	Attrs string `json:"attrs,omitempty"`
	// banner 图片 多个图片逗号分隔
	BannerURL string `json:"banner_url,omitempty"`
	// 商品介绍主图 多个图片逗号分隔
	MainURL string `json:"main_url,omitempty"`
	// 售价，整数方式保存
	PriceFee int64 `json:"price_fee,omitempty"`
	// 售价，金额对应的小数位数
	PriceScale int8 `json:"price_scale,omitempty"`
	// 市场价，整数方式保存
	MarketPriceFee int64 `json:"market_price_fee,omitempty"`
	// 市场价，金额对应的小数位数
	MarketPriceScale int8 `json:"market_price_scale,omitempty"`
	// 创建时间
	CreateAt time.Time `json:"create_at,omitempty"`
	// 更新时间
	UpdateAt time.Time `json:"update_at,omitempty"`
	// 状态 1:enable, 0:disable, -1:deleted
	Status int8 `json:"status,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductSku) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case productsku.FieldID, productsku.FieldSpuID, productsku.FieldPriceFee, productsku.FieldPriceScale, productsku.FieldMarketPriceFee, productsku.FieldMarketPriceScale, productsku.FieldStatus:
			values[i] = &sql.NullInt64{}
		case productsku.FieldAttrs, productsku.FieldBannerURL, productsku.FieldMainURL:
			values[i] = &sql.NullString{}
		case productsku.FieldCreateAt, productsku.FieldUpdateAt:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProductSku", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductSku fields.
func (ps *ProductSku) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productsku.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ps.ID = int(value.Int64)
		case productsku.FieldSpuID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field spu_id", values[i])
			} else if value.Valid {
				ps.SpuID = value.Int64
			}
		case productsku.FieldAttrs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field attrs", values[i])
			} else if value.Valid {
				ps.Attrs = value.String
			}
		case productsku.FieldBannerURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field banner_url", values[i])
			} else if value.Valid {
				ps.BannerURL = value.String
			}
		case productsku.FieldMainURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field main_url", values[i])
			} else if value.Valid {
				ps.MainURL = value.String
			}
		case productsku.FieldPriceFee:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price_fee", values[i])
			} else if value.Valid {
				ps.PriceFee = value.Int64
			}
		case productsku.FieldPriceScale:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price_scale", values[i])
			} else if value.Valid {
				ps.PriceScale = int8(value.Int64)
			}
		case productsku.FieldMarketPriceFee:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field market_price_fee", values[i])
			} else if value.Valid {
				ps.MarketPriceFee = value.Int64
			}
		case productsku.FieldMarketPriceScale:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field market_price_scale", values[i])
			} else if value.Valid {
				ps.MarketPriceScale = int8(value.Int64)
			}
		case productsku.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				ps.CreateAt = value.Time
			}
		case productsku.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				ps.UpdateAt = value.Time
			}
		case productsku.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ps.Status = int8(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ProductSku.
// Note that you need to call ProductSku.Unwrap() before calling this method if this ProductSku
// was returned from a transaction, and the transaction was committed or rolled back.
func (ps *ProductSku) Update() *ProductSkuUpdateOne {
	return (&ProductSkuClient{config: ps.config}).UpdateOne(ps)
}

// Unwrap unwraps the ProductSku entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ps *ProductSku) Unwrap() *ProductSku {
	tx, ok := ps.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductSku is not a transactional entity")
	}
	ps.config.driver = tx.drv
	return ps
}

// String implements the fmt.Stringer.
func (ps *ProductSku) String() string {
	var builder strings.Builder
	builder.WriteString("ProductSku(")
	builder.WriteString(fmt.Sprintf("id=%v", ps.ID))
	builder.WriteString(", spu_id=")
	builder.WriteString(fmt.Sprintf("%v", ps.SpuID))
	builder.WriteString(", attrs=")
	builder.WriteString(ps.Attrs)
	builder.WriteString(", banner_url=")
	builder.WriteString(ps.BannerURL)
	builder.WriteString(", main_url=")
	builder.WriteString(ps.MainURL)
	builder.WriteString(", price_fee=")
	builder.WriteString(fmt.Sprintf("%v", ps.PriceFee))
	builder.WriteString(", price_scale=")
	builder.WriteString(fmt.Sprintf("%v", ps.PriceScale))
	builder.WriteString(", market_price_fee=")
	builder.WriteString(fmt.Sprintf("%v", ps.MarketPriceFee))
	builder.WriteString(", market_price_scale=")
	builder.WriteString(fmt.Sprintf("%v", ps.MarketPriceScale))
	builder.WriteString(", create_at=")
	builder.WriteString(ps.CreateAt.Format(time.ANSIC))
	builder.WriteString(", update_at=")
	builder.WriteString(ps.UpdateAt.Format(time.ANSIC))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", ps.Status))
	builder.WriteByte(')')
	return builder.String()
}

// ProductSkus is a parsable slice of ProductSku.
type ProductSkus []*ProductSku

func (ps ProductSkus) config(cfg config) {
	for _i := range ps {
		ps[_i].config = cfg
	}
}
