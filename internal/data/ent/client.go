// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"skrshop/internal/data/ent/migrate"

	"skrshop/internal/data/ent/accountplatform"
	"skrshop/internal/data/ent/accountuser"
	"skrshop/internal/data/ent/authitem"
	"skrshop/internal/data/ent/authms"
	"skrshop/internal/data/ent/authmsmenu"
	"skrshop/internal/data/ent/authrole"
	"skrshop/internal/data/ent/authrolestaff"
	"skrshop/internal/data/ent/productattr"
	"skrshop/internal/data/ent/productattrvalue"
	"skrshop/internal/data/ent/productbrands"
	"skrshop/internal/data/ent/productcategory"
	"skrshop/internal/data/ent/productsku"
	"skrshop/internal/data/ent/productskustock"
	"skrshop/internal/data/ent/productspu"
	"skrshop/internal/data/ent/productspuskuattrmap"
	"skrshop/internal/data/ent/skrmember"
	"skrshop/internal/data/ent/staffinfo"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AccountPlatform is the client for interacting with the AccountPlatform builders.
	AccountPlatform *AccountPlatformClient
	// AccountUser is the client for interacting with the AccountUser builders.
	AccountUser *AccountUserClient
	// AuthItem is the client for interacting with the AuthItem builders.
	AuthItem *AuthItemClient
	// AuthMs is the client for interacting with the AuthMs builders.
	AuthMs *AuthMsClient
	// AuthMsMenu is the client for interacting with the AuthMsMenu builders.
	AuthMsMenu *AuthMsMenuClient
	// AuthRole is the client for interacting with the AuthRole builders.
	AuthRole *AuthRoleClient
	// AuthRoleStaff is the client for interacting with the AuthRoleStaff builders.
	AuthRoleStaff *AuthRoleStaffClient
	// ProductAttr is the client for interacting with the ProductAttr builders.
	ProductAttr *ProductAttrClient
	// ProductAttrValue is the client for interacting with the ProductAttrValue builders.
	ProductAttrValue *ProductAttrValueClient
	// ProductBrands is the client for interacting with the ProductBrands builders.
	ProductBrands *ProductBrandsClient
	// ProductCategory is the client for interacting with the ProductCategory builders.
	ProductCategory *ProductCategoryClient
	// ProductSku is the client for interacting with the ProductSku builders.
	ProductSku *ProductSkuClient
	// ProductSkuStock is the client for interacting with the ProductSkuStock builders.
	ProductSkuStock *ProductSkuStockClient
	// ProductSpu is the client for interacting with the ProductSpu builders.
	ProductSpu *ProductSpuClient
	// ProductSpuSkuAttrMap is the client for interacting with the ProductSpuSkuAttrMap builders.
	ProductSpuSkuAttrMap *ProductSpuSkuAttrMapClient
	// SkrMember is the client for interacting with the SkrMember builders.
	SkrMember *SkrMemberClient
	// StaffInfo is the client for interacting with the StaffInfo builders.
	StaffInfo *StaffInfoClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AccountPlatform = NewAccountPlatformClient(c.config)
	c.AccountUser = NewAccountUserClient(c.config)
	c.AuthItem = NewAuthItemClient(c.config)
	c.AuthMs = NewAuthMsClient(c.config)
	c.AuthMsMenu = NewAuthMsMenuClient(c.config)
	c.AuthRole = NewAuthRoleClient(c.config)
	c.AuthRoleStaff = NewAuthRoleStaffClient(c.config)
	c.ProductAttr = NewProductAttrClient(c.config)
	c.ProductAttrValue = NewProductAttrValueClient(c.config)
	c.ProductBrands = NewProductBrandsClient(c.config)
	c.ProductCategory = NewProductCategoryClient(c.config)
	c.ProductSku = NewProductSkuClient(c.config)
	c.ProductSkuStock = NewProductSkuStockClient(c.config)
	c.ProductSpu = NewProductSpuClient(c.config)
	c.ProductSpuSkuAttrMap = NewProductSpuSkuAttrMapClient(c.config)
	c.SkrMember = NewSkrMemberClient(c.config)
	c.StaffInfo = NewStaffInfoClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		AccountPlatform:      NewAccountPlatformClient(cfg),
		AccountUser:          NewAccountUserClient(cfg),
		AuthItem:             NewAuthItemClient(cfg),
		AuthMs:               NewAuthMsClient(cfg),
		AuthMsMenu:           NewAuthMsMenuClient(cfg),
		AuthRole:             NewAuthRoleClient(cfg),
		AuthRoleStaff:        NewAuthRoleStaffClient(cfg),
		ProductAttr:          NewProductAttrClient(cfg),
		ProductAttrValue:     NewProductAttrValueClient(cfg),
		ProductBrands:        NewProductBrandsClient(cfg),
		ProductCategory:      NewProductCategoryClient(cfg),
		ProductSku:           NewProductSkuClient(cfg),
		ProductSkuStock:      NewProductSkuStockClient(cfg),
		ProductSpu:           NewProductSpuClient(cfg),
		ProductSpuSkuAttrMap: NewProductSpuSkuAttrMapClient(cfg),
		SkrMember:            NewSkrMemberClient(cfg),
		StaffInfo:            NewStaffInfoClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:               cfg,
		AccountPlatform:      NewAccountPlatformClient(cfg),
		AccountUser:          NewAccountUserClient(cfg),
		AuthItem:             NewAuthItemClient(cfg),
		AuthMs:               NewAuthMsClient(cfg),
		AuthMsMenu:           NewAuthMsMenuClient(cfg),
		AuthRole:             NewAuthRoleClient(cfg),
		AuthRoleStaff:        NewAuthRoleStaffClient(cfg),
		ProductAttr:          NewProductAttrClient(cfg),
		ProductAttrValue:     NewProductAttrValueClient(cfg),
		ProductBrands:        NewProductBrandsClient(cfg),
		ProductCategory:      NewProductCategoryClient(cfg),
		ProductSku:           NewProductSkuClient(cfg),
		ProductSkuStock:      NewProductSkuStockClient(cfg),
		ProductSpu:           NewProductSpuClient(cfg),
		ProductSpuSkuAttrMap: NewProductSpuSkuAttrMapClient(cfg),
		SkrMember:            NewSkrMemberClient(cfg),
		StaffInfo:            NewStaffInfoClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AccountPlatform.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.AccountPlatform.Use(hooks...)
	c.AccountUser.Use(hooks...)
	c.AuthItem.Use(hooks...)
	c.AuthMs.Use(hooks...)
	c.AuthMsMenu.Use(hooks...)
	c.AuthRole.Use(hooks...)
	c.AuthRoleStaff.Use(hooks...)
	c.ProductAttr.Use(hooks...)
	c.ProductAttrValue.Use(hooks...)
	c.ProductBrands.Use(hooks...)
	c.ProductCategory.Use(hooks...)
	c.ProductSku.Use(hooks...)
	c.ProductSkuStock.Use(hooks...)
	c.ProductSpu.Use(hooks...)
	c.ProductSpuSkuAttrMap.Use(hooks...)
	c.SkrMember.Use(hooks...)
	c.StaffInfo.Use(hooks...)
}

// AccountPlatformClient is a client for the AccountPlatform schema.
type AccountPlatformClient struct {
	config
}

// NewAccountPlatformClient returns a client for the AccountPlatform from the given config.
func NewAccountPlatformClient(c config) *AccountPlatformClient {
	return &AccountPlatformClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `accountplatform.Hooks(f(g(h())))`.
func (c *AccountPlatformClient) Use(hooks ...Hook) {
	c.hooks.AccountPlatform = append(c.hooks.AccountPlatform, hooks...)
}

// Create returns a create builder for AccountPlatform.
func (c *AccountPlatformClient) Create() *AccountPlatformCreate {
	mutation := newAccountPlatformMutation(c.config, OpCreate)
	return &AccountPlatformCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AccountPlatform entities.
func (c *AccountPlatformClient) CreateBulk(builders ...*AccountPlatformCreate) *AccountPlatformCreateBulk {
	return &AccountPlatformCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AccountPlatform.
func (c *AccountPlatformClient) Update() *AccountPlatformUpdate {
	mutation := newAccountPlatformMutation(c.config, OpUpdate)
	return &AccountPlatformUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AccountPlatformClient) UpdateOne(ap *AccountPlatform) *AccountPlatformUpdateOne {
	mutation := newAccountPlatformMutation(c.config, OpUpdateOne, withAccountPlatform(ap))
	return &AccountPlatformUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AccountPlatformClient) UpdateOneID(id int) *AccountPlatformUpdateOne {
	mutation := newAccountPlatformMutation(c.config, OpUpdateOne, withAccountPlatformID(id))
	return &AccountPlatformUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AccountPlatform.
func (c *AccountPlatformClient) Delete() *AccountPlatformDelete {
	mutation := newAccountPlatformMutation(c.config, OpDelete)
	return &AccountPlatformDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AccountPlatformClient) DeleteOne(ap *AccountPlatform) *AccountPlatformDeleteOne {
	return c.DeleteOneID(ap.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AccountPlatformClient) DeleteOneID(id int) *AccountPlatformDeleteOne {
	builder := c.Delete().Where(accountplatform.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AccountPlatformDeleteOne{builder}
}

// Query returns a query builder for AccountPlatform.
func (c *AccountPlatformClient) Query() *AccountPlatformQuery {
	return &AccountPlatformQuery{config: c.config}
}

// Get returns a AccountPlatform entity by its id.
func (c *AccountPlatformClient) Get(ctx context.Context, id int) (*AccountPlatform, error) {
	return c.Query().Where(accountplatform.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AccountPlatformClient) GetX(ctx context.Context, id int) *AccountPlatform {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AccountPlatformClient) Hooks() []Hook {
	return c.hooks.AccountPlatform
}

// AccountUserClient is a client for the AccountUser schema.
type AccountUserClient struct {
	config
}

// NewAccountUserClient returns a client for the AccountUser from the given config.
func NewAccountUserClient(c config) *AccountUserClient {
	return &AccountUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `accountuser.Hooks(f(g(h())))`.
func (c *AccountUserClient) Use(hooks ...Hook) {
	c.hooks.AccountUser = append(c.hooks.AccountUser, hooks...)
}

// Create returns a create builder for AccountUser.
func (c *AccountUserClient) Create() *AccountUserCreate {
	mutation := newAccountUserMutation(c.config, OpCreate)
	return &AccountUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AccountUser entities.
func (c *AccountUserClient) CreateBulk(builders ...*AccountUserCreate) *AccountUserCreateBulk {
	return &AccountUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AccountUser.
func (c *AccountUserClient) Update() *AccountUserUpdate {
	mutation := newAccountUserMutation(c.config, OpUpdate)
	return &AccountUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AccountUserClient) UpdateOne(au *AccountUser) *AccountUserUpdateOne {
	mutation := newAccountUserMutation(c.config, OpUpdateOne, withAccountUser(au))
	return &AccountUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AccountUserClient) UpdateOneID(id int) *AccountUserUpdateOne {
	mutation := newAccountUserMutation(c.config, OpUpdateOne, withAccountUserID(id))
	return &AccountUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AccountUser.
func (c *AccountUserClient) Delete() *AccountUserDelete {
	mutation := newAccountUserMutation(c.config, OpDelete)
	return &AccountUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AccountUserClient) DeleteOne(au *AccountUser) *AccountUserDeleteOne {
	return c.DeleteOneID(au.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AccountUserClient) DeleteOneID(id int) *AccountUserDeleteOne {
	builder := c.Delete().Where(accountuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AccountUserDeleteOne{builder}
}

// Query returns a query builder for AccountUser.
func (c *AccountUserClient) Query() *AccountUserQuery {
	return &AccountUserQuery{config: c.config}
}

// Get returns a AccountUser entity by its id.
func (c *AccountUserClient) Get(ctx context.Context, id int) (*AccountUser, error) {
	return c.Query().Where(accountuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AccountUserClient) GetX(ctx context.Context, id int) *AccountUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AccountUserClient) Hooks() []Hook {
	return c.hooks.AccountUser
}

// AuthItemClient is a client for the AuthItem schema.
type AuthItemClient struct {
	config
}

// NewAuthItemClient returns a client for the AuthItem from the given config.
func NewAuthItemClient(c config) *AuthItemClient {
	return &AuthItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `authitem.Hooks(f(g(h())))`.
func (c *AuthItemClient) Use(hooks ...Hook) {
	c.hooks.AuthItem = append(c.hooks.AuthItem, hooks...)
}

// Create returns a create builder for AuthItem.
func (c *AuthItemClient) Create() *AuthItemCreate {
	mutation := newAuthItemMutation(c.config, OpCreate)
	return &AuthItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AuthItem entities.
func (c *AuthItemClient) CreateBulk(builders ...*AuthItemCreate) *AuthItemCreateBulk {
	return &AuthItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AuthItem.
func (c *AuthItemClient) Update() *AuthItemUpdate {
	mutation := newAuthItemMutation(c.config, OpUpdate)
	return &AuthItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuthItemClient) UpdateOne(ai *AuthItem) *AuthItemUpdateOne {
	mutation := newAuthItemMutation(c.config, OpUpdateOne, withAuthItem(ai))
	return &AuthItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuthItemClient) UpdateOneID(id int) *AuthItemUpdateOne {
	mutation := newAuthItemMutation(c.config, OpUpdateOne, withAuthItemID(id))
	return &AuthItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AuthItem.
func (c *AuthItemClient) Delete() *AuthItemDelete {
	mutation := newAuthItemMutation(c.config, OpDelete)
	return &AuthItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AuthItemClient) DeleteOne(ai *AuthItem) *AuthItemDeleteOne {
	return c.DeleteOneID(ai.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AuthItemClient) DeleteOneID(id int) *AuthItemDeleteOne {
	builder := c.Delete().Where(authitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuthItemDeleteOne{builder}
}

// Query returns a query builder for AuthItem.
func (c *AuthItemClient) Query() *AuthItemQuery {
	return &AuthItemQuery{config: c.config}
}

// Get returns a AuthItem entity by its id.
func (c *AuthItemClient) Get(ctx context.Context, id int) (*AuthItem, error) {
	return c.Query().Where(authitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuthItemClient) GetX(ctx context.Context, id int) *AuthItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AuthItemClient) Hooks() []Hook {
	return c.hooks.AuthItem
}

// AuthMsClient is a client for the AuthMs schema.
type AuthMsClient struct {
	config
}

// NewAuthMsClient returns a client for the AuthMs from the given config.
func NewAuthMsClient(c config) *AuthMsClient {
	return &AuthMsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `authms.Hooks(f(g(h())))`.
func (c *AuthMsClient) Use(hooks ...Hook) {
	c.hooks.AuthMs = append(c.hooks.AuthMs, hooks...)
}

// Create returns a create builder for AuthMs.
func (c *AuthMsClient) Create() *AuthMsCreate {
	mutation := newAuthMsMutation(c.config, OpCreate)
	return &AuthMsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AuthMs entities.
func (c *AuthMsClient) CreateBulk(builders ...*AuthMsCreate) *AuthMsCreateBulk {
	return &AuthMsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AuthMs.
func (c *AuthMsClient) Update() *AuthMsUpdate {
	mutation := newAuthMsMutation(c.config, OpUpdate)
	return &AuthMsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuthMsClient) UpdateOne(am *AuthMs) *AuthMsUpdateOne {
	mutation := newAuthMsMutation(c.config, OpUpdateOne, withAuthMs(am))
	return &AuthMsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuthMsClient) UpdateOneID(id int) *AuthMsUpdateOne {
	mutation := newAuthMsMutation(c.config, OpUpdateOne, withAuthMsID(id))
	return &AuthMsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AuthMs.
func (c *AuthMsClient) Delete() *AuthMsDelete {
	mutation := newAuthMsMutation(c.config, OpDelete)
	return &AuthMsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AuthMsClient) DeleteOne(am *AuthMs) *AuthMsDeleteOne {
	return c.DeleteOneID(am.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AuthMsClient) DeleteOneID(id int) *AuthMsDeleteOne {
	builder := c.Delete().Where(authms.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuthMsDeleteOne{builder}
}

// Query returns a query builder for AuthMs.
func (c *AuthMsClient) Query() *AuthMsQuery {
	return &AuthMsQuery{config: c.config}
}

// Get returns a AuthMs entity by its id.
func (c *AuthMsClient) Get(ctx context.Context, id int) (*AuthMs, error) {
	return c.Query().Where(authms.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuthMsClient) GetX(ctx context.Context, id int) *AuthMs {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AuthMsClient) Hooks() []Hook {
	return c.hooks.AuthMs
}

// AuthMsMenuClient is a client for the AuthMsMenu schema.
type AuthMsMenuClient struct {
	config
}

// NewAuthMsMenuClient returns a client for the AuthMsMenu from the given config.
func NewAuthMsMenuClient(c config) *AuthMsMenuClient {
	return &AuthMsMenuClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `authmsmenu.Hooks(f(g(h())))`.
func (c *AuthMsMenuClient) Use(hooks ...Hook) {
	c.hooks.AuthMsMenu = append(c.hooks.AuthMsMenu, hooks...)
}

// Create returns a create builder for AuthMsMenu.
func (c *AuthMsMenuClient) Create() *AuthMsMenuCreate {
	mutation := newAuthMsMenuMutation(c.config, OpCreate)
	return &AuthMsMenuCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AuthMsMenu entities.
func (c *AuthMsMenuClient) CreateBulk(builders ...*AuthMsMenuCreate) *AuthMsMenuCreateBulk {
	return &AuthMsMenuCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AuthMsMenu.
func (c *AuthMsMenuClient) Update() *AuthMsMenuUpdate {
	mutation := newAuthMsMenuMutation(c.config, OpUpdate)
	return &AuthMsMenuUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuthMsMenuClient) UpdateOne(amm *AuthMsMenu) *AuthMsMenuUpdateOne {
	mutation := newAuthMsMenuMutation(c.config, OpUpdateOne, withAuthMsMenu(amm))
	return &AuthMsMenuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuthMsMenuClient) UpdateOneID(id int) *AuthMsMenuUpdateOne {
	mutation := newAuthMsMenuMutation(c.config, OpUpdateOne, withAuthMsMenuID(id))
	return &AuthMsMenuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AuthMsMenu.
func (c *AuthMsMenuClient) Delete() *AuthMsMenuDelete {
	mutation := newAuthMsMenuMutation(c.config, OpDelete)
	return &AuthMsMenuDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AuthMsMenuClient) DeleteOne(amm *AuthMsMenu) *AuthMsMenuDeleteOne {
	return c.DeleteOneID(amm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AuthMsMenuClient) DeleteOneID(id int) *AuthMsMenuDeleteOne {
	builder := c.Delete().Where(authmsmenu.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuthMsMenuDeleteOne{builder}
}

// Query returns a query builder for AuthMsMenu.
func (c *AuthMsMenuClient) Query() *AuthMsMenuQuery {
	return &AuthMsMenuQuery{config: c.config}
}

// Get returns a AuthMsMenu entity by its id.
func (c *AuthMsMenuClient) Get(ctx context.Context, id int) (*AuthMsMenu, error) {
	return c.Query().Where(authmsmenu.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuthMsMenuClient) GetX(ctx context.Context, id int) *AuthMsMenu {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AuthMsMenuClient) Hooks() []Hook {
	return c.hooks.AuthMsMenu
}

// AuthRoleClient is a client for the AuthRole schema.
type AuthRoleClient struct {
	config
}

// NewAuthRoleClient returns a client for the AuthRole from the given config.
func NewAuthRoleClient(c config) *AuthRoleClient {
	return &AuthRoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `authrole.Hooks(f(g(h())))`.
func (c *AuthRoleClient) Use(hooks ...Hook) {
	c.hooks.AuthRole = append(c.hooks.AuthRole, hooks...)
}

// Create returns a create builder for AuthRole.
func (c *AuthRoleClient) Create() *AuthRoleCreate {
	mutation := newAuthRoleMutation(c.config, OpCreate)
	return &AuthRoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AuthRole entities.
func (c *AuthRoleClient) CreateBulk(builders ...*AuthRoleCreate) *AuthRoleCreateBulk {
	return &AuthRoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AuthRole.
func (c *AuthRoleClient) Update() *AuthRoleUpdate {
	mutation := newAuthRoleMutation(c.config, OpUpdate)
	return &AuthRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuthRoleClient) UpdateOne(ar *AuthRole) *AuthRoleUpdateOne {
	mutation := newAuthRoleMutation(c.config, OpUpdateOne, withAuthRole(ar))
	return &AuthRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuthRoleClient) UpdateOneID(id int) *AuthRoleUpdateOne {
	mutation := newAuthRoleMutation(c.config, OpUpdateOne, withAuthRoleID(id))
	return &AuthRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AuthRole.
func (c *AuthRoleClient) Delete() *AuthRoleDelete {
	mutation := newAuthRoleMutation(c.config, OpDelete)
	return &AuthRoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AuthRoleClient) DeleteOne(ar *AuthRole) *AuthRoleDeleteOne {
	return c.DeleteOneID(ar.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AuthRoleClient) DeleteOneID(id int) *AuthRoleDeleteOne {
	builder := c.Delete().Where(authrole.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuthRoleDeleteOne{builder}
}

// Query returns a query builder for AuthRole.
func (c *AuthRoleClient) Query() *AuthRoleQuery {
	return &AuthRoleQuery{config: c.config}
}

// Get returns a AuthRole entity by its id.
func (c *AuthRoleClient) Get(ctx context.Context, id int) (*AuthRole, error) {
	return c.Query().Where(authrole.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuthRoleClient) GetX(ctx context.Context, id int) *AuthRole {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AuthRoleClient) Hooks() []Hook {
	return c.hooks.AuthRole
}

// AuthRoleStaffClient is a client for the AuthRoleStaff schema.
type AuthRoleStaffClient struct {
	config
}

// NewAuthRoleStaffClient returns a client for the AuthRoleStaff from the given config.
func NewAuthRoleStaffClient(c config) *AuthRoleStaffClient {
	return &AuthRoleStaffClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `authrolestaff.Hooks(f(g(h())))`.
func (c *AuthRoleStaffClient) Use(hooks ...Hook) {
	c.hooks.AuthRoleStaff = append(c.hooks.AuthRoleStaff, hooks...)
}

// Create returns a create builder for AuthRoleStaff.
func (c *AuthRoleStaffClient) Create() *AuthRoleStaffCreate {
	mutation := newAuthRoleStaffMutation(c.config, OpCreate)
	return &AuthRoleStaffCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AuthRoleStaff entities.
func (c *AuthRoleStaffClient) CreateBulk(builders ...*AuthRoleStaffCreate) *AuthRoleStaffCreateBulk {
	return &AuthRoleStaffCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AuthRoleStaff.
func (c *AuthRoleStaffClient) Update() *AuthRoleStaffUpdate {
	mutation := newAuthRoleStaffMutation(c.config, OpUpdate)
	return &AuthRoleStaffUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuthRoleStaffClient) UpdateOne(ars *AuthRoleStaff) *AuthRoleStaffUpdateOne {
	mutation := newAuthRoleStaffMutation(c.config, OpUpdateOne, withAuthRoleStaff(ars))
	return &AuthRoleStaffUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuthRoleStaffClient) UpdateOneID(id int) *AuthRoleStaffUpdateOne {
	mutation := newAuthRoleStaffMutation(c.config, OpUpdateOne, withAuthRoleStaffID(id))
	return &AuthRoleStaffUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AuthRoleStaff.
func (c *AuthRoleStaffClient) Delete() *AuthRoleStaffDelete {
	mutation := newAuthRoleStaffMutation(c.config, OpDelete)
	return &AuthRoleStaffDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AuthRoleStaffClient) DeleteOne(ars *AuthRoleStaff) *AuthRoleStaffDeleteOne {
	return c.DeleteOneID(ars.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AuthRoleStaffClient) DeleteOneID(id int) *AuthRoleStaffDeleteOne {
	builder := c.Delete().Where(authrolestaff.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuthRoleStaffDeleteOne{builder}
}

// Query returns a query builder for AuthRoleStaff.
func (c *AuthRoleStaffClient) Query() *AuthRoleStaffQuery {
	return &AuthRoleStaffQuery{config: c.config}
}

// Get returns a AuthRoleStaff entity by its id.
func (c *AuthRoleStaffClient) Get(ctx context.Context, id int) (*AuthRoleStaff, error) {
	return c.Query().Where(authrolestaff.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuthRoleStaffClient) GetX(ctx context.Context, id int) *AuthRoleStaff {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AuthRoleStaffClient) Hooks() []Hook {
	return c.hooks.AuthRoleStaff
}

// ProductAttrClient is a client for the ProductAttr schema.
type ProductAttrClient struct {
	config
}

// NewProductAttrClient returns a client for the ProductAttr from the given config.
func NewProductAttrClient(c config) *ProductAttrClient {
	return &ProductAttrClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productattr.Hooks(f(g(h())))`.
func (c *ProductAttrClient) Use(hooks ...Hook) {
	c.hooks.ProductAttr = append(c.hooks.ProductAttr, hooks...)
}

// Create returns a create builder for ProductAttr.
func (c *ProductAttrClient) Create() *ProductAttrCreate {
	mutation := newProductAttrMutation(c.config, OpCreate)
	return &ProductAttrCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductAttr entities.
func (c *ProductAttrClient) CreateBulk(builders ...*ProductAttrCreate) *ProductAttrCreateBulk {
	return &ProductAttrCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductAttr.
func (c *ProductAttrClient) Update() *ProductAttrUpdate {
	mutation := newProductAttrMutation(c.config, OpUpdate)
	return &ProductAttrUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductAttrClient) UpdateOne(pa *ProductAttr) *ProductAttrUpdateOne {
	mutation := newProductAttrMutation(c.config, OpUpdateOne, withProductAttr(pa))
	return &ProductAttrUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductAttrClient) UpdateOneID(id int) *ProductAttrUpdateOne {
	mutation := newProductAttrMutation(c.config, OpUpdateOne, withProductAttrID(id))
	return &ProductAttrUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductAttr.
func (c *ProductAttrClient) Delete() *ProductAttrDelete {
	mutation := newProductAttrMutation(c.config, OpDelete)
	return &ProductAttrDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductAttrClient) DeleteOne(pa *ProductAttr) *ProductAttrDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductAttrClient) DeleteOneID(id int) *ProductAttrDeleteOne {
	builder := c.Delete().Where(productattr.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductAttrDeleteOne{builder}
}

// Query returns a query builder for ProductAttr.
func (c *ProductAttrClient) Query() *ProductAttrQuery {
	return &ProductAttrQuery{config: c.config}
}

// Get returns a ProductAttr entity by its id.
func (c *ProductAttrClient) Get(ctx context.Context, id int) (*ProductAttr, error) {
	return c.Query().Where(productattr.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductAttrClient) GetX(ctx context.Context, id int) *ProductAttr {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProductAttrClient) Hooks() []Hook {
	return c.hooks.ProductAttr
}

// ProductAttrValueClient is a client for the ProductAttrValue schema.
type ProductAttrValueClient struct {
	config
}

// NewProductAttrValueClient returns a client for the ProductAttrValue from the given config.
func NewProductAttrValueClient(c config) *ProductAttrValueClient {
	return &ProductAttrValueClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productattrvalue.Hooks(f(g(h())))`.
func (c *ProductAttrValueClient) Use(hooks ...Hook) {
	c.hooks.ProductAttrValue = append(c.hooks.ProductAttrValue, hooks...)
}

// Create returns a create builder for ProductAttrValue.
func (c *ProductAttrValueClient) Create() *ProductAttrValueCreate {
	mutation := newProductAttrValueMutation(c.config, OpCreate)
	return &ProductAttrValueCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductAttrValue entities.
func (c *ProductAttrValueClient) CreateBulk(builders ...*ProductAttrValueCreate) *ProductAttrValueCreateBulk {
	return &ProductAttrValueCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductAttrValue.
func (c *ProductAttrValueClient) Update() *ProductAttrValueUpdate {
	mutation := newProductAttrValueMutation(c.config, OpUpdate)
	return &ProductAttrValueUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductAttrValueClient) UpdateOne(pav *ProductAttrValue) *ProductAttrValueUpdateOne {
	mutation := newProductAttrValueMutation(c.config, OpUpdateOne, withProductAttrValue(pav))
	return &ProductAttrValueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductAttrValueClient) UpdateOneID(id int) *ProductAttrValueUpdateOne {
	mutation := newProductAttrValueMutation(c.config, OpUpdateOne, withProductAttrValueID(id))
	return &ProductAttrValueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductAttrValue.
func (c *ProductAttrValueClient) Delete() *ProductAttrValueDelete {
	mutation := newProductAttrValueMutation(c.config, OpDelete)
	return &ProductAttrValueDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductAttrValueClient) DeleteOne(pav *ProductAttrValue) *ProductAttrValueDeleteOne {
	return c.DeleteOneID(pav.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductAttrValueClient) DeleteOneID(id int) *ProductAttrValueDeleteOne {
	builder := c.Delete().Where(productattrvalue.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductAttrValueDeleteOne{builder}
}

// Query returns a query builder for ProductAttrValue.
func (c *ProductAttrValueClient) Query() *ProductAttrValueQuery {
	return &ProductAttrValueQuery{config: c.config}
}

// Get returns a ProductAttrValue entity by its id.
func (c *ProductAttrValueClient) Get(ctx context.Context, id int) (*ProductAttrValue, error) {
	return c.Query().Where(productattrvalue.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductAttrValueClient) GetX(ctx context.Context, id int) *ProductAttrValue {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProductAttrValueClient) Hooks() []Hook {
	return c.hooks.ProductAttrValue
}

// ProductBrandsClient is a client for the ProductBrands schema.
type ProductBrandsClient struct {
	config
}

// NewProductBrandsClient returns a client for the ProductBrands from the given config.
func NewProductBrandsClient(c config) *ProductBrandsClient {
	return &ProductBrandsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productbrands.Hooks(f(g(h())))`.
func (c *ProductBrandsClient) Use(hooks ...Hook) {
	c.hooks.ProductBrands = append(c.hooks.ProductBrands, hooks...)
}

// Create returns a create builder for ProductBrands.
func (c *ProductBrandsClient) Create() *ProductBrandsCreate {
	mutation := newProductBrandsMutation(c.config, OpCreate)
	return &ProductBrandsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductBrands entities.
func (c *ProductBrandsClient) CreateBulk(builders ...*ProductBrandsCreate) *ProductBrandsCreateBulk {
	return &ProductBrandsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductBrands.
func (c *ProductBrandsClient) Update() *ProductBrandsUpdate {
	mutation := newProductBrandsMutation(c.config, OpUpdate)
	return &ProductBrandsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductBrandsClient) UpdateOne(pb *ProductBrands) *ProductBrandsUpdateOne {
	mutation := newProductBrandsMutation(c.config, OpUpdateOne, withProductBrands(pb))
	return &ProductBrandsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductBrandsClient) UpdateOneID(id int) *ProductBrandsUpdateOne {
	mutation := newProductBrandsMutation(c.config, OpUpdateOne, withProductBrandsID(id))
	return &ProductBrandsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductBrands.
func (c *ProductBrandsClient) Delete() *ProductBrandsDelete {
	mutation := newProductBrandsMutation(c.config, OpDelete)
	return &ProductBrandsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductBrandsClient) DeleteOne(pb *ProductBrands) *ProductBrandsDeleteOne {
	return c.DeleteOneID(pb.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductBrandsClient) DeleteOneID(id int) *ProductBrandsDeleteOne {
	builder := c.Delete().Where(productbrands.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductBrandsDeleteOne{builder}
}

// Query returns a query builder for ProductBrands.
func (c *ProductBrandsClient) Query() *ProductBrandsQuery {
	return &ProductBrandsQuery{config: c.config}
}

// Get returns a ProductBrands entity by its id.
func (c *ProductBrandsClient) Get(ctx context.Context, id int) (*ProductBrands, error) {
	return c.Query().Where(productbrands.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductBrandsClient) GetX(ctx context.Context, id int) *ProductBrands {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProductBrandsClient) Hooks() []Hook {
	return c.hooks.ProductBrands
}

// ProductCategoryClient is a client for the ProductCategory schema.
type ProductCategoryClient struct {
	config
}

// NewProductCategoryClient returns a client for the ProductCategory from the given config.
func NewProductCategoryClient(c config) *ProductCategoryClient {
	return &ProductCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productcategory.Hooks(f(g(h())))`.
func (c *ProductCategoryClient) Use(hooks ...Hook) {
	c.hooks.ProductCategory = append(c.hooks.ProductCategory, hooks...)
}

// Create returns a create builder for ProductCategory.
func (c *ProductCategoryClient) Create() *ProductCategoryCreate {
	mutation := newProductCategoryMutation(c.config, OpCreate)
	return &ProductCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductCategory entities.
func (c *ProductCategoryClient) CreateBulk(builders ...*ProductCategoryCreate) *ProductCategoryCreateBulk {
	return &ProductCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductCategory.
func (c *ProductCategoryClient) Update() *ProductCategoryUpdate {
	mutation := newProductCategoryMutation(c.config, OpUpdate)
	return &ProductCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductCategoryClient) UpdateOne(pc *ProductCategory) *ProductCategoryUpdateOne {
	mutation := newProductCategoryMutation(c.config, OpUpdateOne, withProductCategory(pc))
	return &ProductCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductCategoryClient) UpdateOneID(id int) *ProductCategoryUpdateOne {
	mutation := newProductCategoryMutation(c.config, OpUpdateOne, withProductCategoryID(id))
	return &ProductCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductCategory.
func (c *ProductCategoryClient) Delete() *ProductCategoryDelete {
	mutation := newProductCategoryMutation(c.config, OpDelete)
	return &ProductCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductCategoryClient) DeleteOne(pc *ProductCategory) *ProductCategoryDeleteOne {
	return c.DeleteOneID(pc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductCategoryClient) DeleteOneID(id int) *ProductCategoryDeleteOne {
	builder := c.Delete().Where(productcategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductCategoryDeleteOne{builder}
}

// Query returns a query builder for ProductCategory.
func (c *ProductCategoryClient) Query() *ProductCategoryQuery {
	return &ProductCategoryQuery{config: c.config}
}

// Get returns a ProductCategory entity by its id.
func (c *ProductCategoryClient) Get(ctx context.Context, id int) (*ProductCategory, error) {
	return c.Query().Where(productcategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductCategoryClient) GetX(ctx context.Context, id int) *ProductCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProductCategoryClient) Hooks() []Hook {
	return c.hooks.ProductCategory
}

// ProductSkuClient is a client for the ProductSku schema.
type ProductSkuClient struct {
	config
}

// NewProductSkuClient returns a client for the ProductSku from the given config.
func NewProductSkuClient(c config) *ProductSkuClient {
	return &ProductSkuClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productsku.Hooks(f(g(h())))`.
func (c *ProductSkuClient) Use(hooks ...Hook) {
	c.hooks.ProductSku = append(c.hooks.ProductSku, hooks...)
}

// Create returns a create builder for ProductSku.
func (c *ProductSkuClient) Create() *ProductSkuCreate {
	mutation := newProductSkuMutation(c.config, OpCreate)
	return &ProductSkuCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductSku entities.
func (c *ProductSkuClient) CreateBulk(builders ...*ProductSkuCreate) *ProductSkuCreateBulk {
	return &ProductSkuCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductSku.
func (c *ProductSkuClient) Update() *ProductSkuUpdate {
	mutation := newProductSkuMutation(c.config, OpUpdate)
	return &ProductSkuUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductSkuClient) UpdateOne(ps *ProductSku) *ProductSkuUpdateOne {
	mutation := newProductSkuMutation(c.config, OpUpdateOne, withProductSku(ps))
	return &ProductSkuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductSkuClient) UpdateOneID(id int) *ProductSkuUpdateOne {
	mutation := newProductSkuMutation(c.config, OpUpdateOne, withProductSkuID(id))
	return &ProductSkuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductSku.
func (c *ProductSkuClient) Delete() *ProductSkuDelete {
	mutation := newProductSkuMutation(c.config, OpDelete)
	return &ProductSkuDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductSkuClient) DeleteOne(ps *ProductSku) *ProductSkuDeleteOne {
	return c.DeleteOneID(ps.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductSkuClient) DeleteOneID(id int) *ProductSkuDeleteOne {
	builder := c.Delete().Where(productsku.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductSkuDeleteOne{builder}
}

// Query returns a query builder for ProductSku.
func (c *ProductSkuClient) Query() *ProductSkuQuery {
	return &ProductSkuQuery{config: c.config}
}

// Get returns a ProductSku entity by its id.
func (c *ProductSkuClient) Get(ctx context.Context, id int) (*ProductSku, error) {
	return c.Query().Where(productsku.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductSkuClient) GetX(ctx context.Context, id int) *ProductSku {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProductSkuClient) Hooks() []Hook {
	return c.hooks.ProductSku
}

// ProductSkuStockClient is a client for the ProductSkuStock schema.
type ProductSkuStockClient struct {
	config
}

// NewProductSkuStockClient returns a client for the ProductSkuStock from the given config.
func NewProductSkuStockClient(c config) *ProductSkuStockClient {
	return &ProductSkuStockClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productskustock.Hooks(f(g(h())))`.
func (c *ProductSkuStockClient) Use(hooks ...Hook) {
	c.hooks.ProductSkuStock = append(c.hooks.ProductSkuStock, hooks...)
}

// Create returns a create builder for ProductSkuStock.
func (c *ProductSkuStockClient) Create() *ProductSkuStockCreate {
	mutation := newProductSkuStockMutation(c.config, OpCreate)
	return &ProductSkuStockCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductSkuStock entities.
func (c *ProductSkuStockClient) CreateBulk(builders ...*ProductSkuStockCreate) *ProductSkuStockCreateBulk {
	return &ProductSkuStockCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductSkuStock.
func (c *ProductSkuStockClient) Update() *ProductSkuStockUpdate {
	mutation := newProductSkuStockMutation(c.config, OpUpdate)
	return &ProductSkuStockUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductSkuStockClient) UpdateOne(pss *ProductSkuStock) *ProductSkuStockUpdateOne {
	mutation := newProductSkuStockMutation(c.config, OpUpdateOne, withProductSkuStock(pss))
	return &ProductSkuStockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductSkuStockClient) UpdateOneID(id int) *ProductSkuStockUpdateOne {
	mutation := newProductSkuStockMutation(c.config, OpUpdateOne, withProductSkuStockID(id))
	return &ProductSkuStockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductSkuStock.
func (c *ProductSkuStockClient) Delete() *ProductSkuStockDelete {
	mutation := newProductSkuStockMutation(c.config, OpDelete)
	return &ProductSkuStockDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductSkuStockClient) DeleteOne(pss *ProductSkuStock) *ProductSkuStockDeleteOne {
	return c.DeleteOneID(pss.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductSkuStockClient) DeleteOneID(id int) *ProductSkuStockDeleteOne {
	builder := c.Delete().Where(productskustock.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductSkuStockDeleteOne{builder}
}

// Query returns a query builder for ProductSkuStock.
func (c *ProductSkuStockClient) Query() *ProductSkuStockQuery {
	return &ProductSkuStockQuery{config: c.config}
}

// Get returns a ProductSkuStock entity by its id.
func (c *ProductSkuStockClient) Get(ctx context.Context, id int) (*ProductSkuStock, error) {
	return c.Query().Where(productskustock.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductSkuStockClient) GetX(ctx context.Context, id int) *ProductSkuStock {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProductSkuStockClient) Hooks() []Hook {
	return c.hooks.ProductSkuStock
}

// ProductSpuClient is a client for the ProductSpu schema.
type ProductSpuClient struct {
	config
}

// NewProductSpuClient returns a client for the ProductSpu from the given config.
func NewProductSpuClient(c config) *ProductSpuClient {
	return &ProductSpuClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productspu.Hooks(f(g(h())))`.
func (c *ProductSpuClient) Use(hooks ...Hook) {
	c.hooks.ProductSpu = append(c.hooks.ProductSpu, hooks...)
}

// Create returns a create builder for ProductSpu.
func (c *ProductSpuClient) Create() *ProductSpuCreate {
	mutation := newProductSpuMutation(c.config, OpCreate)
	return &ProductSpuCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductSpu entities.
func (c *ProductSpuClient) CreateBulk(builders ...*ProductSpuCreate) *ProductSpuCreateBulk {
	return &ProductSpuCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductSpu.
func (c *ProductSpuClient) Update() *ProductSpuUpdate {
	mutation := newProductSpuMutation(c.config, OpUpdate)
	return &ProductSpuUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductSpuClient) UpdateOne(ps *ProductSpu) *ProductSpuUpdateOne {
	mutation := newProductSpuMutation(c.config, OpUpdateOne, withProductSpu(ps))
	return &ProductSpuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductSpuClient) UpdateOneID(id int) *ProductSpuUpdateOne {
	mutation := newProductSpuMutation(c.config, OpUpdateOne, withProductSpuID(id))
	return &ProductSpuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductSpu.
func (c *ProductSpuClient) Delete() *ProductSpuDelete {
	mutation := newProductSpuMutation(c.config, OpDelete)
	return &ProductSpuDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductSpuClient) DeleteOne(ps *ProductSpu) *ProductSpuDeleteOne {
	return c.DeleteOneID(ps.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductSpuClient) DeleteOneID(id int) *ProductSpuDeleteOne {
	builder := c.Delete().Where(productspu.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductSpuDeleteOne{builder}
}

// Query returns a query builder for ProductSpu.
func (c *ProductSpuClient) Query() *ProductSpuQuery {
	return &ProductSpuQuery{config: c.config}
}

// Get returns a ProductSpu entity by its id.
func (c *ProductSpuClient) Get(ctx context.Context, id int) (*ProductSpu, error) {
	return c.Query().Where(productspu.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductSpuClient) GetX(ctx context.Context, id int) *ProductSpu {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProductSpuClient) Hooks() []Hook {
	return c.hooks.ProductSpu
}

// ProductSpuSkuAttrMapClient is a client for the ProductSpuSkuAttrMap schema.
type ProductSpuSkuAttrMapClient struct {
	config
}

// NewProductSpuSkuAttrMapClient returns a client for the ProductSpuSkuAttrMap from the given config.
func NewProductSpuSkuAttrMapClient(c config) *ProductSpuSkuAttrMapClient {
	return &ProductSpuSkuAttrMapClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productspuskuattrmap.Hooks(f(g(h())))`.
func (c *ProductSpuSkuAttrMapClient) Use(hooks ...Hook) {
	c.hooks.ProductSpuSkuAttrMap = append(c.hooks.ProductSpuSkuAttrMap, hooks...)
}

// Create returns a create builder for ProductSpuSkuAttrMap.
func (c *ProductSpuSkuAttrMapClient) Create() *ProductSpuSkuAttrMapCreate {
	mutation := newProductSpuSkuAttrMapMutation(c.config, OpCreate)
	return &ProductSpuSkuAttrMapCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductSpuSkuAttrMap entities.
func (c *ProductSpuSkuAttrMapClient) CreateBulk(builders ...*ProductSpuSkuAttrMapCreate) *ProductSpuSkuAttrMapCreateBulk {
	return &ProductSpuSkuAttrMapCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductSpuSkuAttrMap.
func (c *ProductSpuSkuAttrMapClient) Update() *ProductSpuSkuAttrMapUpdate {
	mutation := newProductSpuSkuAttrMapMutation(c.config, OpUpdate)
	return &ProductSpuSkuAttrMapUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductSpuSkuAttrMapClient) UpdateOne(pssam *ProductSpuSkuAttrMap) *ProductSpuSkuAttrMapUpdateOne {
	mutation := newProductSpuSkuAttrMapMutation(c.config, OpUpdateOne, withProductSpuSkuAttrMap(pssam))
	return &ProductSpuSkuAttrMapUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductSpuSkuAttrMapClient) UpdateOneID(id int) *ProductSpuSkuAttrMapUpdateOne {
	mutation := newProductSpuSkuAttrMapMutation(c.config, OpUpdateOne, withProductSpuSkuAttrMapID(id))
	return &ProductSpuSkuAttrMapUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductSpuSkuAttrMap.
func (c *ProductSpuSkuAttrMapClient) Delete() *ProductSpuSkuAttrMapDelete {
	mutation := newProductSpuSkuAttrMapMutation(c.config, OpDelete)
	return &ProductSpuSkuAttrMapDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductSpuSkuAttrMapClient) DeleteOne(pssam *ProductSpuSkuAttrMap) *ProductSpuSkuAttrMapDeleteOne {
	return c.DeleteOneID(pssam.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductSpuSkuAttrMapClient) DeleteOneID(id int) *ProductSpuSkuAttrMapDeleteOne {
	builder := c.Delete().Where(productspuskuattrmap.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductSpuSkuAttrMapDeleteOne{builder}
}

// Query returns a query builder for ProductSpuSkuAttrMap.
func (c *ProductSpuSkuAttrMapClient) Query() *ProductSpuSkuAttrMapQuery {
	return &ProductSpuSkuAttrMapQuery{config: c.config}
}

// Get returns a ProductSpuSkuAttrMap entity by its id.
func (c *ProductSpuSkuAttrMapClient) Get(ctx context.Context, id int) (*ProductSpuSkuAttrMap, error) {
	return c.Query().Where(productspuskuattrmap.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductSpuSkuAttrMapClient) GetX(ctx context.Context, id int) *ProductSpuSkuAttrMap {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProductSpuSkuAttrMapClient) Hooks() []Hook {
	return c.hooks.ProductSpuSkuAttrMap
}

// SkrMemberClient is a client for the SkrMember schema.
type SkrMemberClient struct {
	config
}

// NewSkrMemberClient returns a client for the SkrMember from the given config.
func NewSkrMemberClient(c config) *SkrMemberClient {
	return &SkrMemberClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `skrmember.Hooks(f(g(h())))`.
func (c *SkrMemberClient) Use(hooks ...Hook) {
	c.hooks.SkrMember = append(c.hooks.SkrMember, hooks...)
}

// Create returns a create builder for SkrMember.
func (c *SkrMemberClient) Create() *SkrMemberCreate {
	mutation := newSkrMemberMutation(c.config, OpCreate)
	return &SkrMemberCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SkrMember entities.
func (c *SkrMemberClient) CreateBulk(builders ...*SkrMemberCreate) *SkrMemberCreateBulk {
	return &SkrMemberCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SkrMember.
func (c *SkrMemberClient) Update() *SkrMemberUpdate {
	mutation := newSkrMemberMutation(c.config, OpUpdate)
	return &SkrMemberUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SkrMemberClient) UpdateOne(sm *SkrMember) *SkrMemberUpdateOne {
	mutation := newSkrMemberMutation(c.config, OpUpdateOne, withSkrMember(sm))
	return &SkrMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SkrMemberClient) UpdateOneID(id int) *SkrMemberUpdateOne {
	mutation := newSkrMemberMutation(c.config, OpUpdateOne, withSkrMemberID(id))
	return &SkrMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SkrMember.
func (c *SkrMemberClient) Delete() *SkrMemberDelete {
	mutation := newSkrMemberMutation(c.config, OpDelete)
	return &SkrMemberDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SkrMemberClient) DeleteOne(sm *SkrMember) *SkrMemberDeleteOne {
	return c.DeleteOneID(sm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SkrMemberClient) DeleteOneID(id int) *SkrMemberDeleteOne {
	builder := c.Delete().Where(skrmember.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SkrMemberDeleteOne{builder}
}

// Query returns a query builder for SkrMember.
func (c *SkrMemberClient) Query() *SkrMemberQuery {
	return &SkrMemberQuery{config: c.config}
}

// Get returns a SkrMember entity by its id.
func (c *SkrMemberClient) Get(ctx context.Context, id int) (*SkrMember, error) {
	return c.Query().Where(skrmember.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SkrMemberClient) GetX(ctx context.Context, id int) *SkrMember {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SkrMemberClient) Hooks() []Hook {
	return c.hooks.SkrMember
}

// StaffInfoClient is a client for the StaffInfo schema.
type StaffInfoClient struct {
	config
}

// NewStaffInfoClient returns a client for the StaffInfo from the given config.
func NewStaffInfoClient(c config) *StaffInfoClient {
	return &StaffInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `staffinfo.Hooks(f(g(h())))`.
func (c *StaffInfoClient) Use(hooks ...Hook) {
	c.hooks.StaffInfo = append(c.hooks.StaffInfo, hooks...)
}

// Create returns a create builder for StaffInfo.
func (c *StaffInfoClient) Create() *StaffInfoCreate {
	mutation := newStaffInfoMutation(c.config, OpCreate)
	return &StaffInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StaffInfo entities.
func (c *StaffInfoClient) CreateBulk(builders ...*StaffInfoCreate) *StaffInfoCreateBulk {
	return &StaffInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StaffInfo.
func (c *StaffInfoClient) Update() *StaffInfoUpdate {
	mutation := newStaffInfoMutation(c.config, OpUpdate)
	return &StaffInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StaffInfoClient) UpdateOne(si *StaffInfo) *StaffInfoUpdateOne {
	mutation := newStaffInfoMutation(c.config, OpUpdateOne, withStaffInfo(si))
	return &StaffInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StaffInfoClient) UpdateOneID(id int) *StaffInfoUpdateOne {
	mutation := newStaffInfoMutation(c.config, OpUpdateOne, withStaffInfoID(id))
	return &StaffInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StaffInfo.
func (c *StaffInfoClient) Delete() *StaffInfoDelete {
	mutation := newStaffInfoMutation(c.config, OpDelete)
	return &StaffInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StaffInfoClient) DeleteOne(si *StaffInfo) *StaffInfoDeleteOne {
	return c.DeleteOneID(si.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StaffInfoClient) DeleteOneID(id int) *StaffInfoDeleteOne {
	builder := c.Delete().Where(staffinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StaffInfoDeleteOne{builder}
}

// Query returns a query builder for StaffInfo.
func (c *StaffInfoClient) Query() *StaffInfoQuery {
	return &StaffInfoQuery{config: c.config}
}

// Get returns a StaffInfo entity by its id.
func (c *StaffInfoClient) Get(ctx context.Context, id int) (*StaffInfo, error) {
	return c.Query().Where(staffinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StaffInfoClient) GetX(ctx context.Context, id int) *StaffInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *StaffInfoClient) Hooks() []Hook {
	return c.hooks.StaffInfo
}
