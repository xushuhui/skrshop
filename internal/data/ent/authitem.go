// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"skrshop/internal/data/ent/authitem"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// AuthItem is the model entity for the AuthItem schema.
type AuthItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 状态 1:enable, 0:disable, -1:deleted
	Status int8 `json:"status,omitempty"`
	// 创建时间
	CreateAt time.Time `json:"create_at,omitempty"`
	// 更新时间
	UpdateAt time.Time `json:"update_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuthItem) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case authitem.FieldID, authitem.FieldStatus:
			values[i] = &sql.NullInt64{}
		case authitem.FieldCreateAt, authitem.FieldUpdateAt:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type AuthItem", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuthItem fields.
func (ai *AuthItem) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ai.ID = int(value.Int64)
		case authitem.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ai.Status = int8(value.Int64)
			}
		case authitem.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				ai.CreateAt = value.Time
			}
		case authitem.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				ai.UpdateAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AuthItem.
// Note that you need to call AuthItem.Unwrap() before calling this method if this AuthItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (ai *AuthItem) Update() *AuthItemUpdateOne {
	return (&AuthItemClient{config: ai.config}).UpdateOne(ai)
}

// Unwrap unwraps the AuthItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ai *AuthItem) Unwrap() *AuthItem {
	tx, ok := ai.config.driver.(*txDriver)
	if !ok {
		panic("ent: AuthItem is not a transactional entity")
	}
	ai.config.driver = tx.drv
	return ai
}

// String implements the fmt.Stringer.
func (ai *AuthItem) String() string {
	var builder strings.Builder
	builder.WriteString("AuthItem(")
	builder.WriteString(fmt.Sprintf("id=%v", ai.ID))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", ai.Status))
	builder.WriteString(", create_at=")
	builder.WriteString(ai.CreateAt.Format(time.ANSIC))
	builder.WriteString(", update_at=")
	builder.WriteString(ai.UpdateAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AuthItems is a parsable slice of AuthItem.
type AuthItems []*AuthItem

func (ai AuthItems) config(cfg config) {
	for _i := range ai {
		ai[_i].config = cfg
	}
}
