// Code generated by entc, DO NOT EDIT.

package accountplatform

import (
	"skrshop/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UID applies equality check predicate on the "uid" field. It's identical to UIDEQ.
func UID(v int64) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUID), v))
	})
}

// PlatformID applies equality check predicate on the "platform_id" field. It's identical to PlatformIDEQ.
func PlatformID(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformID), v))
	})
}

// PlatformToken applies equality check predicate on the "platform_token" field. It's identical to PlatformTokenEQ.
func PlatformToken(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformToken), v))
	})
}

// Nickname applies equality check predicate on the "nickname" field. It's identical to NicknameEQ.
func Nickname(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNickname), v))
	})
}

// Avatar applies equality check predicate on the "avatar" field. It's identical to AvatarEQ.
func Avatar(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvatar), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int8) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v time.Time) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v time.Time) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// UIDEQ applies the EQ predicate on the "uid" field.
func UIDEQ(v int64) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUID), v))
	})
}

// UIDNEQ applies the NEQ predicate on the "uid" field.
func UIDNEQ(v int64) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUID), v))
	})
}

// UIDIn applies the In predicate on the "uid" field.
func UIDIn(vs ...int64) predicate.AccountPlatform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountPlatform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUID), v...))
	})
}

// UIDNotIn applies the NotIn predicate on the "uid" field.
func UIDNotIn(vs ...int64) predicate.AccountPlatform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountPlatform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUID), v...))
	})
}

// UIDGT applies the GT predicate on the "uid" field.
func UIDGT(v int64) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUID), v))
	})
}

// UIDGTE applies the GTE predicate on the "uid" field.
func UIDGTE(v int64) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUID), v))
	})
}

// UIDLT applies the LT predicate on the "uid" field.
func UIDLT(v int64) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUID), v))
	})
}

// UIDLTE applies the LTE predicate on the "uid" field.
func UIDLTE(v int64) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUID), v))
	})
}

// PlatformIDEQ applies the EQ predicate on the "platform_id" field.
func PlatformIDEQ(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformID), v))
	})
}

// PlatformIDNEQ applies the NEQ predicate on the "platform_id" field.
func PlatformIDNEQ(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlatformID), v))
	})
}

// PlatformIDIn applies the In predicate on the "platform_id" field.
func PlatformIDIn(vs ...string) predicate.AccountPlatform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountPlatform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPlatformID), v...))
	})
}

// PlatformIDNotIn applies the NotIn predicate on the "platform_id" field.
func PlatformIDNotIn(vs ...string) predicate.AccountPlatform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountPlatform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPlatformID), v...))
	})
}

// PlatformIDGT applies the GT predicate on the "platform_id" field.
func PlatformIDGT(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlatformID), v))
	})
}

// PlatformIDGTE applies the GTE predicate on the "platform_id" field.
func PlatformIDGTE(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlatformID), v))
	})
}

// PlatformIDLT applies the LT predicate on the "platform_id" field.
func PlatformIDLT(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlatformID), v))
	})
}

// PlatformIDLTE applies the LTE predicate on the "platform_id" field.
func PlatformIDLTE(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlatformID), v))
	})
}

// PlatformIDContains applies the Contains predicate on the "platform_id" field.
func PlatformIDContains(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPlatformID), v))
	})
}

// PlatformIDHasPrefix applies the HasPrefix predicate on the "platform_id" field.
func PlatformIDHasPrefix(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPlatformID), v))
	})
}

// PlatformIDHasSuffix applies the HasSuffix predicate on the "platform_id" field.
func PlatformIDHasSuffix(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPlatformID), v))
	})
}

// PlatformIDEqualFold applies the EqualFold predicate on the "platform_id" field.
func PlatformIDEqualFold(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPlatformID), v))
	})
}

// PlatformIDContainsFold applies the ContainsFold predicate on the "platform_id" field.
func PlatformIDContainsFold(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPlatformID), v))
	})
}

// PlatformTokenEQ applies the EQ predicate on the "platform_token" field.
func PlatformTokenEQ(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformToken), v))
	})
}

// PlatformTokenNEQ applies the NEQ predicate on the "platform_token" field.
func PlatformTokenNEQ(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlatformToken), v))
	})
}

// PlatformTokenIn applies the In predicate on the "platform_token" field.
func PlatformTokenIn(vs ...string) predicate.AccountPlatform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountPlatform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPlatformToken), v...))
	})
}

// PlatformTokenNotIn applies the NotIn predicate on the "platform_token" field.
func PlatformTokenNotIn(vs ...string) predicate.AccountPlatform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountPlatform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPlatformToken), v...))
	})
}

// PlatformTokenGT applies the GT predicate on the "platform_token" field.
func PlatformTokenGT(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlatformToken), v))
	})
}

// PlatformTokenGTE applies the GTE predicate on the "platform_token" field.
func PlatformTokenGTE(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlatformToken), v))
	})
}

// PlatformTokenLT applies the LT predicate on the "platform_token" field.
func PlatformTokenLT(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlatformToken), v))
	})
}

// PlatformTokenLTE applies the LTE predicate on the "platform_token" field.
func PlatformTokenLTE(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlatformToken), v))
	})
}

// PlatformTokenContains applies the Contains predicate on the "platform_token" field.
func PlatformTokenContains(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPlatformToken), v))
	})
}

// PlatformTokenHasPrefix applies the HasPrefix predicate on the "platform_token" field.
func PlatformTokenHasPrefix(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPlatformToken), v))
	})
}

// PlatformTokenHasSuffix applies the HasSuffix predicate on the "platform_token" field.
func PlatformTokenHasSuffix(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPlatformToken), v))
	})
}

// PlatformTokenEqualFold applies the EqualFold predicate on the "platform_token" field.
func PlatformTokenEqualFold(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPlatformToken), v))
	})
}

// PlatformTokenContainsFold applies the ContainsFold predicate on the "platform_token" field.
func PlatformTokenContainsFold(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPlatformToken), v))
	})
}

// NicknameEQ applies the EQ predicate on the "nickname" field.
func NicknameEQ(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNickname), v))
	})
}

// NicknameNEQ applies the NEQ predicate on the "nickname" field.
func NicknameNEQ(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNickname), v))
	})
}

// NicknameIn applies the In predicate on the "nickname" field.
func NicknameIn(vs ...string) predicate.AccountPlatform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountPlatform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNickname), v...))
	})
}

// NicknameNotIn applies the NotIn predicate on the "nickname" field.
func NicknameNotIn(vs ...string) predicate.AccountPlatform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountPlatform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNickname), v...))
	})
}

// NicknameGT applies the GT predicate on the "nickname" field.
func NicknameGT(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNickname), v))
	})
}

// NicknameGTE applies the GTE predicate on the "nickname" field.
func NicknameGTE(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNickname), v))
	})
}

// NicknameLT applies the LT predicate on the "nickname" field.
func NicknameLT(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNickname), v))
	})
}

// NicknameLTE applies the LTE predicate on the "nickname" field.
func NicknameLTE(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNickname), v))
	})
}

// NicknameContains applies the Contains predicate on the "nickname" field.
func NicknameContains(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNickname), v))
	})
}

// NicknameHasPrefix applies the HasPrefix predicate on the "nickname" field.
func NicknameHasPrefix(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNickname), v))
	})
}

// NicknameHasSuffix applies the HasSuffix predicate on the "nickname" field.
func NicknameHasSuffix(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNickname), v))
	})
}

// NicknameEqualFold applies the EqualFold predicate on the "nickname" field.
func NicknameEqualFold(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNickname), v))
	})
}

// NicknameContainsFold applies the ContainsFold predicate on the "nickname" field.
func NicknameContainsFold(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNickname), v))
	})
}

// AvatarEQ applies the EQ predicate on the "avatar" field.
func AvatarEQ(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvatar), v))
	})
}

// AvatarNEQ applies the NEQ predicate on the "avatar" field.
func AvatarNEQ(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAvatar), v))
	})
}

// AvatarIn applies the In predicate on the "avatar" field.
func AvatarIn(vs ...string) predicate.AccountPlatform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountPlatform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAvatar), v...))
	})
}

// AvatarNotIn applies the NotIn predicate on the "avatar" field.
func AvatarNotIn(vs ...string) predicate.AccountPlatform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountPlatform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAvatar), v...))
	})
}

// AvatarGT applies the GT predicate on the "avatar" field.
func AvatarGT(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAvatar), v))
	})
}

// AvatarGTE applies the GTE predicate on the "avatar" field.
func AvatarGTE(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAvatar), v))
	})
}

// AvatarLT applies the LT predicate on the "avatar" field.
func AvatarLT(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAvatar), v))
	})
}

// AvatarLTE applies the LTE predicate on the "avatar" field.
func AvatarLTE(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAvatar), v))
	})
}

// AvatarContains applies the Contains predicate on the "avatar" field.
func AvatarContains(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAvatar), v))
	})
}

// AvatarHasPrefix applies the HasPrefix predicate on the "avatar" field.
func AvatarHasPrefix(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAvatar), v))
	})
}

// AvatarHasSuffix applies the HasSuffix predicate on the "avatar" field.
func AvatarHasSuffix(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAvatar), v))
	})
}

// AvatarEqualFold applies the EqualFold predicate on the "avatar" field.
func AvatarEqualFold(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAvatar), v))
	})
}

// AvatarContainsFold applies the ContainsFold predicate on the "avatar" field.
func AvatarContainsFold(v string) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAvatar), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int8) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int8) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int8) predicate.AccountPlatform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountPlatform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int8) predicate.AccountPlatform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountPlatform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int8) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int8) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int8) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int8) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v time.Time) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v time.Time) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...time.Time) predicate.AccountPlatform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountPlatform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateAt), v...))
	})
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...time.Time) predicate.AccountPlatform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountPlatform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateAt), v...))
	})
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v time.Time) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateAt), v))
	})
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v time.Time) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateAt), v))
	})
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v time.Time) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateAt), v))
	})
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v time.Time) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateAt), v))
	})
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v time.Time) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v time.Time) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...time.Time) predicate.AccountPlatform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountPlatform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...time.Time) predicate.AccountPlatform {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountPlatform(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v time.Time) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v time.Time) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v time.Time) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v time.Time) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AccountPlatform) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AccountPlatform) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AccountPlatform) predicate.AccountPlatform {
	return predicate.AccountPlatform(func(s *sql.Selector) {
		p(s.Not())
	})
}
