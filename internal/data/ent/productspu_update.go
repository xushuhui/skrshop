// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"skrshop/internal/data/ent/predicate"
	"skrshop/internal/data/ent/productspu"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductSpuUpdate is the builder for updating ProductSpu entities.
type ProductSpuUpdate struct {
	config
	hooks    []Hook
	mutation *ProductSpuMutation
}

// Where adds a new predicate for the ProductSpuUpdate builder.
func (psu *ProductSpuUpdate) Where(ps ...predicate.ProductSpu) *ProductSpuUpdate {
	psu.mutation.predicates = append(psu.mutation.predicates, ps...)
	return psu
}

// SetBrandID sets the "brand_id" field.
func (psu *ProductSpuUpdate) SetBrandID(i int64) *ProductSpuUpdate {
	psu.mutation.ResetBrandID()
	psu.mutation.SetBrandID(i)
	return psu
}

// SetNillableBrandID sets the "brand_id" field if the given value is not nil.
func (psu *ProductSpuUpdate) SetNillableBrandID(i *int64) *ProductSpuUpdate {
	if i != nil {
		psu.SetBrandID(*i)
	}
	return psu
}

// AddBrandID adds i to the "brand_id" field.
func (psu *ProductSpuUpdate) AddBrandID(i int64) *ProductSpuUpdate {
	psu.mutation.AddBrandID(i)
	return psu
}

// SetCategoryID sets the "category_id" field.
func (psu *ProductSpuUpdate) SetCategoryID(i int64) *ProductSpuUpdate {
	psu.mutation.ResetCategoryID()
	psu.mutation.SetCategoryID(i)
	return psu
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (psu *ProductSpuUpdate) SetNillableCategoryID(i *int64) *ProductSpuUpdate {
	if i != nil {
		psu.SetCategoryID(*i)
	}
	return psu
}

// AddCategoryID adds i to the "category_id" field.
func (psu *ProductSpuUpdate) AddCategoryID(i int64) *ProductSpuUpdate {
	psu.mutation.AddCategoryID(i)
	return psu
}

// SetName sets the "name" field.
func (psu *ProductSpuUpdate) SetName(s string) *ProductSpuUpdate {
	psu.mutation.SetName(s)
	return psu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (psu *ProductSpuUpdate) SetNillableName(s *string) *ProductSpuUpdate {
	if s != nil {
		psu.SetName(*s)
	}
	return psu
}

// SetDesc sets the "desc" field.
func (psu *ProductSpuUpdate) SetDesc(s string) *ProductSpuUpdate {
	psu.mutation.SetDesc(s)
	return psu
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (psu *ProductSpuUpdate) SetNillableDesc(s *string) *ProductSpuUpdate {
	if s != nil {
		psu.SetDesc(*s)
	}
	return psu
}

// SetSellingPoint sets the "selling_point" field.
func (psu *ProductSpuUpdate) SetSellingPoint(s string) *ProductSpuUpdate {
	psu.mutation.SetSellingPoint(s)
	return psu
}

// SetNillableSellingPoint sets the "selling_point" field if the given value is not nil.
func (psu *ProductSpuUpdate) SetNillableSellingPoint(s *string) *ProductSpuUpdate {
	if s != nil {
		psu.SetSellingPoint(*s)
	}
	return psu
}

// SetUnit sets the "unit" field.
func (psu *ProductSpuUpdate) SetUnit(s string) *ProductSpuUpdate {
	psu.mutation.SetUnit(s)
	return psu
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (psu *ProductSpuUpdate) SetNillableUnit(s *string) *ProductSpuUpdate {
	if s != nil {
		psu.SetUnit(*s)
	}
	return psu
}

// SetBannerURL sets the "banner_url" field.
func (psu *ProductSpuUpdate) SetBannerURL(s string) *ProductSpuUpdate {
	psu.mutation.SetBannerURL(s)
	return psu
}

// SetMainURL sets the "main_url" field.
func (psu *ProductSpuUpdate) SetMainURL(s string) *ProductSpuUpdate {
	psu.mutation.SetMainURL(s)
	return psu
}

// SetPriceFee sets the "price_fee" field.
func (psu *ProductSpuUpdate) SetPriceFee(i int64) *ProductSpuUpdate {
	psu.mutation.ResetPriceFee()
	psu.mutation.SetPriceFee(i)
	return psu
}

// SetNillablePriceFee sets the "price_fee" field if the given value is not nil.
func (psu *ProductSpuUpdate) SetNillablePriceFee(i *int64) *ProductSpuUpdate {
	if i != nil {
		psu.SetPriceFee(*i)
	}
	return psu
}

// AddPriceFee adds i to the "price_fee" field.
func (psu *ProductSpuUpdate) AddPriceFee(i int64) *ProductSpuUpdate {
	psu.mutation.AddPriceFee(i)
	return psu
}

// SetPriceScale sets the "price_scale" field.
func (psu *ProductSpuUpdate) SetPriceScale(i int8) *ProductSpuUpdate {
	psu.mutation.ResetPriceScale()
	psu.mutation.SetPriceScale(i)
	return psu
}

// SetNillablePriceScale sets the "price_scale" field if the given value is not nil.
func (psu *ProductSpuUpdate) SetNillablePriceScale(i *int8) *ProductSpuUpdate {
	if i != nil {
		psu.SetPriceScale(*i)
	}
	return psu
}

// AddPriceScale adds i to the "price_scale" field.
func (psu *ProductSpuUpdate) AddPriceScale(i int8) *ProductSpuUpdate {
	psu.mutation.AddPriceScale(i)
	return psu
}

// SetMarketPriceFee sets the "market_price_fee" field.
func (psu *ProductSpuUpdate) SetMarketPriceFee(i int64) *ProductSpuUpdate {
	psu.mutation.ResetMarketPriceFee()
	psu.mutation.SetMarketPriceFee(i)
	return psu
}

// SetNillableMarketPriceFee sets the "market_price_fee" field if the given value is not nil.
func (psu *ProductSpuUpdate) SetNillableMarketPriceFee(i *int64) *ProductSpuUpdate {
	if i != nil {
		psu.SetMarketPriceFee(*i)
	}
	return psu
}

// AddMarketPriceFee adds i to the "market_price_fee" field.
func (psu *ProductSpuUpdate) AddMarketPriceFee(i int64) *ProductSpuUpdate {
	psu.mutation.AddMarketPriceFee(i)
	return psu
}

// SetMarketPriceScale sets the "market_price_scale" field.
func (psu *ProductSpuUpdate) SetMarketPriceScale(i int8) *ProductSpuUpdate {
	psu.mutation.ResetMarketPriceScale()
	psu.mutation.SetMarketPriceScale(i)
	return psu
}

// SetNillableMarketPriceScale sets the "market_price_scale" field if the given value is not nil.
func (psu *ProductSpuUpdate) SetNillableMarketPriceScale(i *int8) *ProductSpuUpdate {
	if i != nil {
		psu.SetMarketPriceScale(*i)
	}
	return psu
}

// AddMarketPriceScale adds i to the "market_price_scale" field.
func (psu *ProductSpuUpdate) AddMarketPriceScale(i int8) *ProductSpuUpdate {
	psu.mutation.AddMarketPriceScale(i)
	return psu
}

// SetCreateAt sets the "create_at" field.
func (psu *ProductSpuUpdate) SetCreateAt(t time.Time) *ProductSpuUpdate {
	psu.mutation.SetCreateAt(t)
	return psu
}

// SetUpdateAt sets the "update_at" field.
func (psu *ProductSpuUpdate) SetUpdateAt(t time.Time) *ProductSpuUpdate {
	psu.mutation.SetUpdateAt(t)
	return psu
}

// SetStatus sets the "status" field.
func (psu *ProductSpuUpdate) SetStatus(i int8) *ProductSpuUpdate {
	psu.mutation.ResetStatus()
	psu.mutation.SetStatus(i)
	return psu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (psu *ProductSpuUpdate) SetNillableStatus(i *int8) *ProductSpuUpdate {
	if i != nil {
		psu.SetStatus(*i)
	}
	return psu
}

// AddStatus adds i to the "status" field.
func (psu *ProductSpuUpdate) AddStatus(i int8) *ProductSpuUpdate {
	psu.mutation.AddStatus(i)
	return psu
}

// Mutation returns the ProductSpuMutation object of the builder.
func (psu *ProductSpuUpdate) Mutation() *ProductSpuMutation {
	return psu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psu *ProductSpuUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(psu.hooks) == 0 {
		if err = psu.check(); err != nil {
			return 0, err
		}
		affected, err = psu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductSpuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = psu.check(); err != nil {
				return 0, err
			}
			psu.mutation = mutation
			affected, err = psu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(psu.hooks) - 1; i >= 0; i-- {
			mut = psu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, psu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (psu *ProductSpuUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *ProductSpuUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *ProductSpuUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psu *ProductSpuUpdate) check() error {
	if v, ok := psu.mutation.BrandID(); ok {
		if err := productspu.BrandIDValidator(v); err != nil {
			return &ValidationError{Name: "brand_id", err: fmt.Errorf("ent: validator failed for field \"brand_id\": %w", err)}
		}
	}
	if v, ok := psu.mutation.CategoryID(); ok {
		if err := productspu.CategoryIDValidator(v); err != nil {
			return &ValidationError{Name: "category_id", err: fmt.Errorf("ent: validator failed for field \"category_id\": %w", err)}
		}
	}
	if v, ok := psu.mutation.Name(); ok {
		if err := productspu.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := psu.mutation.Desc(); ok {
		if err := productspu.DescValidator(v); err != nil {
			return &ValidationError{Name: "desc", err: fmt.Errorf("ent: validator failed for field \"desc\": %w", err)}
		}
	}
	if v, ok := psu.mutation.SellingPoint(); ok {
		if err := productspu.SellingPointValidator(v); err != nil {
			return &ValidationError{Name: "selling_point", err: fmt.Errorf("ent: validator failed for field \"selling_point\": %w", err)}
		}
	}
	if v, ok := psu.mutation.Unit(); ok {
		if err := productspu.UnitValidator(v); err != nil {
			return &ValidationError{Name: "unit", err: fmt.Errorf("ent: validator failed for field \"unit\": %w", err)}
		}
	}
	if v, ok := psu.mutation.PriceFee(); ok {
		if err := productspu.PriceFeeValidator(v); err != nil {
			return &ValidationError{Name: "price_fee", err: fmt.Errorf("ent: validator failed for field \"price_fee\": %w", err)}
		}
	}
	if v, ok := psu.mutation.MarketPriceFee(); ok {
		if err := productspu.MarketPriceFeeValidator(v); err != nil {
			return &ValidationError{Name: "market_price_fee", err: fmt.Errorf("ent: validator failed for field \"market_price_fee\": %w", err)}
		}
	}
	return nil
}

func (psu *ProductSpuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productspu.Table,
			Columns: productspu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productspu.FieldID,
			},
		},
	}
	if ps := psu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psu.mutation.BrandID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productspu.FieldBrandID,
		})
	}
	if value, ok := psu.mutation.AddedBrandID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productspu.FieldBrandID,
		})
	}
	if value, ok := psu.mutation.CategoryID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productspu.FieldCategoryID,
		})
	}
	if value, ok := psu.mutation.AddedCategoryID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productspu.FieldCategoryID,
		})
	}
	if value, ok := psu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productspu.FieldName,
		})
	}
	if value, ok := psu.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productspu.FieldDesc,
		})
	}
	if value, ok := psu.mutation.SellingPoint(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productspu.FieldSellingPoint,
		})
	}
	if value, ok := psu.mutation.Unit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productspu.FieldUnit,
		})
	}
	if value, ok := psu.mutation.BannerURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productspu.FieldBannerURL,
		})
	}
	if value, ok := psu.mutation.MainURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productspu.FieldMainURL,
		})
	}
	if value, ok := psu.mutation.PriceFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productspu.FieldPriceFee,
		})
	}
	if value, ok := psu.mutation.AddedPriceFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productspu.FieldPriceFee,
		})
	}
	if value, ok := psu.mutation.PriceScale(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productspu.FieldPriceScale,
		})
	}
	if value, ok := psu.mutation.AddedPriceScale(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productspu.FieldPriceScale,
		})
	}
	if value, ok := psu.mutation.MarketPriceFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productspu.FieldMarketPriceFee,
		})
	}
	if value, ok := psu.mutation.AddedMarketPriceFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productspu.FieldMarketPriceFee,
		})
	}
	if value, ok := psu.mutation.MarketPriceScale(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productspu.FieldMarketPriceScale,
		})
	}
	if value, ok := psu.mutation.AddedMarketPriceScale(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productspu.FieldMarketPriceScale,
		})
	}
	if value, ok := psu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productspu.FieldCreateAt,
		})
	}
	if value, ok := psu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productspu.FieldUpdateAt,
		})
	}
	if value, ok := psu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productspu.FieldStatus,
		})
	}
	if value, ok := psu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productspu.FieldStatus,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productspu.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProductSpuUpdateOne is the builder for updating a single ProductSpu entity.
type ProductSpuUpdateOne struct {
	config
	hooks    []Hook
	mutation *ProductSpuMutation
}

// SetBrandID sets the "brand_id" field.
func (psuo *ProductSpuUpdateOne) SetBrandID(i int64) *ProductSpuUpdateOne {
	psuo.mutation.ResetBrandID()
	psuo.mutation.SetBrandID(i)
	return psuo
}

// SetNillableBrandID sets the "brand_id" field if the given value is not nil.
func (psuo *ProductSpuUpdateOne) SetNillableBrandID(i *int64) *ProductSpuUpdateOne {
	if i != nil {
		psuo.SetBrandID(*i)
	}
	return psuo
}

// AddBrandID adds i to the "brand_id" field.
func (psuo *ProductSpuUpdateOne) AddBrandID(i int64) *ProductSpuUpdateOne {
	psuo.mutation.AddBrandID(i)
	return psuo
}

// SetCategoryID sets the "category_id" field.
func (psuo *ProductSpuUpdateOne) SetCategoryID(i int64) *ProductSpuUpdateOne {
	psuo.mutation.ResetCategoryID()
	psuo.mutation.SetCategoryID(i)
	return psuo
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (psuo *ProductSpuUpdateOne) SetNillableCategoryID(i *int64) *ProductSpuUpdateOne {
	if i != nil {
		psuo.SetCategoryID(*i)
	}
	return psuo
}

// AddCategoryID adds i to the "category_id" field.
func (psuo *ProductSpuUpdateOne) AddCategoryID(i int64) *ProductSpuUpdateOne {
	psuo.mutation.AddCategoryID(i)
	return psuo
}

// SetName sets the "name" field.
func (psuo *ProductSpuUpdateOne) SetName(s string) *ProductSpuUpdateOne {
	psuo.mutation.SetName(s)
	return psuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (psuo *ProductSpuUpdateOne) SetNillableName(s *string) *ProductSpuUpdateOne {
	if s != nil {
		psuo.SetName(*s)
	}
	return psuo
}

// SetDesc sets the "desc" field.
func (psuo *ProductSpuUpdateOne) SetDesc(s string) *ProductSpuUpdateOne {
	psuo.mutation.SetDesc(s)
	return psuo
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (psuo *ProductSpuUpdateOne) SetNillableDesc(s *string) *ProductSpuUpdateOne {
	if s != nil {
		psuo.SetDesc(*s)
	}
	return psuo
}

// SetSellingPoint sets the "selling_point" field.
func (psuo *ProductSpuUpdateOne) SetSellingPoint(s string) *ProductSpuUpdateOne {
	psuo.mutation.SetSellingPoint(s)
	return psuo
}

// SetNillableSellingPoint sets the "selling_point" field if the given value is not nil.
func (psuo *ProductSpuUpdateOne) SetNillableSellingPoint(s *string) *ProductSpuUpdateOne {
	if s != nil {
		psuo.SetSellingPoint(*s)
	}
	return psuo
}

// SetUnit sets the "unit" field.
func (psuo *ProductSpuUpdateOne) SetUnit(s string) *ProductSpuUpdateOne {
	psuo.mutation.SetUnit(s)
	return psuo
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (psuo *ProductSpuUpdateOne) SetNillableUnit(s *string) *ProductSpuUpdateOne {
	if s != nil {
		psuo.SetUnit(*s)
	}
	return psuo
}

// SetBannerURL sets the "banner_url" field.
func (psuo *ProductSpuUpdateOne) SetBannerURL(s string) *ProductSpuUpdateOne {
	psuo.mutation.SetBannerURL(s)
	return psuo
}

// SetMainURL sets the "main_url" field.
func (psuo *ProductSpuUpdateOne) SetMainURL(s string) *ProductSpuUpdateOne {
	psuo.mutation.SetMainURL(s)
	return psuo
}

// SetPriceFee sets the "price_fee" field.
func (psuo *ProductSpuUpdateOne) SetPriceFee(i int64) *ProductSpuUpdateOne {
	psuo.mutation.ResetPriceFee()
	psuo.mutation.SetPriceFee(i)
	return psuo
}

// SetNillablePriceFee sets the "price_fee" field if the given value is not nil.
func (psuo *ProductSpuUpdateOne) SetNillablePriceFee(i *int64) *ProductSpuUpdateOne {
	if i != nil {
		psuo.SetPriceFee(*i)
	}
	return psuo
}

// AddPriceFee adds i to the "price_fee" field.
func (psuo *ProductSpuUpdateOne) AddPriceFee(i int64) *ProductSpuUpdateOne {
	psuo.mutation.AddPriceFee(i)
	return psuo
}

// SetPriceScale sets the "price_scale" field.
func (psuo *ProductSpuUpdateOne) SetPriceScale(i int8) *ProductSpuUpdateOne {
	psuo.mutation.ResetPriceScale()
	psuo.mutation.SetPriceScale(i)
	return psuo
}

// SetNillablePriceScale sets the "price_scale" field if the given value is not nil.
func (psuo *ProductSpuUpdateOne) SetNillablePriceScale(i *int8) *ProductSpuUpdateOne {
	if i != nil {
		psuo.SetPriceScale(*i)
	}
	return psuo
}

// AddPriceScale adds i to the "price_scale" field.
func (psuo *ProductSpuUpdateOne) AddPriceScale(i int8) *ProductSpuUpdateOne {
	psuo.mutation.AddPriceScale(i)
	return psuo
}

// SetMarketPriceFee sets the "market_price_fee" field.
func (psuo *ProductSpuUpdateOne) SetMarketPriceFee(i int64) *ProductSpuUpdateOne {
	psuo.mutation.ResetMarketPriceFee()
	psuo.mutation.SetMarketPriceFee(i)
	return psuo
}

// SetNillableMarketPriceFee sets the "market_price_fee" field if the given value is not nil.
func (psuo *ProductSpuUpdateOne) SetNillableMarketPriceFee(i *int64) *ProductSpuUpdateOne {
	if i != nil {
		psuo.SetMarketPriceFee(*i)
	}
	return psuo
}

// AddMarketPriceFee adds i to the "market_price_fee" field.
func (psuo *ProductSpuUpdateOne) AddMarketPriceFee(i int64) *ProductSpuUpdateOne {
	psuo.mutation.AddMarketPriceFee(i)
	return psuo
}

// SetMarketPriceScale sets the "market_price_scale" field.
func (psuo *ProductSpuUpdateOne) SetMarketPriceScale(i int8) *ProductSpuUpdateOne {
	psuo.mutation.ResetMarketPriceScale()
	psuo.mutation.SetMarketPriceScale(i)
	return psuo
}

// SetNillableMarketPriceScale sets the "market_price_scale" field if the given value is not nil.
func (psuo *ProductSpuUpdateOne) SetNillableMarketPriceScale(i *int8) *ProductSpuUpdateOne {
	if i != nil {
		psuo.SetMarketPriceScale(*i)
	}
	return psuo
}

// AddMarketPriceScale adds i to the "market_price_scale" field.
func (psuo *ProductSpuUpdateOne) AddMarketPriceScale(i int8) *ProductSpuUpdateOne {
	psuo.mutation.AddMarketPriceScale(i)
	return psuo
}

// SetCreateAt sets the "create_at" field.
func (psuo *ProductSpuUpdateOne) SetCreateAt(t time.Time) *ProductSpuUpdateOne {
	psuo.mutation.SetCreateAt(t)
	return psuo
}

// SetUpdateAt sets the "update_at" field.
func (psuo *ProductSpuUpdateOne) SetUpdateAt(t time.Time) *ProductSpuUpdateOne {
	psuo.mutation.SetUpdateAt(t)
	return psuo
}

// SetStatus sets the "status" field.
func (psuo *ProductSpuUpdateOne) SetStatus(i int8) *ProductSpuUpdateOne {
	psuo.mutation.ResetStatus()
	psuo.mutation.SetStatus(i)
	return psuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (psuo *ProductSpuUpdateOne) SetNillableStatus(i *int8) *ProductSpuUpdateOne {
	if i != nil {
		psuo.SetStatus(*i)
	}
	return psuo
}

// AddStatus adds i to the "status" field.
func (psuo *ProductSpuUpdateOne) AddStatus(i int8) *ProductSpuUpdateOne {
	psuo.mutation.AddStatus(i)
	return psuo
}

// Mutation returns the ProductSpuMutation object of the builder.
func (psuo *ProductSpuUpdateOne) Mutation() *ProductSpuMutation {
	return psuo.mutation
}

// Save executes the query and returns the updated ProductSpu entity.
func (psuo *ProductSpuUpdateOne) Save(ctx context.Context) (*ProductSpu, error) {
	var (
		err  error
		node *ProductSpu
	)
	if len(psuo.hooks) == 0 {
		if err = psuo.check(); err != nil {
			return nil, err
		}
		node, err = psuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductSpuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = psuo.check(); err != nil {
				return nil, err
			}
			psuo.mutation = mutation
			node, err = psuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(psuo.hooks) - 1; i >= 0; i-- {
			mut = psuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, psuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *ProductSpuUpdateOne) SaveX(ctx context.Context) *ProductSpu {
	node, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psuo *ProductSpuUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *ProductSpuUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psuo *ProductSpuUpdateOne) check() error {
	if v, ok := psuo.mutation.BrandID(); ok {
		if err := productspu.BrandIDValidator(v); err != nil {
			return &ValidationError{Name: "brand_id", err: fmt.Errorf("ent: validator failed for field \"brand_id\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.CategoryID(); ok {
		if err := productspu.CategoryIDValidator(v); err != nil {
			return &ValidationError{Name: "category_id", err: fmt.Errorf("ent: validator failed for field \"category_id\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.Name(); ok {
		if err := productspu.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.Desc(); ok {
		if err := productspu.DescValidator(v); err != nil {
			return &ValidationError{Name: "desc", err: fmt.Errorf("ent: validator failed for field \"desc\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.SellingPoint(); ok {
		if err := productspu.SellingPointValidator(v); err != nil {
			return &ValidationError{Name: "selling_point", err: fmt.Errorf("ent: validator failed for field \"selling_point\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.Unit(); ok {
		if err := productspu.UnitValidator(v); err != nil {
			return &ValidationError{Name: "unit", err: fmt.Errorf("ent: validator failed for field \"unit\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.PriceFee(); ok {
		if err := productspu.PriceFeeValidator(v); err != nil {
			return &ValidationError{Name: "price_fee", err: fmt.Errorf("ent: validator failed for field \"price_fee\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.MarketPriceFee(); ok {
		if err := productspu.MarketPriceFeeValidator(v); err != nil {
			return &ValidationError{Name: "market_price_fee", err: fmt.Errorf("ent: validator failed for field \"market_price_fee\": %w", err)}
		}
	}
	return nil
}

func (psuo *ProductSpuUpdateOne) sqlSave(ctx context.Context) (_node *ProductSpu, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productspu.Table,
			Columns: productspu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productspu.FieldID,
			},
		},
	}
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProductSpu.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := psuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psuo.mutation.BrandID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productspu.FieldBrandID,
		})
	}
	if value, ok := psuo.mutation.AddedBrandID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productspu.FieldBrandID,
		})
	}
	if value, ok := psuo.mutation.CategoryID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productspu.FieldCategoryID,
		})
	}
	if value, ok := psuo.mutation.AddedCategoryID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productspu.FieldCategoryID,
		})
	}
	if value, ok := psuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productspu.FieldName,
		})
	}
	if value, ok := psuo.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productspu.FieldDesc,
		})
	}
	if value, ok := psuo.mutation.SellingPoint(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productspu.FieldSellingPoint,
		})
	}
	if value, ok := psuo.mutation.Unit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productspu.FieldUnit,
		})
	}
	if value, ok := psuo.mutation.BannerURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productspu.FieldBannerURL,
		})
	}
	if value, ok := psuo.mutation.MainURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productspu.FieldMainURL,
		})
	}
	if value, ok := psuo.mutation.PriceFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productspu.FieldPriceFee,
		})
	}
	if value, ok := psuo.mutation.AddedPriceFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productspu.FieldPriceFee,
		})
	}
	if value, ok := psuo.mutation.PriceScale(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productspu.FieldPriceScale,
		})
	}
	if value, ok := psuo.mutation.AddedPriceScale(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productspu.FieldPriceScale,
		})
	}
	if value, ok := psuo.mutation.MarketPriceFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productspu.FieldMarketPriceFee,
		})
	}
	if value, ok := psuo.mutation.AddedMarketPriceFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productspu.FieldMarketPriceFee,
		})
	}
	if value, ok := psuo.mutation.MarketPriceScale(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productspu.FieldMarketPriceScale,
		})
	}
	if value, ok := psuo.mutation.AddedMarketPriceScale(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productspu.FieldMarketPriceScale,
		})
	}
	if value, ok := psuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productspu.FieldCreateAt,
		})
	}
	if value, ok := psuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productspu.FieldUpdateAt,
		})
	}
	if value, ok := psuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productspu.FieldStatus,
		})
	}
	if value, ok := psuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productspu.FieldStatus,
		})
	}
	_node = &ProductSpu{config: psuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productspu.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
