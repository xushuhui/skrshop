// Code generated by entc, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"
	"skrshop/internal/data/ent"
)

// The AccountPlatformFunc type is an adapter to allow the use of ordinary
// function as AccountPlatform mutator.
type AccountPlatformFunc func(context.Context, *ent.AccountPlatformMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AccountPlatformFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AccountPlatformMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AccountPlatformMutation", m)
	}
	return f(ctx, mv)
}

// The AccountUserFunc type is an adapter to allow the use of ordinary
// function as AccountUser mutator.
type AccountUserFunc func(context.Context, *ent.AccountUserMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AccountUserFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AccountUserMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AccountUserMutation", m)
	}
	return f(ctx, mv)
}

// The AuthItemFunc type is an adapter to allow the use of ordinary
// function as AuthItem mutator.
type AuthItemFunc func(context.Context, *ent.AuthItemMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AuthItemFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AuthItemMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AuthItemMutation", m)
	}
	return f(ctx, mv)
}

// The AuthMsFunc type is an adapter to allow the use of ordinary
// function as AuthMs mutator.
type AuthMsFunc func(context.Context, *ent.AuthMsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AuthMsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AuthMsMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AuthMsMutation", m)
	}
	return f(ctx, mv)
}

// The AuthMsMenuFunc type is an adapter to allow the use of ordinary
// function as AuthMsMenu mutator.
type AuthMsMenuFunc func(context.Context, *ent.AuthMsMenuMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AuthMsMenuFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AuthMsMenuMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AuthMsMenuMutation", m)
	}
	return f(ctx, mv)
}

// The AuthRoleFunc type is an adapter to allow the use of ordinary
// function as AuthRole mutator.
type AuthRoleFunc func(context.Context, *ent.AuthRoleMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AuthRoleFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AuthRoleMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AuthRoleMutation", m)
	}
	return f(ctx, mv)
}

// The AuthRoleStaffFunc type is an adapter to allow the use of ordinary
// function as AuthRoleStaff mutator.
type AuthRoleStaffFunc func(context.Context, *ent.AuthRoleStaffMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AuthRoleStaffFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AuthRoleStaffMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AuthRoleStaffMutation", m)
	}
	return f(ctx, mv)
}

// The ProductAttrFunc type is an adapter to allow the use of ordinary
// function as ProductAttr mutator.
type ProductAttrFunc func(context.Context, *ent.ProductAttrMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductAttrFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProductAttrMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductAttrMutation", m)
	}
	return f(ctx, mv)
}

// The ProductAttrValueFunc type is an adapter to allow the use of ordinary
// function as ProductAttrValue mutator.
type ProductAttrValueFunc func(context.Context, *ent.ProductAttrValueMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductAttrValueFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProductAttrValueMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductAttrValueMutation", m)
	}
	return f(ctx, mv)
}

// The ProductBrandsFunc type is an adapter to allow the use of ordinary
// function as ProductBrands mutator.
type ProductBrandsFunc func(context.Context, *ent.ProductBrandsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductBrandsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProductBrandsMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductBrandsMutation", m)
	}
	return f(ctx, mv)
}

// The ProductCategoryFunc type is an adapter to allow the use of ordinary
// function as ProductCategory mutator.
type ProductCategoryFunc func(context.Context, *ent.ProductCategoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductCategoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProductCategoryMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductCategoryMutation", m)
	}
	return f(ctx, mv)
}

// The ProductSkuFunc type is an adapter to allow the use of ordinary
// function as ProductSku mutator.
type ProductSkuFunc func(context.Context, *ent.ProductSkuMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductSkuFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProductSkuMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductSkuMutation", m)
	}
	return f(ctx, mv)
}

// The ProductSkuStockFunc type is an adapter to allow the use of ordinary
// function as ProductSkuStock mutator.
type ProductSkuStockFunc func(context.Context, *ent.ProductSkuStockMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductSkuStockFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProductSkuStockMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductSkuStockMutation", m)
	}
	return f(ctx, mv)
}

// The ProductSpuFunc type is an adapter to allow the use of ordinary
// function as ProductSpu mutator.
type ProductSpuFunc func(context.Context, *ent.ProductSpuMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductSpuFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProductSpuMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductSpuMutation", m)
	}
	return f(ctx, mv)
}

// The ProductSpuSkuAttrMapFunc type is an adapter to allow the use of ordinary
// function as ProductSpuSkuAttrMap mutator.
type ProductSpuSkuAttrMapFunc func(context.Context, *ent.ProductSpuSkuAttrMapMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductSpuSkuAttrMapFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProductSpuSkuAttrMapMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductSpuSkuAttrMapMutation", m)
	}
	return f(ctx, mv)
}

// The SkrMemberFunc type is an adapter to allow the use of ordinary
// function as SkrMember mutator.
type SkrMemberFunc func(context.Context, *ent.SkrMemberMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SkrMemberFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.SkrMemberMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SkrMemberMutation", m)
	}
	return f(ctx, mv)
}

// The StaffInfoFunc type is an adapter to allow the use of ordinary
// function as StaffInfo mutator.
type StaffInfoFunc func(context.Context, *ent.StaffInfoMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f StaffInfoFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.StaffInfoMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.StaffInfoMutation", m)
	}
	return f(ctx, mv)
}

// Condition is a hook condition function.
type Condition func(context.Context, ent.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op ent.Op) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
//
func If(hk ent.Hook, cond Condition) ent.Hook {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, ent.Delete|ent.Create)
//
func On(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, ent.Update|ent.UpdateOne)
//
func Unless(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) ent.Hook {
	return func(ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(context.Context, ent.Mutation) (ent.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []ent.Hook {
//		return []ent.Hook{
//			Reject(ent.Delete|ent.Update),
//		}
//	}
//
func Reject(op ent.Op) ent.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []ent.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...ent.Hook) Chain {
	return Chain{append([]ent.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() ent.Hook {
	return func(mutator ent.Mutator) ent.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...ent.Hook) Chain {
	newHooks := make([]ent.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
