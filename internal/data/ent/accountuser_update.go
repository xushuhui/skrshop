// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"skrshop/internal/data/ent/accountuser"
	"skrshop/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccountUserUpdate is the builder for updating AccountUser entities.
type AccountUserUpdate struct {
	config
	hooks    []Hook
	mutation *AccountUserMutation
}

// Where adds a new predicate for the AccountUserUpdate builder.
func (auu *AccountUserUpdate) Where(ps ...predicate.AccountUser) *AccountUserUpdate {
	auu.mutation.predicates = append(auu.mutation.predicates, ps...)
	return auu
}

// SetEmail sets the "email" field.
func (auu *AccountUserUpdate) SetEmail(s string) *AccountUserUpdate {
	auu.mutation.SetEmail(s)
	return auu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (auu *AccountUserUpdate) SetNillableEmail(s *string) *AccountUserUpdate {
	if s != nil {
		auu.SetEmail(*s)
	}
	return auu
}

// SetPhone sets the "phone" field.
func (auu *AccountUserUpdate) SetPhone(s string) *AccountUserUpdate {
	auu.mutation.SetPhone(s)
	return auu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (auu *AccountUserUpdate) SetNillablePhone(s *string) *AccountUserUpdate {
	if s != nil {
		auu.SetPhone(*s)
	}
	return auu
}

// SetPassword sets the "password" field.
func (auu *AccountUserUpdate) SetPassword(s string) *AccountUserUpdate {
	auu.mutation.SetPassword(s)
	return auu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (auu *AccountUserUpdate) SetNillablePassword(s *string) *AccountUserUpdate {
	if s != nil {
		auu.SetPassword(*s)
	}
	return auu
}

// SetCreateAt sets the "create_at" field.
func (auu *AccountUserUpdate) SetCreateAt(t time.Time) *AccountUserUpdate {
	auu.mutation.SetCreateAt(t)
	return auu
}

// SetStatus sets the "status" field.
func (auu *AccountUserUpdate) SetStatus(i int8) *AccountUserUpdate {
	auu.mutation.ResetStatus()
	auu.mutation.SetStatus(i)
	return auu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auu *AccountUserUpdate) SetNillableStatus(i *int8) *AccountUserUpdate {
	if i != nil {
		auu.SetStatus(*i)
	}
	return auu
}

// AddStatus adds i to the "status" field.
func (auu *AccountUserUpdate) AddStatus(i int8) *AccountUserUpdate {
	auu.mutation.AddStatus(i)
	return auu
}

// Mutation returns the AccountUserMutation object of the builder.
func (auu *AccountUserUpdate) Mutation() *AccountUserMutation {
	return auu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (auu *AccountUserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(auu.hooks) == 0 {
		if err = auu.check(); err != nil {
			return 0, err
		}
		affected, err = auu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auu.check(); err != nil {
				return 0, err
			}
			auu.mutation = mutation
			affected, err = auu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(auu.hooks) - 1; i >= 0; i-- {
			mut = auu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (auu *AccountUserUpdate) SaveX(ctx context.Context) int {
	affected, err := auu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (auu *AccountUserUpdate) Exec(ctx context.Context) error {
	_, err := auu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auu *AccountUserUpdate) ExecX(ctx context.Context) {
	if err := auu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auu *AccountUserUpdate) check() error {
	if v, ok := auu.mutation.Email(); ok {
		if err := accountuser.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf("ent: validator failed for field \"email\": %w", err)}
		}
	}
	if v, ok := auu.mutation.Phone(); ok {
		if err := accountuser.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf("ent: validator failed for field \"phone\": %w", err)}
		}
	}
	if v, ok := auu.mutation.Password(); ok {
		if err := accountuser.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf("ent: validator failed for field \"password\": %w", err)}
		}
	}
	return nil
}

func (auu *AccountUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   accountuser.Table,
			Columns: accountuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: accountuser.FieldID,
			},
		},
	}
	if ps := auu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountuser.FieldEmail,
		})
	}
	if value, ok := auu.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountuser.FieldPhone,
		})
	}
	if value, ok := auu.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountuser.FieldPassword,
		})
	}
	if value, ok := auu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accountuser.FieldCreateAt,
		})
	}
	if value, ok := auu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: accountuser.FieldStatus,
		})
	}
	if value, ok := auu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: accountuser.FieldStatus,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, auu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountuser.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AccountUserUpdateOne is the builder for updating a single AccountUser entity.
type AccountUserUpdateOne struct {
	config
	hooks    []Hook
	mutation *AccountUserMutation
}

// SetEmail sets the "email" field.
func (auuo *AccountUserUpdateOne) SetEmail(s string) *AccountUserUpdateOne {
	auuo.mutation.SetEmail(s)
	return auuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (auuo *AccountUserUpdateOne) SetNillableEmail(s *string) *AccountUserUpdateOne {
	if s != nil {
		auuo.SetEmail(*s)
	}
	return auuo
}

// SetPhone sets the "phone" field.
func (auuo *AccountUserUpdateOne) SetPhone(s string) *AccountUserUpdateOne {
	auuo.mutation.SetPhone(s)
	return auuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (auuo *AccountUserUpdateOne) SetNillablePhone(s *string) *AccountUserUpdateOne {
	if s != nil {
		auuo.SetPhone(*s)
	}
	return auuo
}

// SetPassword sets the "password" field.
func (auuo *AccountUserUpdateOne) SetPassword(s string) *AccountUserUpdateOne {
	auuo.mutation.SetPassword(s)
	return auuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (auuo *AccountUserUpdateOne) SetNillablePassword(s *string) *AccountUserUpdateOne {
	if s != nil {
		auuo.SetPassword(*s)
	}
	return auuo
}

// SetCreateAt sets the "create_at" field.
func (auuo *AccountUserUpdateOne) SetCreateAt(t time.Time) *AccountUserUpdateOne {
	auuo.mutation.SetCreateAt(t)
	return auuo
}

// SetStatus sets the "status" field.
func (auuo *AccountUserUpdateOne) SetStatus(i int8) *AccountUserUpdateOne {
	auuo.mutation.ResetStatus()
	auuo.mutation.SetStatus(i)
	return auuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auuo *AccountUserUpdateOne) SetNillableStatus(i *int8) *AccountUserUpdateOne {
	if i != nil {
		auuo.SetStatus(*i)
	}
	return auuo
}

// AddStatus adds i to the "status" field.
func (auuo *AccountUserUpdateOne) AddStatus(i int8) *AccountUserUpdateOne {
	auuo.mutation.AddStatus(i)
	return auuo
}

// Mutation returns the AccountUserMutation object of the builder.
func (auuo *AccountUserUpdateOne) Mutation() *AccountUserMutation {
	return auuo.mutation
}

// Save executes the query and returns the updated AccountUser entity.
func (auuo *AccountUserUpdateOne) Save(ctx context.Context) (*AccountUser, error) {
	var (
		err  error
		node *AccountUser
	)
	if len(auuo.hooks) == 0 {
		if err = auuo.check(); err != nil {
			return nil, err
		}
		node, err = auuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auuo.check(); err != nil {
				return nil, err
			}
			auuo.mutation = mutation
			node, err = auuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auuo.hooks) - 1; i >= 0; i-- {
			mut = auuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auuo *AccountUserUpdateOne) SaveX(ctx context.Context) *AccountUser {
	node, err := auuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auuo *AccountUserUpdateOne) Exec(ctx context.Context) error {
	_, err := auuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auuo *AccountUserUpdateOne) ExecX(ctx context.Context) {
	if err := auuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auuo *AccountUserUpdateOne) check() error {
	if v, ok := auuo.mutation.Email(); ok {
		if err := accountuser.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf("ent: validator failed for field \"email\": %w", err)}
		}
	}
	if v, ok := auuo.mutation.Phone(); ok {
		if err := accountuser.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf("ent: validator failed for field \"phone\": %w", err)}
		}
	}
	if v, ok := auuo.mutation.Password(); ok {
		if err := accountuser.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf("ent: validator failed for field \"password\": %w", err)}
		}
	}
	return nil
}

func (auuo *AccountUserUpdateOne) sqlSave(ctx context.Context) (_node *AccountUser, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   accountuser.Table,
			Columns: accountuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: accountuser.FieldID,
			},
		},
	}
	id, ok := auuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AccountUser.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := auuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auuo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountuser.FieldEmail,
		})
	}
	if value, ok := auuo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountuser.FieldPhone,
		})
	}
	if value, ok := auuo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountuser.FieldPassword,
		})
	}
	if value, ok := auuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accountuser.FieldCreateAt,
		})
	}
	if value, ok := auuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: accountuser.FieldStatus,
		})
	}
	if value, ok := auuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: accountuser.FieldStatus,
		})
	}
	_node = &AccountUser{config: auuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountuser.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
