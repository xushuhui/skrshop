// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"skrshop/internal/data/ent/predicate"
	"skrshop/internal/data/ent/productbrands"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductBrandsUpdate is the builder for updating ProductBrands entities.
type ProductBrandsUpdate struct {
	config
	hooks    []Hook
	mutation *ProductBrandsMutation
}

// Where adds a new predicate for the ProductBrandsUpdate builder.
func (pbu *ProductBrandsUpdate) Where(ps ...predicate.ProductBrands) *ProductBrandsUpdate {
	pbu.mutation.predicates = append(pbu.mutation.predicates, ps...)
	return pbu
}

// SetName sets the "name" field.
func (pbu *ProductBrandsUpdate) SetName(s string) *ProductBrandsUpdate {
	pbu.mutation.SetName(s)
	return pbu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pbu *ProductBrandsUpdate) SetNillableName(s *string) *ProductBrandsUpdate {
	if s != nil {
		pbu.SetName(*s)
	}
	return pbu
}

// SetDesc sets the "desc" field.
func (pbu *ProductBrandsUpdate) SetDesc(s string) *ProductBrandsUpdate {
	pbu.mutation.SetDesc(s)
	return pbu
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (pbu *ProductBrandsUpdate) SetNillableDesc(s *string) *ProductBrandsUpdate {
	if s != nil {
		pbu.SetDesc(*s)
	}
	return pbu
}

// SetLogoURL sets the "logo_url" field.
func (pbu *ProductBrandsUpdate) SetLogoURL(s string) *ProductBrandsUpdate {
	pbu.mutation.SetLogoURL(s)
	return pbu
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (pbu *ProductBrandsUpdate) SetNillableLogoURL(s *string) *ProductBrandsUpdate {
	if s != nil {
		pbu.SetLogoURL(*s)
	}
	return pbu
}

// SetStatus sets the "status" field.
func (pbu *ProductBrandsUpdate) SetStatus(i int8) *ProductBrandsUpdate {
	pbu.mutation.ResetStatus()
	pbu.mutation.SetStatus(i)
	return pbu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pbu *ProductBrandsUpdate) SetNillableStatus(i *int8) *ProductBrandsUpdate {
	if i != nil {
		pbu.SetStatus(*i)
	}
	return pbu
}

// AddStatus adds i to the "status" field.
func (pbu *ProductBrandsUpdate) AddStatus(i int8) *ProductBrandsUpdate {
	pbu.mutation.AddStatus(i)
	return pbu
}

// SetCreateAt sets the "create_at" field.
func (pbu *ProductBrandsUpdate) SetCreateAt(t time.Time) *ProductBrandsUpdate {
	pbu.mutation.SetCreateAt(t)
	return pbu
}

// SetUpdateAt sets the "update_at" field.
func (pbu *ProductBrandsUpdate) SetUpdateAt(t time.Time) *ProductBrandsUpdate {
	pbu.mutation.SetUpdateAt(t)
	return pbu
}

// Mutation returns the ProductBrandsMutation object of the builder.
func (pbu *ProductBrandsUpdate) Mutation() *ProductBrandsMutation {
	return pbu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pbu *ProductBrandsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pbu.hooks) == 0 {
		if err = pbu.check(); err != nil {
			return 0, err
		}
		affected, err = pbu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductBrandsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pbu.check(); err != nil {
				return 0, err
			}
			pbu.mutation = mutation
			affected, err = pbu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pbu.hooks) - 1; i >= 0; i-- {
			mut = pbu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pbu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pbu *ProductBrandsUpdate) SaveX(ctx context.Context) int {
	affected, err := pbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pbu *ProductBrandsUpdate) Exec(ctx context.Context) error {
	_, err := pbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pbu *ProductBrandsUpdate) ExecX(ctx context.Context) {
	if err := pbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pbu *ProductBrandsUpdate) check() error {
	if v, ok := pbu.mutation.Name(); ok {
		if err := productbrands.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := pbu.mutation.Desc(); ok {
		if err := productbrands.DescValidator(v); err != nil {
			return &ValidationError{Name: "desc", err: fmt.Errorf("ent: validator failed for field \"desc\": %w", err)}
		}
	}
	if v, ok := pbu.mutation.LogoURL(); ok {
		if err := productbrands.LogoURLValidator(v); err != nil {
			return &ValidationError{Name: "logo_url", err: fmt.Errorf("ent: validator failed for field \"logo_url\": %w", err)}
		}
	}
	return nil
}

func (pbu *ProductBrandsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productbrands.Table,
			Columns: productbrands.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productbrands.FieldID,
			},
		},
	}
	if ps := pbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pbu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productbrands.FieldName,
		})
	}
	if value, ok := pbu.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productbrands.FieldDesc,
		})
	}
	if value, ok := pbu.mutation.LogoURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productbrands.FieldLogoURL,
		})
	}
	if value, ok := pbu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productbrands.FieldStatus,
		})
	}
	if value, ok := pbu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productbrands.FieldStatus,
		})
	}
	if value, ok := pbu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productbrands.FieldCreateAt,
		})
	}
	if value, ok := pbu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productbrands.FieldUpdateAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productbrands.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProductBrandsUpdateOne is the builder for updating a single ProductBrands entity.
type ProductBrandsUpdateOne struct {
	config
	hooks    []Hook
	mutation *ProductBrandsMutation
}

// SetName sets the "name" field.
func (pbuo *ProductBrandsUpdateOne) SetName(s string) *ProductBrandsUpdateOne {
	pbuo.mutation.SetName(s)
	return pbuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pbuo *ProductBrandsUpdateOne) SetNillableName(s *string) *ProductBrandsUpdateOne {
	if s != nil {
		pbuo.SetName(*s)
	}
	return pbuo
}

// SetDesc sets the "desc" field.
func (pbuo *ProductBrandsUpdateOne) SetDesc(s string) *ProductBrandsUpdateOne {
	pbuo.mutation.SetDesc(s)
	return pbuo
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (pbuo *ProductBrandsUpdateOne) SetNillableDesc(s *string) *ProductBrandsUpdateOne {
	if s != nil {
		pbuo.SetDesc(*s)
	}
	return pbuo
}

// SetLogoURL sets the "logo_url" field.
func (pbuo *ProductBrandsUpdateOne) SetLogoURL(s string) *ProductBrandsUpdateOne {
	pbuo.mutation.SetLogoURL(s)
	return pbuo
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (pbuo *ProductBrandsUpdateOne) SetNillableLogoURL(s *string) *ProductBrandsUpdateOne {
	if s != nil {
		pbuo.SetLogoURL(*s)
	}
	return pbuo
}

// SetStatus sets the "status" field.
func (pbuo *ProductBrandsUpdateOne) SetStatus(i int8) *ProductBrandsUpdateOne {
	pbuo.mutation.ResetStatus()
	pbuo.mutation.SetStatus(i)
	return pbuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pbuo *ProductBrandsUpdateOne) SetNillableStatus(i *int8) *ProductBrandsUpdateOne {
	if i != nil {
		pbuo.SetStatus(*i)
	}
	return pbuo
}

// AddStatus adds i to the "status" field.
func (pbuo *ProductBrandsUpdateOne) AddStatus(i int8) *ProductBrandsUpdateOne {
	pbuo.mutation.AddStatus(i)
	return pbuo
}

// SetCreateAt sets the "create_at" field.
func (pbuo *ProductBrandsUpdateOne) SetCreateAt(t time.Time) *ProductBrandsUpdateOne {
	pbuo.mutation.SetCreateAt(t)
	return pbuo
}

// SetUpdateAt sets the "update_at" field.
func (pbuo *ProductBrandsUpdateOne) SetUpdateAt(t time.Time) *ProductBrandsUpdateOne {
	pbuo.mutation.SetUpdateAt(t)
	return pbuo
}

// Mutation returns the ProductBrandsMutation object of the builder.
func (pbuo *ProductBrandsUpdateOne) Mutation() *ProductBrandsMutation {
	return pbuo.mutation
}

// Save executes the query and returns the updated ProductBrands entity.
func (pbuo *ProductBrandsUpdateOne) Save(ctx context.Context) (*ProductBrands, error) {
	var (
		err  error
		node *ProductBrands
	)
	if len(pbuo.hooks) == 0 {
		if err = pbuo.check(); err != nil {
			return nil, err
		}
		node, err = pbuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductBrandsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pbuo.check(); err != nil {
				return nil, err
			}
			pbuo.mutation = mutation
			node, err = pbuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pbuo.hooks) - 1; i >= 0; i-- {
			mut = pbuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pbuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pbuo *ProductBrandsUpdateOne) SaveX(ctx context.Context) *ProductBrands {
	node, err := pbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pbuo *ProductBrandsUpdateOne) Exec(ctx context.Context) error {
	_, err := pbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pbuo *ProductBrandsUpdateOne) ExecX(ctx context.Context) {
	if err := pbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pbuo *ProductBrandsUpdateOne) check() error {
	if v, ok := pbuo.mutation.Name(); ok {
		if err := productbrands.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := pbuo.mutation.Desc(); ok {
		if err := productbrands.DescValidator(v); err != nil {
			return &ValidationError{Name: "desc", err: fmt.Errorf("ent: validator failed for field \"desc\": %w", err)}
		}
	}
	if v, ok := pbuo.mutation.LogoURL(); ok {
		if err := productbrands.LogoURLValidator(v); err != nil {
			return &ValidationError{Name: "logo_url", err: fmt.Errorf("ent: validator failed for field \"logo_url\": %w", err)}
		}
	}
	return nil
}

func (pbuo *ProductBrandsUpdateOne) sqlSave(ctx context.Context) (_node *ProductBrands, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productbrands.Table,
			Columns: productbrands.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productbrands.FieldID,
			},
		},
	}
	id, ok := pbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProductBrands.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := pbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pbuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productbrands.FieldName,
		})
	}
	if value, ok := pbuo.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productbrands.FieldDesc,
		})
	}
	if value, ok := pbuo.mutation.LogoURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productbrands.FieldLogoURL,
		})
	}
	if value, ok := pbuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productbrands.FieldStatus,
		})
	}
	if value, ok := pbuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productbrands.FieldStatus,
		})
	}
	if value, ok := pbuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productbrands.FieldCreateAt,
		})
	}
	if value, ok := pbuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productbrands.FieldUpdateAt,
		})
	}
	_node = &ProductBrands{config: pbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productbrands.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
