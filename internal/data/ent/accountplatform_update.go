// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"skrshop/internal/data/ent/accountplatform"
	"skrshop/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccountPlatformUpdate is the builder for updating AccountPlatform entities.
type AccountPlatformUpdate struct {
	config
	hooks    []Hook
	mutation *AccountPlatformMutation
}

// Where adds a new predicate for the AccountPlatformUpdate builder.
func (apu *AccountPlatformUpdate) Where(ps ...predicate.AccountPlatform) *AccountPlatformUpdate {
	apu.mutation.predicates = append(apu.mutation.predicates, ps...)
	return apu
}

// SetUID sets the "uid" field.
func (apu *AccountPlatformUpdate) SetUID(i int64) *AccountPlatformUpdate {
	apu.mutation.ResetUID()
	apu.mutation.SetUID(i)
	return apu
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (apu *AccountPlatformUpdate) SetNillableUID(i *int64) *AccountPlatformUpdate {
	if i != nil {
		apu.SetUID(*i)
	}
	return apu
}

// AddUID adds i to the "uid" field.
func (apu *AccountPlatformUpdate) AddUID(i int64) *AccountPlatformUpdate {
	apu.mutation.AddUID(i)
	return apu
}

// SetPlatformID sets the "platform_id" field.
func (apu *AccountPlatformUpdate) SetPlatformID(s string) *AccountPlatformUpdate {
	apu.mutation.SetPlatformID(s)
	return apu
}

// SetNillablePlatformID sets the "platform_id" field if the given value is not nil.
func (apu *AccountPlatformUpdate) SetNillablePlatformID(s *string) *AccountPlatformUpdate {
	if s != nil {
		apu.SetPlatformID(*s)
	}
	return apu
}

// SetPlatformToken sets the "platform_token" field.
func (apu *AccountPlatformUpdate) SetPlatformToken(s string) *AccountPlatformUpdate {
	apu.mutation.SetPlatformToken(s)
	return apu
}

// SetNillablePlatformToken sets the "platform_token" field if the given value is not nil.
func (apu *AccountPlatformUpdate) SetNillablePlatformToken(s *string) *AccountPlatformUpdate {
	if s != nil {
		apu.SetPlatformToken(*s)
	}
	return apu
}

// SetNickname sets the "nickname" field.
func (apu *AccountPlatformUpdate) SetNickname(s string) *AccountPlatformUpdate {
	apu.mutation.SetNickname(s)
	return apu
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (apu *AccountPlatformUpdate) SetNillableNickname(s *string) *AccountPlatformUpdate {
	if s != nil {
		apu.SetNickname(*s)
	}
	return apu
}

// SetAvatar sets the "avatar" field.
func (apu *AccountPlatformUpdate) SetAvatar(s string) *AccountPlatformUpdate {
	apu.mutation.SetAvatar(s)
	return apu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (apu *AccountPlatformUpdate) SetNillableAvatar(s *string) *AccountPlatformUpdate {
	if s != nil {
		apu.SetAvatar(*s)
	}
	return apu
}

// SetType sets the "type" field.
func (apu *AccountPlatformUpdate) SetType(i int8) *AccountPlatformUpdate {
	apu.mutation.ResetType()
	apu.mutation.SetType(i)
	return apu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (apu *AccountPlatformUpdate) SetNillableType(i *int8) *AccountPlatformUpdate {
	if i != nil {
		apu.SetType(*i)
	}
	return apu
}

// AddType adds i to the "type" field.
func (apu *AccountPlatformUpdate) AddType(i int8) *AccountPlatformUpdate {
	apu.mutation.AddType(i)
	return apu
}

// SetCreateAt sets the "create_at" field.
func (apu *AccountPlatformUpdate) SetCreateAt(t time.Time) *AccountPlatformUpdate {
	apu.mutation.SetCreateAt(t)
	return apu
}

// SetUpdateAt sets the "update_at" field.
func (apu *AccountPlatformUpdate) SetUpdateAt(t time.Time) *AccountPlatformUpdate {
	apu.mutation.SetUpdateAt(t)
	return apu
}

// Mutation returns the AccountPlatformMutation object of the builder.
func (apu *AccountPlatformUpdate) Mutation() *AccountPlatformMutation {
	return apu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (apu *AccountPlatformUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(apu.hooks) == 0 {
		if err = apu.check(); err != nil {
			return 0, err
		}
		affected, err = apu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountPlatformMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = apu.check(); err != nil {
				return 0, err
			}
			apu.mutation = mutation
			affected, err = apu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(apu.hooks) - 1; i >= 0; i-- {
			mut = apu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, apu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (apu *AccountPlatformUpdate) SaveX(ctx context.Context) int {
	affected, err := apu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (apu *AccountPlatformUpdate) Exec(ctx context.Context) error {
	_, err := apu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apu *AccountPlatformUpdate) ExecX(ctx context.Context) {
	if err := apu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (apu *AccountPlatformUpdate) check() error {
	if v, ok := apu.mutation.UID(); ok {
		if err := accountplatform.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf("ent: validator failed for field \"uid\": %w", err)}
		}
	}
	if v, ok := apu.mutation.PlatformID(); ok {
		if err := accountplatform.PlatformIDValidator(v); err != nil {
			return &ValidationError{Name: "platform_id", err: fmt.Errorf("ent: validator failed for field \"platform_id\": %w", err)}
		}
	}
	if v, ok := apu.mutation.PlatformToken(); ok {
		if err := accountplatform.PlatformTokenValidator(v); err != nil {
			return &ValidationError{Name: "platform_token", err: fmt.Errorf("ent: validator failed for field \"platform_token\": %w", err)}
		}
	}
	if v, ok := apu.mutation.Nickname(); ok {
		if err := accountplatform.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf("ent: validator failed for field \"nickname\": %w", err)}
		}
	}
	if v, ok := apu.mutation.Avatar(); ok {
		if err := accountplatform.AvatarValidator(v); err != nil {
			return &ValidationError{Name: "avatar", err: fmt.Errorf("ent: validator failed for field \"avatar\": %w", err)}
		}
	}
	return nil
}

func (apu *AccountPlatformUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   accountplatform.Table,
			Columns: accountplatform.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: accountplatform.FieldID,
			},
		},
	}
	if ps := apu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apu.mutation.UID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: accountplatform.FieldUID,
		})
	}
	if value, ok := apu.mutation.AddedUID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: accountplatform.FieldUID,
		})
	}
	if value, ok := apu.mutation.PlatformID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountplatform.FieldPlatformID,
		})
	}
	if value, ok := apu.mutation.PlatformToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountplatform.FieldPlatformToken,
		})
	}
	if value, ok := apu.mutation.Nickname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountplatform.FieldNickname,
		})
	}
	if value, ok := apu.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountplatform.FieldAvatar,
		})
	}
	if value, ok := apu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: accountplatform.FieldType,
		})
	}
	if value, ok := apu.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: accountplatform.FieldType,
		})
	}
	if value, ok := apu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accountplatform.FieldCreateAt,
		})
	}
	if value, ok := apu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accountplatform.FieldUpdateAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, apu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountplatform.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AccountPlatformUpdateOne is the builder for updating a single AccountPlatform entity.
type AccountPlatformUpdateOne struct {
	config
	hooks    []Hook
	mutation *AccountPlatformMutation
}

// SetUID sets the "uid" field.
func (apuo *AccountPlatformUpdateOne) SetUID(i int64) *AccountPlatformUpdateOne {
	apuo.mutation.ResetUID()
	apuo.mutation.SetUID(i)
	return apuo
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (apuo *AccountPlatformUpdateOne) SetNillableUID(i *int64) *AccountPlatformUpdateOne {
	if i != nil {
		apuo.SetUID(*i)
	}
	return apuo
}

// AddUID adds i to the "uid" field.
func (apuo *AccountPlatformUpdateOne) AddUID(i int64) *AccountPlatformUpdateOne {
	apuo.mutation.AddUID(i)
	return apuo
}

// SetPlatformID sets the "platform_id" field.
func (apuo *AccountPlatformUpdateOne) SetPlatformID(s string) *AccountPlatformUpdateOne {
	apuo.mutation.SetPlatformID(s)
	return apuo
}

// SetNillablePlatformID sets the "platform_id" field if the given value is not nil.
func (apuo *AccountPlatformUpdateOne) SetNillablePlatformID(s *string) *AccountPlatformUpdateOne {
	if s != nil {
		apuo.SetPlatformID(*s)
	}
	return apuo
}

// SetPlatformToken sets the "platform_token" field.
func (apuo *AccountPlatformUpdateOne) SetPlatformToken(s string) *AccountPlatformUpdateOne {
	apuo.mutation.SetPlatformToken(s)
	return apuo
}

// SetNillablePlatformToken sets the "platform_token" field if the given value is not nil.
func (apuo *AccountPlatformUpdateOne) SetNillablePlatformToken(s *string) *AccountPlatformUpdateOne {
	if s != nil {
		apuo.SetPlatformToken(*s)
	}
	return apuo
}

// SetNickname sets the "nickname" field.
func (apuo *AccountPlatformUpdateOne) SetNickname(s string) *AccountPlatformUpdateOne {
	apuo.mutation.SetNickname(s)
	return apuo
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (apuo *AccountPlatformUpdateOne) SetNillableNickname(s *string) *AccountPlatformUpdateOne {
	if s != nil {
		apuo.SetNickname(*s)
	}
	return apuo
}

// SetAvatar sets the "avatar" field.
func (apuo *AccountPlatformUpdateOne) SetAvatar(s string) *AccountPlatformUpdateOne {
	apuo.mutation.SetAvatar(s)
	return apuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (apuo *AccountPlatformUpdateOne) SetNillableAvatar(s *string) *AccountPlatformUpdateOne {
	if s != nil {
		apuo.SetAvatar(*s)
	}
	return apuo
}

// SetType sets the "type" field.
func (apuo *AccountPlatformUpdateOne) SetType(i int8) *AccountPlatformUpdateOne {
	apuo.mutation.ResetType()
	apuo.mutation.SetType(i)
	return apuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (apuo *AccountPlatformUpdateOne) SetNillableType(i *int8) *AccountPlatformUpdateOne {
	if i != nil {
		apuo.SetType(*i)
	}
	return apuo
}

// AddType adds i to the "type" field.
func (apuo *AccountPlatformUpdateOne) AddType(i int8) *AccountPlatformUpdateOne {
	apuo.mutation.AddType(i)
	return apuo
}

// SetCreateAt sets the "create_at" field.
func (apuo *AccountPlatformUpdateOne) SetCreateAt(t time.Time) *AccountPlatformUpdateOne {
	apuo.mutation.SetCreateAt(t)
	return apuo
}

// SetUpdateAt sets the "update_at" field.
func (apuo *AccountPlatformUpdateOne) SetUpdateAt(t time.Time) *AccountPlatformUpdateOne {
	apuo.mutation.SetUpdateAt(t)
	return apuo
}

// Mutation returns the AccountPlatformMutation object of the builder.
func (apuo *AccountPlatformUpdateOne) Mutation() *AccountPlatformMutation {
	return apuo.mutation
}

// Save executes the query and returns the updated AccountPlatform entity.
func (apuo *AccountPlatformUpdateOne) Save(ctx context.Context) (*AccountPlatform, error) {
	var (
		err  error
		node *AccountPlatform
	)
	if len(apuo.hooks) == 0 {
		if err = apuo.check(); err != nil {
			return nil, err
		}
		node, err = apuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountPlatformMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = apuo.check(); err != nil {
				return nil, err
			}
			apuo.mutation = mutation
			node, err = apuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(apuo.hooks) - 1; i >= 0; i-- {
			mut = apuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, apuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (apuo *AccountPlatformUpdateOne) SaveX(ctx context.Context) *AccountPlatform {
	node, err := apuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (apuo *AccountPlatformUpdateOne) Exec(ctx context.Context) error {
	_, err := apuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apuo *AccountPlatformUpdateOne) ExecX(ctx context.Context) {
	if err := apuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (apuo *AccountPlatformUpdateOne) check() error {
	if v, ok := apuo.mutation.UID(); ok {
		if err := accountplatform.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf("ent: validator failed for field \"uid\": %w", err)}
		}
	}
	if v, ok := apuo.mutation.PlatformID(); ok {
		if err := accountplatform.PlatformIDValidator(v); err != nil {
			return &ValidationError{Name: "platform_id", err: fmt.Errorf("ent: validator failed for field \"platform_id\": %w", err)}
		}
	}
	if v, ok := apuo.mutation.PlatformToken(); ok {
		if err := accountplatform.PlatformTokenValidator(v); err != nil {
			return &ValidationError{Name: "platform_token", err: fmt.Errorf("ent: validator failed for field \"platform_token\": %w", err)}
		}
	}
	if v, ok := apuo.mutation.Nickname(); ok {
		if err := accountplatform.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf("ent: validator failed for field \"nickname\": %w", err)}
		}
	}
	if v, ok := apuo.mutation.Avatar(); ok {
		if err := accountplatform.AvatarValidator(v); err != nil {
			return &ValidationError{Name: "avatar", err: fmt.Errorf("ent: validator failed for field \"avatar\": %w", err)}
		}
	}
	return nil
}

func (apuo *AccountPlatformUpdateOne) sqlSave(ctx context.Context) (_node *AccountPlatform, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   accountplatform.Table,
			Columns: accountplatform.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: accountplatform.FieldID,
			},
		},
	}
	id, ok := apuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AccountPlatform.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := apuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apuo.mutation.UID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: accountplatform.FieldUID,
		})
	}
	if value, ok := apuo.mutation.AddedUID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: accountplatform.FieldUID,
		})
	}
	if value, ok := apuo.mutation.PlatformID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountplatform.FieldPlatformID,
		})
	}
	if value, ok := apuo.mutation.PlatformToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountplatform.FieldPlatformToken,
		})
	}
	if value, ok := apuo.mutation.Nickname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountplatform.FieldNickname,
		})
	}
	if value, ok := apuo.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountplatform.FieldAvatar,
		})
	}
	if value, ok := apuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: accountplatform.FieldType,
		})
	}
	if value, ok := apuo.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: accountplatform.FieldType,
		})
	}
	if value, ok := apuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accountplatform.FieldCreateAt,
		})
	}
	if value, ok := apuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accountplatform.FieldUpdateAt,
		})
	}
	_node = &AccountPlatform{config: apuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, apuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountplatform.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
