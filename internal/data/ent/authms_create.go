// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"skrshop/internal/data/ent/authms"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AuthMsCreate is the builder for creating a AuthMs entity.
type AuthMsCreate struct {
	config
	mutation *AuthMsMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (amc *AuthMsCreate) SetStatus(i int8) *AuthMsCreate {
	amc.mutation.SetStatus(i)
	return amc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (amc *AuthMsCreate) SetNillableStatus(i *int8) *AuthMsCreate {
	if i != nil {
		amc.SetStatus(*i)
	}
	return amc
}

// SetCreateAt sets the "create_at" field.
func (amc *AuthMsCreate) SetCreateAt(t time.Time) *AuthMsCreate {
	amc.mutation.SetCreateAt(t)
	return amc
}

// SetUpdateAt sets the "update_at" field.
func (amc *AuthMsCreate) SetUpdateAt(t time.Time) *AuthMsCreate {
	amc.mutation.SetUpdateAt(t)
	return amc
}

// Mutation returns the AuthMsMutation object of the builder.
func (amc *AuthMsCreate) Mutation() *AuthMsMutation {
	return amc.mutation
}

// Save creates the AuthMs in the database.
func (amc *AuthMsCreate) Save(ctx context.Context) (*AuthMs, error) {
	var (
		err  error
		node *AuthMs
	)
	amc.defaults()
	if len(amc.hooks) == 0 {
		if err = amc.check(); err != nil {
			return nil, err
		}
		node, err = amc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuthMsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = amc.check(); err != nil {
				return nil, err
			}
			amc.mutation = mutation
			node, err = amc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(amc.hooks) - 1; i >= 0; i-- {
			mut = amc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (amc *AuthMsCreate) SaveX(ctx context.Context) *AuthMs {
	v, err := amc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (amc *AuthMsCreate) defaults() {
	if _, ok := amc.mutation.Status(); !ok {
		v := authms.DefaultStatus
		amc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (amc *AuthMsCreate) check() error {
	if _, ok := amc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if _, ok := amc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New("ent: missing required field \"create_at\"")}
	}
	if _, ok := amc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New("ent: missing required field \"update_at\"")}
	}
	return nil
}

func (amc *AuthMsCreate) sqlSave(ctx context.Context) (*AuthMs, error) {
	_node, _spec := amc.createSpec()
	if err := sqlgraph.CreateNode(ctx, amc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (amc *AuthMsCreate) createSpec() (*AuthMs, *sqlgraph.CreateSpec) {
	var (
		_node = &AuthMs{config: amc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: authms.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: authms.FieldID,
			},
		}
	)
	if value, ok := amc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: authms.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := amc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authms.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := amc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authms.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	return _node, _spec
}

// AuthMsCreateBulk is the builder for creating many AuthMs entities in bulk.
type AuthMsCreateBulk struct {
	config
	builders []*AuthMsCreate
}

// Save creates the AuthMs entities in the database.
func (amcb *AuthMsCreateBulk) Save(ctx context.Context) ([]*AuthMs, error) {
	specs := make([]*sqlgraph.CreateSpec, len(amcb.builders))
	nodes := make([]*AuthMs, len(amcb.builders))
	mutators := make([]Mutator, len(amcb.builders))
	for i := range amcb.builders {
		func(i int, root context.Context) {
			builder := amcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuthMsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, amcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, amcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, amcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (amcb *AuthMsCreateBulk) SaveX(ctx context.Context) []*AuthMs {
	v, err := amcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
