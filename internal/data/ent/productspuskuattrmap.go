// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"skrshop/internal/data/ent/productspuskuattrmap"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ProductSpuSkuAttrMap is the model entity for the ProductSpuSkuAttrMap schema.
type ProductSpuSkuAttrMap struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间
	CreateAt time.Time `json:"create_at,omitempty"`
	// 更新时间
	UpdateAt time.Time `json:"update_at,omitempty"`
	// 状态 1:enable, 0:disable, -1:deleted
	Status int8 `json:"status,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductSpuSkuAttrMap) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case productspuskuattrmap.FieldID, productspuskuattrmap.FieldStatus:
			values[i] = &sql.NullInt64{}
		case productspuskuattrmap.FieldCreateAt, productspuskuattrmap.FieldUpdateAt:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProductSpuSkuAttrMap", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductSpuSkuAttrMap fields.
func (pssam *ProductSpuSkuAttrMap) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productspuskuattrmap.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pssam.ID = int(value.Int64)
		case productspuskuattrmap.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				pssam.CreateAt = value.Time
			}
		case productspuskuattrmap.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				pssam.UpdateAt = value.Time
			}
		case productspuskuattrmap.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pssam.Status = int8(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ProductSpuSkuAttrMap.
// Note that you need to call ProductSpuSkuAttrMap.Unwrap() before calling this method if this ProductSpuSkuAttrMap
// was returned from a transaction, and the transaction was committed or rolled back.
func (pssam *ProductSpuSkuAttrMap) Update() *ProductSpuSkuAttrMapUpdateOne {
	return (&ProductSpuSkuAttrMapClient{config: pssam.config}).UpdateOne(pssam)
}

// Unwrap unwraps the ProductSpuSkuAttrMap entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pssam *ProductSpuSkuAttrMap) Unwrap() *ProductSpuSkuAttrMap {
	tx, ok := pssam.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductSpuSkuAttrMap is not a transactional entity")
	}
	pssam.config.driver = tx.drv
	return pssam
}

// String implements the fmt.Stringer.
func (pssam *ProductSpuSkuAttrMap) String() string {
	var builder strings.Builder
	builder.WriteString("ProductSpuSkuAttrMap(")
	builder.WriteString(fmt.Sprintf("id=%v", pssam.ID))
	builder.WriteString(", create_at=")
	builder.WriteString(pssam.CreateAt.Format(time.ANSIC))
	builder.WriteString(", update_at=")
	builder.WriteString(pssam.UpdateAt.Format(time.ANSIC))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", pssam.Status))
	builder.WriteByte(')')
	return builder.String()
}

// ProductSpuSkuAttrMaps is a parsable slice of ProductSpuSkuAttrMap.
type ProductSpuSkuAttrMaps []*ProductSpuSkuAttrMap

func (pssam ProductSpuSkuAttrMaps) config(cfg config) {
	for _i := range pssam {
		pssam[_i].config = cfg
	}
}
