// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"skrshop/internal/data/ent/staffinfo"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// StaffInfo is the model entity for the StaffInfo schema.
type StaffInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 账号 id
	UID int64 `json:"uid,omitempty"`
	// 邮箱
	Email string `json:"email,omitempty"`
	// 手机号
	Phone string `json:"phone,omitempty"`
	// 密码
	Password string `json:"password,omitempty"`
	// 姓名
	Name string `json:"name,omitempty"`
	// Avatar holds the value of the "avatar" field.
	Avatar string `json:"avatar,omitempty"`
	// 性别 1 unknow 2 male 3 female
	Gender int8 `json:"gender,omitempty"`
	// 创建时间
	CreateAt time.Time `json:"create_at,omitempty"`
	// 更新时间
	UpdateAt time.Time `json:"update_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StaffInfo) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case staffinfo.FieldID, staffinfo.FieldUID, staffinfo.FieldGender:
			values[i] = &sql.NullInt64{}
		case staffinfo.FieldEmail, staffinfo.FieldPhone, staffinfo.FieldPassword, staffinfo.FieldName, staffinfo.FieldAvatar:
			values[i] = &sql.NullString{}
		case staffinfo.FieldCreateAt, staffinfo.FieldUpdateAt:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type StaffInfo", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StaffInfo fields.
func (si *StaffInfo) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case staffinfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			si.ID = int(value.Int64)
		case staffinfo.FieldUID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				si.UID = value.Int64
			}
		case staffinfo.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				si.Email = value.String
			}
		case staffinfo.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				si.Phone = value.String
			}
		case staffinfo.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				si.Password = value.String
			}
		case staffinfo.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				si.Name = value.String
			}
		case staffinfo.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				si.Avatar = value.String
			}
		case staffinfo.FieldGender:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				si.Gender = int8(value.Int64)
			}
		case staffinfo.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				si.CreateAt = value.Time
			}
		case staffinfo.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				si.UpdateAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this StaffInfo.
// Note that you need to call StaffInfo.Unwrap() before calling this method if this StaffInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (si *StaffInfo) Update() *StaffInfoUpdateOne {
	return (&StaffInfoClient{config: si.config}).UpdateOne(si)
}

// Unwrap unwraps the StaffInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (si *StaffInfo) Unwrap() *StaffInfo {
	tx, ok := si.config.driver.(*txDriver)
	if !ok {
		panic("ent: StaffInfo is not a transactional entity")
	}
	si.config.driver = tx.drv
	return si
}

// String implements the fmt.Stringer.
func (si *StaffInfo) String() string {
	var builder strings.Builder
	builder.WriteString("StaffInfo(")
	builder.WriteString(fmt.Sprintf("id=%v", si.ID))
	builder.WriteString(", uid=")
	builder.WriteString(fmt.Sprintf("%v", si.UID))
	builder.WriteString(", email=")
	builder.WriteString(si.Email)
	builder.WriteString(", phone=")
	builder.WriteString(si.Phone)
	builder.WriteString(", password=")
	builder.WriteString(si.Password)
	builder.WriteString(", name=")
	builder.WriteString(si.Name)
	builder.WriteString(", avatar=")
	builder.WriteString(si.Avatar)
	builder.WriteString(", gender=")
	builder.WriteString(fmt.Sprintf("%v", si.Gender))
	builder.WriteString(", create_at=")
	builder.WriteString(si.CreateAt.Format(time.ANSIC))
	builder.WriteString(", update_at=")
	builder.WriteString(si.UpdateAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// StaffInfos is a parsable slice of StaffInfo.
type StaffInfos []*StaffInfo

func (si StaffInfos) config(cfg config) {
	for _i := range si {
		si[_i].config = cfg
	}
}
