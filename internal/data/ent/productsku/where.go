// Code generated by entc, DO NOT EDIT.

package productsku

import (
	"skrshop/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// SpuID applies equality check predicate on the "spu_id" field. It's identical to SpuIDEQ.
func SpuID(v int64) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpuID), v))
	})
}

// Attrs applies equality check predicate on the "attrs" field. It's identical to AttrsEQ.
func Attrs(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAttrs), v))
	})
}

// BannerURL applies equality check predicate on the "banner_url" field. It's identical to BannerURLEQ.
func BannerURL(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBannerURL), v))
	})
}

// MainURL applies equality check predicate on the "main_url" field. It's identical to MainURLEQ.
func MainURL(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMainURL), v))
	})
}

// PriceFee applies equality check predicate on the "price_fee" field. It's identical to PriceFeeEQ.
func PriceFee(v int64) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPriceFee), v))
	})
}

// PriceScale applies equality check predicate on the "price_scale" field. It's identical to PriceScaleEQ.
func PriceScale(v int8) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPriceScale), v))
	})
}

// MarketPriceFee applies equality check predicate on the "market_price_fee" field. It's identical to MarketPriceFeeEQ.
func MarketPriceFee(v int64) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMarketPriceFee), v))
	})
}

// MarketPriceScale applies equality check predicate on the "market_price_scale" field. It's identical to MarketPriceScaleEQ.
func MarketPriceScale(v int8) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMarketPriceScale), v))
	})
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v time.Time) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v time.Time) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int8) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// SpuIDEQ applies the EQ predicate on the "spu_id" field.
func SpuIDEQ(v int64) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpuID), v))
	})
}

// SpuIDNEQ applies the NEQ predicate on the "spu_id" field.
func SpuIDNEQ(v int64) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSpuID), v))
	})
}

// SpuIDIn applies the In predicate on the "spu_id" field.
func SpuIDIn(vs ...int64) predicate.ProductSku {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSku(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSpuID), v...))
	})
}

// SpuIDNotIn applies the NotIn predicate on the "spu_id" field.
func SpuIDNotIn(vs ...int64) predicate.ProductSku {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSku(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSpuID), v...))
	})
}

// SpuIDGT applies the GT predicate on the "spu_id" field.
func SpuIDGT(v int64) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSpuID), v))
	})
}

// SpuIDGTE applies the GTE predicate on the "spu_id" field.
func SpuIDGTE(v int64) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSpuID), v))
	})
}

// SpuIDLT applies the LT predicate on the "spu_id" field.
func SpuIDLT(v int64) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSpuID), v))
	})
}

// SpuIDLTE applies the LTE predicate on the "spu_id" field.
func SpuIDLTE(v int64) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSpuID), v))
	})
}

// AttrsEQ applies the EQ predicate on the "attrs" field.
func AttrsEQ(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAttrs), v))
	})
}

// AttrsNEQ applies the NEQ predicate on the "attrs" field.
func AttrsNEQ(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAttrs), v))
	})
}

// AttrsIn applies the In predicate on the "attrs" field.
func AttrsIn(vs ...string) predicate.ProductSku {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSku(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAttrs), v...))
	})
}

// AttrsNotIn applies the NotIn predicate on the "attrs" field.
func AttrsNotIn(vs ...string) predicate.ProductSku {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSku(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAttrs), v...))
	})
}

// AttrsGT applies the GT predicate on the "attrs" field.
func AttrsGT(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAttrs), v))
	})
}

// AttrsGTE applies the GTE predicate on the "attrs" field.
func AttrsGTE(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAttrs), v))
	})
}

// AttrsLT applies the LT predicate on the "attrs" field.
func AttrsLT(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAttrs), v))
	})
}

// AttrsLTE applies the LTE predicate on the "attrs" field.
func AttrsLTE(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAttrs), v))
	})
}

// AttrsContains applies the Contains predicate on the "attrs" field.
func AttrsContains(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAttrs), v))
	})
}

// AttrsHasPrefix applies the HasPrefix predicate on the "attrs" field.
func AttrsHasPrefix(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAttrs), v))
	})
}

// AttrsHasSuffix applies the HasSuffix predicate on the "attrs" field.
func AttrsHasSuffix(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAttrs), v))
	})
}

// AttrsEqualFold applies the EqualFold predicate on the "attrs" field.
func AttrsEqualFold(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAttrs), v))
	})
}

// AttrsContainsFold applies the ContainsFold predicate on the "attrs" field.
func AttrsContainsFold(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAttrs), v))
	})
}

// BannerURLEQ applies the EQ predicate on the "banner_url" field.
func BannerURLEQ(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBannerURL), v))
	})
}

// BannerURLNEQ applies the NEQ predicate on the "banner_url" field.
func BannerURLNEQ(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBannerURL), v))
	})
}

// BannerURLIn applies the In predicate on the "banner_url" field.
func BannerURLIn(vs ...string) predicate.ProductSku {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSku(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBannerURL), v...))
	})
}

// BannerURLNotIn applies the NotIn predicate on the "banner_url" field.
func BannerURLNotIn(vs ...string) predicate.ProductSku {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSku(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBannerURL), v...))
	})
}

// BannerURLGT applies the GT predicate on the "banner_url" field.
func BannerURLGT(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBannerURL), v))
	})
}

// BannerURLGTE applies the GTE predicate on the "banner_url" field.
func BannerURLGTE(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBannerURL), v))
	})
}

// BannerURLLT applies the LT predicate on the "banner_url" field.
func BannerURLLT(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBannerURL), v))
	})
}

// BannerURLLTE applies the LTE predicate on the "banner_url" field.
func BannerURLLTE(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBannerURL), v))
	})
}

// BannerURLContains applies the Contains predicate on the "banner_url" field.
func BannerURLContains(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBannerURL), v))
	})
}

// BannerURLHasPrefix applies the HasPrefix predicate on the "banner_url" field.
func BannerURLHasPrefix(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBannerURL), v))
	})
}

// BannerURLHasSuffix applies the HasSuffix predicate on the "banner_url" field.
func BannerURLHasSuffix(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBannerURL), v))
	})
}

// BannerURLEqualFold applies the EqualFold predicate on the "banner_url" field.
func BannerURLEqualFold(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBannerURL), v))
	})
}

// BannerURLContainsFold applies the ContainsFold predicate on the "banner_url" field.
func BannerURLContainsFold(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBannerURL), v))
	})
}

// MainURLEQ applies the EQ predicate on the "main_url" field.
func MainURLEQ(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMainURL), v))
	})
}

// MainURLNEQ applies the NEQ predicate on the "main_url" field.
func MainURLNEQ(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMainURL), v))
	})
}

// MainURLIn applies the In predicate on the "main_url" field.
func MainURLIn(vs ...string) predicate.ProductSku {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSku(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMainURL), v...))
	})
}

// MainURLNotIn applies the NotIn predicate on the "main_url" field.
func MainURLNotIn(vs ...string) predicate.ProductSku {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSku(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMainURL), v...))
	})
}

// MainURLGT applies the GT predicate on the "main_url" field.
func MainURLGT(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMainURL), v))
	})
}

// MainURLGTE applies the GTE predicate on the "main_url" field.
func MainURLGTE(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMainURL), v))
	})
}

// MainURLLT applies the LT predicate on the "main_url" field.
func MainURLLT(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMainURL), v))
	})
}

// MainURLLTE applies the LTE predicate on the "main_url" field.
func MainURLLTE(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMainURL), v))
	})
}

// MainURLContains applies the Contains predicate on the "main_url" field.
func MainURLContains(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMainURL), v))
	})
}

// MainURLHasPrefix applies the HasPrefix predicate on the "main_url" field.
func MainURLHasPrefix(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMainURL), v))
	})
}

// MainURLHasSuffix applies the HasSuffix predicate on the "main_url" field.
func MainURLHasSuffix(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMainURL), v))
	})
}

// MainURLEqualFold applies the EqualFold predicate on the "main_url" field.
func MainURLEqualFold(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMainURL), v))
	})
}

// MainURLContainsFold applies the ContainsFold predicate on the "main_url" field.
func MainURLContainsFold(v string) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMainURL), v))
	})
}

// PriceFeeEQ applies the EQ predicate on the "price_fee" field.
func PriceFeeEQ(v int64) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPriceFee), v))
	})
}

// PriceFeeNEQ applies the NEQ predicate on the "price_fee" field.
func PriceFeeNEQ(v int64) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPriceFee), v))
	})
}

// PriceFeeIn applies the In predicate on the "price_fee" field.
func PriceFeeIn(vs ...int64) predicate.ProductSku {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSku(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPriceFee), v...))
	})
}

// PriceFeeNotIn applies the NotIn predicate on the "price_fee" field.
func PriceFeeNotIn(vs ...int64) predicate.ProductSku {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSku(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPriceFee), v...))
	})
}

// PriceFeeGT applies the GT predicate on the "price_fee" field.
func PriceFeeGT(v int64) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPriceFee), v))
	})
}

// PriceFeeGTE applies the GTE predicate on the "price_fee" field.
func PriceFeeGTE(v int64) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPriceFee), v))
	})
}

// PriceFeeLT applies the LT predicate on the "price_fee" field.
func PriceFeeLT(v int64) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPriceFee), v))
	})
}

// PriceFeeLTE applies the LTE predicate on the "price_fee" field.
func PriceFeeLTE(v int64) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPriceFee), v))
	})
}

// PriceScaleEQ applies the EQ predicate on the "price_scale" field.
func PriceScaleEQ(v int8) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPriceScale), v))
	})
}

// PriceScaleNEQ applies the NEQ predicate on the "price_scale" field.
func PriceScaleNEQ(v int8) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPriceScale), v))
	})
}

// PriceScaleIn applies the In predicate on the "price_scale" field.
func PriceScaleIn(vs ...int8) predicate.ProductSku {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSku(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPriceScale), v...))
	})
}

// PriceScaleNotIn applies the NotIn predicate on the "price_scale" field.
func PriceScaleNotIn(vs ...int8) predicate.ProductSku {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSku(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPriceScale), v...))
	})
}

// PriceScaleGT applies the GT predicate on the "price_scale" field.
func PriceScaleGT(v int8) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPriceScale), v))
	})
}

// PriceScaleGTE applies the GTE predicate on the "price_scale" field.
func PriceScaleGTE(v int8) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPriceScale), v))
	})
}

// PriceScaleLT applies the LT predicate on the "price_scale" field.
func PriceScaleLT(v int8) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPriceScale), v))
	})
}

// PriceScaleLTE applies the LTE predicate on the "price_scale" field.
func PriceScaleLTE(v int8) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPriceScale), v))
	})
}

// MarketPriceFeeEQ applies the EQ predicate on the "market_price_fee" field.
func MarketPriceFeeEQ(v int64) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMarketPriceFee), v))
	})
}

// MarketPriceFeeNEQ applies the NEQ predicate on the "market_price_fee" field.
func MarketPriceFeeNEQ(v int64) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMarketPriceFee), v))
	})
}

// MarketPriceFeeIn applies the In predicate on the "market_price_fee" field.
func MarketPriceFeeIn(vs ...int64) predicate.ProductSku {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSku(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMarketPriceFee), v...))
	})
}

// MarketPriceFeeNotIn applies the NotIn predicate on the "market_price_fee" field.
func MarketPriceFeeNotIn(vs ...int64) predicate.ProductSku {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSku(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMarketPriceFee), v...))
	})
}

// MarketPriceFeeGT applies the GT predicate on the "market_price_fee" field.
func MarketPriceFeeGT(v int64) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMarketPriceFee), v))
	})
}

// MarketPriceFeeGTE applies the GTE predicate on the "market_price_fee" field.
func MarketPriceFeeGTE(v int64) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMarketPriceFee), v))
	})
}

// MarketPriceFeeLT applies the LT predicate on the "market_price_fee" field.
func MarketPriceFeeLT(v int64) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMarketPriceFee), v))
	})
}

// MarketPriceFeeLTE applies the LTE predicate on the "market_price_fee" field.
func MarketPriceFeeLTE(v int64) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMarketPriceFee), v))
	})
}

// MarketPriceScaleEQ applies the EQ predicate on the "market_price_scale" field.
func MarketPriceScaleEQ(v int8) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMarketPriceScale), v))
	})
}

// MarketPriceScaleNEQ applies the NEQ predicate on the "market_price_scale" field.
func MarketPriceScaleNEQ(v int8) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMarketPriceScale), v))
	})
}

// MarketPriceScaleIn applies the In predicate on the "market_price_scale" field.
func MarketPriceScaleIn(vs ...int8) predicate.ProductSku {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSku(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMarketPriceScale), v...))
	})
}

// MarketPriceScaleNotIn applies the NotIn predicate on the "market_price_scale" field.
func MarketPriceScaleNotIn(vs ...int8) predicate.ProductSku {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSku(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMarketPriceScale), v...))
	})
}

// MarketPriceScaleGT applies the GT predicate on the "market_price_scale" field.
func MarketPriceScaleGT(v int8) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMarketPriceScale), v))
	})
}

// MarketPriceScaleGTE applies the GTE predicate on the "market_price_scale" field.
func MarketPriceScaleGTE(v int8) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMarketPriceScale), v))
	})
}

// MarketPriceScaleLT applies the LT predicate on the "market_price_scale" field.
func MarketPriceScaleLT(v int8) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMarketPriceScale), v))
	})
}

// MarketPriceScaleLTE applies the LTE predicate on the "market_price_scale" field.
func MarketPriceScaleLTE(v int8) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMarketPriceScale), v))
	})
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v time.Time) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v time.Time) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...time.Time) predicate.ProductSku {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSku(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateAt), v...))
	})
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...time.Time) predicate.ProductSku {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSku(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateAt), v...))
	})
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v time.Time) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateAt), v))
	})
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v time.Time) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateAt), v))
	})
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v time.Time) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateAt), v))
	})
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v time.Time) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateAt), v))
	})
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v time.Time) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v time.Time) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...time.Time) predicate.ProductSku {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSku(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...time.Time) predicate.ProductSku {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSku(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v time.Time) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v time.Time) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v time.Time) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v time.Time) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateAt), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int8) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int8) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int8) predicate.ProductSku {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSku(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int8) predicate.ProductSku {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSku(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int8) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int8) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int8) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int8) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProductSku) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProductSku) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProductSku) predicate.ProductSku {
	return predicate.ProductSku(func(s *sql.Selector) {
		p(s.Not())
	})
}
