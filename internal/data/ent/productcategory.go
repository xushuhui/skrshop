// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"skrshop/internal/data/ent/productcategory"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ProductCategory is the model entity for the ProductCategory schema.
type ProductCategory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 父 id
	Pid int64 `json:"pid,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// 描述
	Desc string `json:"desc,omitempty"`
	// PicURL holds the value of the "pic_url" field.
	PicURL string `json:"pic_url,omitempty"`
	// 分类地址 {pid}-{child_id}-...
	Path string `json:"path,omitempty"`
	// 状态 1:enable, 0:disable, -1:deleted
	Status int8 `json:"status,omitempty"`
	// 创建时间
	CreateAt time.Time `json:"create_at,omitempty"`
	// 更新时间
	UpdateAt time.Time `json:"update_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductCategory) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case productcategory.FieldID, productcategory.FieldPid, productcategory.FieldStatus:
			values[i] = &sql.NullInt64{}
		case productcategory.FieldName, productcategory.FieldDesc, productcategory.FieldPicURL, productcategory.FieldPath:
			values[i] = &sql.NullString{}
		case productcategory.FieldCreateAt, productcategory.FieldUpdateAt:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProductCategory", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductCategory fields.
func (pc *ProductCategory) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productcategory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pc.ID = int(value.Int64)
		case productcategory.FieldPid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pid", values[i])
			} else if value.Valid {
				pc.Pid = value.Int64
			}
		case productcategory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pc.Name = value.String
			}
		case productcategory.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				pc.Desc = value.String
			}
		case productcategory.FieldPicURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pic_url", values[i])
			} else if value.Valid {
				pc.PicURL = value.String
			}
		case productcategory.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				pc.Path = value.String
			}
		case productcategory.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pc.Status = int8(value.Int64)
			}
		case productcategory.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				pc.CreateAt = value.Time
			}
		case productcategory.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				pc.UpdateAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ProductCategory.
// Note that you need to call ProductCategory.Unwrap() before calling this method if this ProductCategory
// was returned from a transaction, and the transaction was committed or rolled back.
func (pc *ProductCategory) Update() *ProductCategoryUpdateOne {
	return (&ProductCategoryClient{config: pc.config}).UpdateOne(pc)
}

// Unwrap unwraps the ProductCategory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pc *ProductCategory) Unwrap() *ProductCategory {
	tx, ok := pc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductCategory is not a transactional entity")
	}
	pc.config.driver = tx.drv
	return pc
}

// String implements the fmt.Stringer.
func (pc *ProductCategory) String() string {
	var builder strings.Builder
	builder.WriteString("ProductCategory(")
	builder.WriteString(fmt.Sprintf("id=%v", pc.ID))
	builder.WriteString(", pid=")
	builder.WriteString(fmt.Sprintf("%v", pc.Pid))
	builder.WriteString(", name=")
	builder.WriteString(pc.Name)
	builder.WriteString(", desc=")
	builder.WriteString(pc.Desc)
	builder.WriteString(", pic_url=")
	builder.WriteString(pc.PicURL)
	builder.WriteString(", path=")
	builder.WriteString(pc.Path)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", pc.Status))
	builder.WriteString(", create_at=")
	builder.WriteString(pc.CreateAt.Format(time.ANSIC))
	builder.WriteString(", update_at=")
	builder.WriteString(pc.UpdateAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProductCategories is a parsable slice of ProductCategory.
type ProductCategories []*ProductCategory

func (pc ProductCategories) config(cfg config) {
	for _i := range pc {
		pc[_i].config = cfg
	}
}
