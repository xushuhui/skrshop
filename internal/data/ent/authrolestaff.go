// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"skrshop/internal/data/ent/authrolestaff"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// AuthRoleStaff is the model entity for the AuthRoleStaff schema.
type AuthRoleStaff struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 状态 1:enable, 0:disable, -1:deleted
	Status int8 `json:"status,omitempty"`
	// 创建时间
	CreateAt time.Time `json:"create_at,omitempty"`
	// 更新时间
	UpdateAt time.Time `json:"update_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuthRoleStaff) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case authrolestaff.FieldID, authrolestaff.FieldStatus:
			values[i] = &sql.NullInt64{}
		case authrolestaff.FieldCreateAt, authrolestaff.FieldUpdateAt:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type AuthRoleStaff", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuthRoleStaff fields.
func (ars *AuthRoleStaff) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authrolestaff.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ars.ID = int(value.Int64)
		case authrolestaff.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ars.Status = int8(value.Int64)
			}
		case authrolestaff.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				ars.CreateAt = value.Time
			}
		case authrolestaff.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				ars.UpdateAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AuthRoleStaff.
// Note that you need to call AuthRoleStaff.Unwrap() before calling this method if this AuthRoleStaff
// was returned from a transaction, and the transaction was committed or rolled back.
func (ars *AuthRoleStaff) Update() *AuthRoleStaffUpdateOne {
	return (&AuthRoleStaffClient{config: ars.config}).UpdateOne(ars)
}

// Unwrap unwraps the AuthRoleStaff entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ars *AuthRoleStaff) Unwrap() *AuthRoleStaff {
	tx, ok := ars.config.driver.(*txDriver)
	if !ok {
		panic("ent: AuthRoleStaff is not a transactional entity")
	}
	ars.config.driver = tx.drv
	return ars
}

// String implements the fmt.Stringer.
func (ars *AuthRoleStaff) String() string {
	var builder strings.Builder
	builder.WriteString("AuthRoleStaff(")
	builder.WriteString(fmt.Sprintf("id=%v", ars.ID))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", ars.Status))
	builder.WriteString(", create_at=")
	builder.WriteString(ars.CreateAt.Format(time.ANSIC))
	builder.WriteString(", update_at=")
	builder.WriteString(ars.UpdateAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AuthRoleStaffs is a parsable slice of AuthRoleStaff.
type AuthRoleStaffs []*AuthRoleStaff

func (ars AuthRoleStaffs) config(cfg config) {
	for _i := range ars {
		ars[_i].config = cfg
	}
}
