// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"skrshop/internal/data/ent/authmsmenu"
	"skrshop/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AuthMsMenuUpdate is the builder for updating AuthMsMenu entities.
type AuthMsMenuUpdate struct {
	config
	hooks    []Hook
	mutation *AuthMsMenuMutation
}

// Where adds a new predicate for the AuthMsMenuUpdate builder.
func (ammu *AuthMsMenuUpdate) Where(ps ...predicate.AuthMsMenu) *AuthMsMenuUpdate {
	ammu.mutation.predicates = append(ammu.mutation.predicates, ps...)
	return ammu
}

// SetStatus sets the "status" field.
func (ammu *AuthMsMenuUpdate) SetStatus(i int8) *AuthMsMenuUpdate {
	ammu.mutation.ResetStatus()
	ammu.mutation.SetStatus(i)
	return ammu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ammu *AuthMsMenuUpdate) SetNillableStatus(i *int8) *AuthMsMenuUpdate {
	if i != nil {
		ammu.SetStatus(*i)
	}
	return ammu
}

// AddStatus adds i to the "status" field.
func (ammu *AuthMsMenuUpdate) AddStatus(i int8) *AuthMsMenuUpdate {
	ammu.mutation.AddStatus(i)
	return ammu
}

// SetCreateAt sets the "create_at" field.
func (ammu *AuthMsMenuUpdate) SetCreateAt(t time.Time) *AuthMsMenuUpdate {
	ammu.mutation.SetCreateAt(t)
	return ammu
}

// SetUpdateAt sets the "update_at" field.
func (ammu *AuthMsMenuUpdate) SetUpdateAt(t time.Time) *AuthMsMenuUpdate {
	ammu.mutation.SetUpdateAt(t)
	return ammu
}

// Mutation returns the AuthMsMenuMutation object of the builder.
func (ammu *AuthMsMenuUpdate) Mutation() *AuthMsMenuMutation {
	return ammu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ammu *AuthMsMenuUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ammu.hooks) == 0 {
		affected, err = ammu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuthMsMenuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ammu.mutation = mutation
			affected, err = ammu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ammu.hooks) - 1; i >= 0; i-- {
			mut = ammu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ammu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ammu *AuthMsMenuUpdate) SaveX(ctx context.Context) int {
	affected, err := ammu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ammu *AuthMsMenuUpdate) Exec(ctx context.Context) error {
	_, err := ammu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ammu *AuthMsMenuUpdate) ExecX(ctx context.Context) {
	if err := ammu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ammu *AuthMsMenuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   authmsmenu.Table,
			Columns: authmsmenu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: authmsmenu.FieldID,
			},
		},
	}
	if ps := ammu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ammu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: authmsmenu.FieldStatus,
		})
	}
	if value, ok := ammu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: authmsmenu.FieldStatus,
		})
	}
	if value, ok := ammu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authmsmenu.FieldCreateAt,
		})
	}
	if value, ok := ammu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authmsmenu.FieldUpdateAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ammu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authmsmenu.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AuthMsMenuUpdateOne is the builder for updating a single AuthMsMenu entity.
type AuthMsMenuUpdateOne struct {
	config
	hooks    []Hook
	mutation *AuthMsMenuMutation
}

// SetStatus sets the "status" field.
func (ammuo *AuthMsMenuUpdateOne) SetStatus(i int8) *AuthMsMenuUpdateOne {
	ammuo.mutation.ResetStatus()
	ammuo.mutation.SetStatus(i)
	return ammuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ammuo *AuthMsMenuUpdateOne) SetNillableStatus(i *int8) *AuthMsMenuUpdateOne {
	if i != nil {
		ammuo.SetStatus(*i)
	}
	return ammuo
}

// AddStatus adds i to the "status" field.
func (ammuo *AuthMsMenuUpdateOne) AddStatus(i int8) *AuthMsMenuUpdateOne {
	ammuo.mutation.AddStatus(i)
	return ammuo
}

// SetCreateAt sets the "create_at" field.
func (ammuo *AuthMsMenuUpdateOne) SetCreateAt(t time.Time) *AuthMsMenuUpdateOne {
	ammuo.mutation.SetCreateAt(t)
	return ammuo
}

// SetUpdateAt sets the "update_at" field.
func (ammuo *AuthMsMenuUpdateOne) SetUpdateAt(t time.Time) *AuthMsMenuUpdateOne {
	ammuo.mutation.SetUpdateAt(t)
	return ammuo
}

// Mutation returns the AuthMsMenuMutation object of the builder.
func (ammuo *AuthMsMenuUpdateOne) Mutation() *AuthMsMenuMutation {
	return ammuo.mutation
}

// Save executes the query and returns the updated AuthMsMenu entity.
func (ammuo *AuthMsMenuUpdateOne) Save(ctx context.Context) (*AuthMsMenu, error) {
	var (
		err  error
		node *AuthMsMenu
	)
	if len(ammuo.hooks) == 0 {
		node, err = ammuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuthMsMenuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ammuo.mutation = mutation
			node, err = ammuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ammuo.hooks) - 1; i >= 0; i-- {
			mut = ammuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ammuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ammuo *AuthMsMenuUpdateOne) SaveX(ctx context.Context) *AuthMsMenu {
	node, err := ammuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ammuo *AuthMsMenuUpdateOne) Exec(ctx context.Context) error {
	_, err := ammuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ammuo *AuthMsMenuUpdateOne) ExecX(ctx context.Context) {
	if err := ammuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ammuo *AuthMsMenuUpdateOne) sqlSave(ctx context.Context) (_node *AuthMsMenu, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   authmsmenu.Table,
			Columns: authmsmenu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: authmsmenu.FieldID,
			},
		},
	}
	id, ok := ammuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AuthMsMenu.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := ammuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ammuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: authmsmenu.FieldStatus,
		})
	}
	if value, ok := ammuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: authmsmenu.FieldStatus,
		})
	}
	if value, ok := ammuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authmsmenu.FieldCreateAt,
		})
	}
	if value, ok := ammuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authmsmenu.FieldUpdateAt,
		})
	}
	_node = &AuthMsMenu{config: ammuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ammuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authmsmenu.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
