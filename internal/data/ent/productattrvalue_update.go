// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"skrshop/internal/data/ent/predicate"
	"skrshop/internal/data/ent/productattrvalue"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductAttrValueUpdate is the builder for updating ProductAttrValue entities.
type ProductAttrValueUpdate struct {
	config
	hooks    []Hook
	mutation *ProductAttrValueMutation
}

// Where adds a new predicate for the ProductAttrValueUpdate builder.
func (pavu *ProductAttrValueUpdate) Where(ps ...predicate.ProductAttrValue) *ProductAttrValueUpdate {
	pavu.mutation.predicates = append(pavu.mutation.predicates, ps...)
	return pavu
}

// SetStatus sets the "status" field.
func (pavu *ProductAttrValueUpdate) SetStatus(i int8) *ProductAttrValueUpdate {
	pavu.mutation.ResetStatus()
	pavu.mutation.SetStatus(i)
	return pavu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pavu *ProductAttrValueUpdate) SetNillableStatus(i *int8) *ProductAttrValueUpdate {
	if i != nil {
		pavu.SetStatus(*i)
	}
	return pavu
}

// AddStatus adds i to the "status" field.
func (pavu *ProductAttrValueUpdate) AddStatus(i int8) *ProductAttrValueUpdate {
	pavu.mutation.AddStatus(i)
	return pavu
}

// SetCreateAt sets the "create_at" field.
func (pavu *ProductAttrValueUpdate) SetCreateAt(t time.Time) *ProductAttrValueUpdate {
	pavu.mutation.SetCreateAt(t)
	return pavu
}

// SetUpdateAt sets the "update_at" field.
func (pavu *ProductAttrValueUpdate) SetUpdateAt(t time.Time) *ProductAttrValueUpdate {
	pavu.mutation.SetUpdateAt(t)
	return pavu
}

// Mutation returns the ProductAttrValueMutation object of the builder.
func (pavu *ProductAttrValueUpdate) Mutation() *ProductAttrValueMutation {
	return pavu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pavu *ProductAttrValueUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pavu.hooks) == 0 {
		affected, err = pavu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductAttrValueMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pavu.mutation = mutation
			affected, err = pavu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pavu.hooks) - 1; i >= 0; i-- {
			mut = pavu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pavu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pavu *ProductAttrValueUpdate) SaveX(ctx context.Context) int {
	affected, err := pavu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pavu *ProductAttrValueUpdate) Exec(ctx context.Context) error {
	_, err := pavu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pavu *ProductAttrValueUpdate) ExecX(ctx context.Context) {
	if err := pavu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pavu *ProductAttrValueUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productattrvalue.Table,
			Columns: productattrvalue.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productattrvalue.FieldID,
			},
		},
	}
	if ps := pavu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pavu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productattrvalue.FieldStatus,
		})
	}
	if value, ok := pavu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productattrvalue.FieldStatus,
		})
	}
	if value, ok := pavu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productattrvalue.FieldCreateAt,
		})
	}
	if value, ok := pavu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productattrvalue.FieldUpdateAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pavu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productattrvalue.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProductAttrValueUpdateOne is the builder for updating a single ProductAttrValue entity.
type ProductAttrValueUpdateOne struct {
	config
	hooks    []Hook
	mutation *ProductAttrValueMutation
}

// SetStatus sets the "status" field.
func (pavuo *ProductAttrValueUpdateOne) SetStatus(i int8) *ProductAttrValueUpdateOne {
	pavuo.mutation.ResetStatus()
	pavuo.mutation.SetStatus(i)
	return pavuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pavuo *ProductAttrValueUpdateOne) SetNillableStatus(i *int8) *ProductAttrValueUpdateOne {
	if i != nil {
		pavuo.SetStatus(*i)
	}
	return pavuo
}

// AddStatus adds i to the "status" field.
func (pavuo *ProductAttrValueUpdateOne) AddStatus(i int8) *ProductAttrValueUpdateOne {
	pavuo.mutation.AddStatus(i)
	return pavuo
}

// SetCreateAt sets the "create_at" field.
func (pavuo *ProductAttrValueUpdateOne) SetCreateAt(t time.Time) *ProductAttrValueUpdateOne {
	pavuo.mutation.SetCreateAt(t)
	return pavuo
}

// SetUpdateAt sets the "update_at" field.
func (pavuo *ProductAttrValueUpdateOne) SetUpdateAt(t time.Time) *ProductAttrValueUpdateOne {
	pavuo.mutation.SetUpdateAt(t)
	return pavuo
}

// Mutation returns the ProductAttrValueMutation object of the builder.
func (pavuo *ProductAttrValueUpdateOne) Mutation() *ProductAttrValueMutation {
	return pavuo.mutation
}

// Save executes the query and returns the updated ProductAttrValue entity.
func (pavuo *ProductAttrValueUpdateOne) Save(ctx context.Context) (*ProductAttrValue, error) {
	var (
		err  error
		node *ProductAttrValue
	)
	if len(pavuo.hooks) == 0 {
		node, err = pavuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductAttrValueMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pavuo.mutation = mutation
			node, err = pavuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pavuo.hooks) - 1; i >= 0; i-- {
			mut = pavuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pavuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pavuo *ProductAttrValueUpdateOne) SaveX(ctx context.Context) *ProductAttrValue {
	node, err := pavuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pavuo *ProductAttrValueUpdateOne) Exec(ctx context.Context) error {
	_, err := pavuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pavuo *ProductAttrValueUpdateOne) ExecX(ctx context.Context) {
	if err := pavuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pavuo *ProductAttrValueUpdateOne) sqlSave(ctx context.Context) (_node *ProductAttrValue, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productattrvalue.Table,
			Columns: productattrvalue.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productattrvalue.FieldID,
			},
		},
	}
	id, ok := pavuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProductAttrValue.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := pavuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pavuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productattrvalue.FieldStatus,
		})
	}
	if value, ok := pavuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productattrvalue.FieldStatus,
		})
	}
	if value, ok := pavuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productattrvalue.FieldCreateAt,
		})
	}
	if value, ok := pavuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productattrvalue.FieldUpdateAt,
		})
	}
	_node = &ProductAttrValue{config: pavuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pavuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productattrvalue.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
