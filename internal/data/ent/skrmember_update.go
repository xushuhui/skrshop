// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"skrshop/internal/data/ent/predicate"
	"skrshop/internal/data/ent/skrmember"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SkrMemberUpdate is the builder for updating SkrMember entities.
type SkrMemberUpdate struct {
	config
	hooks    []Hook
	mutation *SkrMemberMutation
}

// Where adds a new predicate for the SkrMemberUpdate builder.
func (smu *SkrMemberUpdate) Where(ps ...predicate.SkrMember) *SkrMemberUpdate {
	smu.mutation.predicates = append(smu.mutation.predicates, ps...)
	return smu
}

// SetUID sets the "uid" field.
func (smu *SkrMemberUpdate) SetUID(i int64) *SkrMemberUpdate {
	smu.mutation.ResetUID()
	smu.mutation.SetUID(i)
	return smu
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (smu *SkrMemberUpdate) SetNillableUID(i *int64) *SkrMemberUpdate {
	if i != nil {
		smu.SetUID(*i)
	}
	return smu
}

// AddUID adds i to the "uid" field.
func (smu *SkrMemberUpdate) AddUID(i int64) *SkrMemberUpdate {
	smu.mutation.AddUID(i)
	return smu
}

// SetNickname sets the "nickname" field.
func (smu *SkrMemberUpdate) SetNickname(s string) *SkrMemberUpdate {
	smu.mutation.SetNickname(s)
	return smu
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (smu *SkrMemberUpdate) SetNillableNickname(s *string) *SkrMemberUpdate {
	if s != nil {
		smu.SetNickname(*s)
	}
	return smu
}

// SetAvatar sets the "avatar" field.
func (smu *SkrMemberUpdate) SetAvatar(s string) *SkrMemberUpdate {
	smu.mutation.SetAvatar(s)
	return smu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (smu *SkrMemberUpdate) SetNillableAvatar(s *string) *SkrMemberUpdate {
	if s != nil {
		smu.SetAvatar(*s)
	}
	return smu
}

// SetGender sets the "gender" field.
func (smu *SkrMemberUpdate) SetGender(i int8) *SkrMemberUpdate {
	smu.mutation.ResetGender()
	smu.mutation.SetGender(i)
	return smu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (smu *SkrMemberUpdate) SetNillableGender(i *int8) *SkrMemberUpdate {
	if i != nil {
		smu.SetGender(*i)
	}
	return smu
}

// AddGender adds i to the "gender" field.
func (smu *SkrMemberUpdate) AddGender(i int8) *SkrMemberUpdate {
	smu.mutation.AddGender(i)
	return smu
}

// SetRole sets the "role" field.
func (smu *SkrMemberUpdate) SetRole(i int8) *SkrMemberUpdate {
	smu.mutation.ResetRole()
	smu.mutation.SetRole(i)
	return smu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (smu *SkrMemberUpdate) SetNillableRole(i *int8) *SkrMemberUpdate {
	if i != nil {
		smu.SetRole(*i)
	}
	return smu
}

// AddRole adds i to the "role" field.
func (smu *SkrMemberUpdate) AddRole(i int8) *SkrMemberUpdate {
	smu.mutation.AddRole(i)
	return smu
}

// SetCreateAt sets the "create_at" field.
func (smu *SkrMemberUpdate) SetCreateAt(t time.Time) *SkrMemberUpdate {
	smu.mutation.SetCreateAt(t)
	return smu
}

// SetUpdateAt sets the "update_at" field.
func (smu *SkrMemberUpdate) SetUpdateAt(t time.Time) *SkrMemberUpdate {
	smu.mutation.SetUpdateAt(t)
	return smu
}

// Mutation returns the SkrMemberMutation object of the builder.
func (smu *SkrMemberUpdate) Mutation() *SkrMemberMutation {
	return smu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (smu *SkrMemberUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(smu.hooks) == 0 {
		if err = smu.check(); err != nil {
			return 0, err
		}
		affected, err = smu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SkrMemberMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = smu.check(); err != nil {
				return 0, err
			}
			smu.mutation = mutation
			affected, err = smu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(smu.hooks) - 1; i >= 0; i-- {
			mut = smu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, smu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (smu *SkrMemberUpdate) SaveX(ctx context.Context) int {
	affected, err := smu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (smu *SkrMemberUpdate) Exec(ctx context.Context) error {
	_, err := smu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smu *SkrMemberUpdate) ExecX(ctx context.Context) {
	if err := smu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smu *SkrMemberUpdate) check() error {
	if v, ok := smu.mutation.UID(); ok {
		if err := skrmember.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf("ent: validator failed for field \"uid\": %w", err)}
		}
	}
	if v, ok := smu.mutation.Nickname(); ok {
		if err := skrmember.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf("ent: validator failed for field \"nickname\": %w", err)}
		}
	}
	if v, ok := smu.mutation.Avatar(); ok {
		if err := skrmember.AvatarValidator(v); err != nil {
			return &ValidationError{Name: "avatar", err: fmt.Errorf("ent: validator failed for field \"avatar\": %w", err)}
		}
	}
	return nil
}

func (smu *SkrMemberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   skrmember.Table,
			Columns: skrmember.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: skrmember.FieldID,
			},
		},
	}
	if ps := smu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smu.mutation.UID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: skrmember.FieldUID,
		})
	}
	if value, ok := smu.mutation.AddedUID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: skrmember.FieldUID,
		})
	}
	if value, ok := smu.mutation.Nickname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: skrmember.FieldNickname,
		})
	}
	if value, ok := smu.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: skrmember.FieldAvatar,
		})
	}
	if value, ok := smu.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: skrmember.FieldGender,
		})
	}
	if value, ok := smu.mutation.AddedGender(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: skrmember.FieldGender,
		})
	}
	if value, ok := smu.mutation.Role(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: skrmember.FieldRole,
		})
	}
	if value, ok := smu.mutation.AddedRole(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: skrmember.FieldRole,
		})
	}
	if value, ok := smu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: skrmember.FieldCreateAt,
		})
	}
	if value, ok := smu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: skrmember.FieldUpdateAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, smu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{skrmember.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SkrMemberUpdateOne is the builder for updating a single SkrMember entity.
type SkrMemberUpdateOne struct {
	config
	hooks    []Hook
	mutation *SkrMemberMutation
}

// SetUID sets the "uid" field.
func (smuo *SkrMemberUpdateOne) SetUID(i int64) *SkrMemberUpdateOne {
	smuo.mutation.ResetUID()
	smuo.mutation.SetUID(i)
	return smuo
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (smuo *SkrMemberUpdateOne) SetNillableUID(i *int64) *SkrMemberUpdateOne {
	if i != nil {
		smuo.SetUID(*i)
	}
	return smuo
}

// AddUID adds i to the "uid" field.
func (smuo *SkrMemberUpdateOne) AddUID(i int64) *SkrMemberUpdateOne {
	smuo.mutation.AddUID(i)
	return smuo
}

// SetNickname sets the "nickname" field.
func (smuo *SkrMemberUpdateOne) SetNickname(s string) *SkrMemberUpdateOne {
	smuo.mutation.SetNickname(s)
	return smuo
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (smuo *SkrMemberUpdateOne) SetNillableNickname(s *string) *SkrMemberUpdateOne {
	if s != nil {
		smuo.SetNickname(*s)
	}
	return smuo
}

// SetAvatar sets the "avatar" field.
func (smuo *SkrMemberUpdateOne) SetAvatar(s string) *SkrMemberUpdateOne {
	smuo.mutation.SetAvatar(s)
	return smuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (smuo *SkrMemberUpdateOne) SetNillableAvatar(s *string) *SkrMemberUpdateOne {
	if s != nil {
		smuo.SetAvatar(*s)
	}
	return smuo
}

// SetGender sets the "gender" field.
func (smuo *SkrMemberUpdateOne) SetGender(i int8) *SkrMemberUpdateOne {
	smuo.mutation.ResetGender()
	smuo.mutation.SetGender(i)
	return smuo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (smuo *SkrMemberUpdateOne) SetNillableGender(i *int8) *SkrMemberUpdateOne {
	if i != nil {
		smuo.SetGender(*i)
	}
	return smuo
}

// AddGender adds i to the "gender" field.
func (smuo *SkrMemberUpdateOne) AddGender(i int8) *SkrMemberUpdateOne {
	smuo.mutation.AddGender(i)
	return smuo
}

// SetRole sets the "role" field.
func (smuo *SkrMemberUpdateOne) SetRole(i int8) *SkrMemberUpdateOne {
	smuo.mutation.ResetRole()
	smuo.mutation.SetRole(i)
	return smuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (smuo *SkrMemberUpdateOne) SetNillableRole(i *int8) *SkrMemberUpdateOne {
	if i != nil {
		smuo.SetRole(*i)
	}
	return smuo
}

// AddRole adds i to the "role" field.
func (smuo *SkrMemberUpdateOne) AddRole(i int8) *SkrMemberUpdateOne {
	smuo.mutation.AddRole(i)
	return smuo
}

// SetCreateAt sets the "create_at" field.
func (smuo *SkrMemberUpdateOne) SetCreateAt(t time.Time) *SkrMemberUpdateOne {
	smuo.mutation.SetCreateAt(t)
	return smuo
}

// SetUpdateAt sets the "update_at" field.
func (smuo *SkrMemberUpdateOne) SetUpdateAt(t time.Time) *SkrMemberUpdateOne {
	smuo.mutation.SetUpdateAt(t)
	return smuo
}

// Mutation returns the SkrMemberMutation object of the builder.
func (smuo *SkrMemberUpdateOne) Mutation() *SkrMemberMutation {
	return smuo.mutation
}

// Save executes the query and returns the updated SkrMember entity.
func (smuo *SkrMemberUpdateOne) Save(ctx context.Context) (*SkrMember, error) {
	var (
		err  error
		node *SkrMember
	)
	if len(smuo.hooks) == 0 {
		if err = smuo.check(); err != nil {
			return nil, err
		}
		node, err = smuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SkrMemberMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = smuo.check(); err != nil {
				return nil, err
			}
			smuo.mutation = mutation
			node, err = smuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(smuo.hooks) - 1; i >= 0; i-- {
			mut = smuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, smuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (smuo *SkrMemberUpdateOne) SaveX(ctx context.Context) *SkrMember {
	node, err := smuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (smuo *SkrMemberUpdateOne) Exec(ctx context.Context) error {
	_, err := smuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smuo *SkrMemberUpdateOne) ExecX(ctx context.Context) {
	if err := smuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smuo *SkrMemberUpdateOne) check() error {
	if v, ok := smuo.mutation.UID(); ok {
		if err := skrmember.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf("ent: validator failed for field \"uid\": %w", err)}
		}
	}
	if v, ok := smuo.mutation.Nickname(); ok {
		if err := skrmember.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf("ent: validator failed for field \"nickname\": %w", err)}
		}
	}
	if v, ok := smuo.mutation.Avatar(); ok {
		if err := skrmember.AvatarValidator(v); err != nil {
			return &ValidationError{Name: "avatar", err: fmt.Errorf("ent: validator failed for field \"avatar\": %w", err)}
		}
	}
	return nil
}

func (smuo *SkrMemberUpdateOne) sqlSave(ctx context.Context) (_node *SkrMember, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   skrmember.Table,
			Columns: skrmember.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: skrmember.FieldID,
			},
		},
	}
	id, ok := smuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SkrMember.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := smuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smuo.mutation.UID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: skrmember.FieldUID,
		})
	}
	if value, ok := smuo.mutation.AddedUID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: skrmember.FieldUID,
		})
	}
	if value, ok := smuo.mutation.Nickname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: skrmember.FieldNickname,
		})
	}
	if value, ok := smuo.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: skrmember.FieldAvatar,
		})
	}
	if value, ok := smuo.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: skrmember.FieldGender,
		})
	}
	if value, ok := smuo.mutation.AddedGender(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: skrmember.FieldGender,
		})
	}
	if value, ok := smuo.mutation.Role(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: skrmember.FieldRole,
		})
	}
	if value, ok := smuo.mutation.AddedRole(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: skrmember.FieldRole,
		})
	}
	if value, ok := smuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: skrmember.FieldCreateAt,
		})
	}
	if value, ok := smuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: skrmember.FieldUpdateAt,
		})
	}
	_node = &SkrMember{config: smuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, smuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{skrmember.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
