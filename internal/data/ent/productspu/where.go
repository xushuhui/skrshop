// Code generated by entc, DO NOT EDIT.

package productspu

import (
	"skrshop/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// BrandID applies equality check predicate on the "brand_id" field. It's identical to BrandIDEQ.
func BrandID(v int64) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBrandID), v))
	})
}

// CategoryID applies equality check predicate on the "category_id" field. It's identical to CategoryIDEQ.
func CategoryID(v int64) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCategoryID), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Desc applies equality check predicate on the "desc" field. It's identical to DescEQ.
func Desc(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDesc), v))
	})
}

// SellingPoint applies equality check predicate on the "selling_point" field. It's identical to SellingPointEQ.
func SellingPoint(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSellingPoint), v))
	})
}

// Unit applies equality check predicate on the "unit" field. It's identical to UnitEQ.
func Unit(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnit), v))
	})
}

// BannerURL applies equality check predicate on the "banner_url" field. It's identical to BannerURLEQ.
func BannerURL(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBannerURL), v))
	})
}

// MainURL applies equality check predicate on the "main_url" field. It's identical to MainURLEQ.
func MainURL(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMainURL), v))
	})
}

// PriceFee applies equality check predicate on the "price_fee" field. It's identical to PriceFeeEQ.
func PriceFee(v int64) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPriceFee), v))
	})
}

// PriceScale applies equality check predicate on the "price_scale" field. It's identical to PriceScaleEQ.
func PriceScale(v int8) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPriceScale), v))
	})
}

// MarketPriceFee applies equality check predicate on the "market_price_fee" field. It's identical to MarketPriceFeeEQ.
func MarketPriceFee(v int64) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMarketPriceFee), v))
	})
}

// MarketPriceScale applies equality check predicate on the "market_price_scale" field. It's identical to MarketPriceScaleEQ.
func MarketPriceScale(v int8) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMarketPriceScale), v))
	})
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v time.Time) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v time.Time) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int8) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// BrandIDEQ applies the EQ predicate on the "brand_id" field.
func BrandIDEQ(v int64) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBrandID), v))
	})
}

// BrandIDNEQ applies the NEQ predicate on the "brand_id" field.
func BrandIDNEQ(v int64) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBrandID), v))
	})
}

// BrandIDIn applies the In predicate on the "brand_id" field.
func BrandIDIn(vs ...int64) predicate.ProductSpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBrandID), v...))
	})
}

// BrandIDNotIn applies the NotIn predicate on the "brand_id" field.
func BrandIDNotIn(vs ...int64) predicate.ProductSpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBrandID), v...))
	})
}

// BrandIDGT applies the GT predicate on the "brand_id" field.
func BrandIDGT(v int64) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBrandID), v))
	})
}

// BrandIDGTE applies the GTE predicate on the "brand_id" field.
func BrandIDGTE(v int64) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBrandID), v))
	})
}

// BrandIDLT applies the LT predicate on the "brand_id" field.
func BrandIDLT(v int64) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBrandID), v))
	})
}

// BrandIDLTE applies the LTE predicate on the "brand_id" field.
func BrandIDLTE(v int64) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBrandID), v))
	})
}

// CategoryIDEQ applies the EQ predicate on the "category_id" field.
func CategoryIDEQ(v int64) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCategoryID), v))
	})
}

// CategoryIDNEQ applies the NEQ predicate on the "category_id" field.
func CategoryIDNEQ(v int64) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCategoryID), v))
	})
}

// CategoryIDIn applies the In predicate on the "category_id" field.
func CategoryIDIn(vs ...int64) predicate.ProductSpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCategoryID), v...))
	})
}

// CategoryIDNotIn applies the NotIn predicate on the "category_id" field.
func CategoryIDNotIn(vs ...int64) predicate.ProductSpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCategoryID), v...))
	})
}

// CategoryIDGT applies the GT predicate on the "category_id" field.
func CategoryIDGT(v int64) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCategoryID), v))
	})
}

// CategoryIDGTE applies the GTE predicate on the "category_id" field.
func CategoryIDGTE(v int64) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCategoryID), v))
	})
}

// CategoryIDLT applies the LT predicate on the "category_id" field.
func CategoryIDLT(v int64) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCategoryID), v))
	})
}

// CategoryIDLTE applies the LTE predicate on the "category_id" field.
func CategoryIDLTE(v int64) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCategoryID), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ProductSpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ProductSpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// DescEQ applies the EQ predicate on the "desc" field.
func DescEQ(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDesc), v))
	})
}

// DescNEQ applies the NEQ predicate on the "desc" field.
func DescNEQ(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDesc), v))
	})
}

// DescIn applies the In predicate on the "desc" field.
func DescIn(vs ...string) predicate.ProductSpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDesc), v...))
	})
}

// DescNotIn applies the NotIn predicate on the "desc" field.
func DescNotIn(vs ...string) predicate.ProductSpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDesc), v...))
	})
}

// DescGT applies the GT predicate on the "desc" field.
func DescGT(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDesc), v))
	})
}

// DescGTE applies the GTE predicate on the "desc" field.
func DescGTE(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDesc), v))
	})
}

// DescLT applies the LT predicate on the "desc" field.
func DescLT(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDesc), v))
	})
}

// DescLTE applies the LTE predicate on the "desc" field.
func DescLTE(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDesc), v))
	})
}

// DescContains applies the Contains predicate on the "desc" field.
func DescContains(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDesc), v))
	})
}

// DescHasPrefix applies the HasPrefix predicate on the "desc" field.
func DescHasPrefix(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDesc), v))
	})
}

// DescHasSuffix applies the HasSuffix predicate on the "desc" field.
func DescHasSuffix(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDesc), v))
	})
}

// DescEqualFold applies the EqualFold predicate on the "desc" field.
func DescEqualFold(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDesc), v))
	})
}

// DescContainsFold applies the ContainsFold predicate on the "desc" field.
func DescContainsFold(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDesc), v))
	})
}

// SellingPointEQ applies the EQ predicate on the "selling_point" field.
func SellingPointEQ(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSellingPoint), v))
	})
}

// SellingPointNEQ applies the NEQ predicate on the "selling_point" field.
func SellingPointNEQ(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSellingPoint), v))
	})
}

// SellingPointIn applies the In predicate on the "selling_point" field.
func SellingPointIn(vs ...string) predicate.ProductSpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSellingPoint), v...))
	})
}

// SellingPointNotIn applies the NotIn predicate on the "selling_point" field.
func SellingPointNotIn(vs ...string) predicate.ProductSpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSellingPoint), v...))
	})
}

// SellingPointGT applies the GT predicate on the "selling_point" field.
func SellingPointGT(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSellingPoint), v))
	})
}

// SellingPointGTE applies the GTE predicate on the "selling_point" field.
func SellingPointGTE(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSellingPoint), v))
	})
}

// SellingPointLT applies the LT predicate on the "selling_point" field.
func SellingPointLT(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSellingPoint), v))
	})
}

// SellingPointLTE applies the LTE predicate on the "selling_point" field.
func SellingPointLTE(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSellingPoint), v))
	})
}

// SellingPointContains applies the Contains predicate on the "selling_point" field.
func SellingPointContains(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSellingPoint), v))
	})
}

// SellingPointHasPrefix applies the HasPrefix predicate on the "selling_point" field.
func SellingPointHasPrefix(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSellingPoint), v))
	})
}

// SellingPointHasSuffix applies the HasSuffix predicate on the "selling_point" field.
func SellingPointHasSuffix(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSellingPoint), v))
	})
}

// SellingPointEqualFold applies the EqualFold predicate on the "selling_point" field.
func SellingPointEqualFold(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSellingPoint), v))
	})
}

// SellingPointContainsFold applies the ContainsFold predicate on the "selling_point" field.
func SellingPointContainsFold(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSellingPoint), v))
	})
}

// UnitEQ applies the EQ predicate on the "unit" field.
func UnitEQ(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnit), v))
	})
}

// UnitNEQ applies the NEQ predicate on the "unit" field.
func UnitNEQ(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnit), v))
	})
}

// UnitIn applies the In predicate on the "unit" field.
func UnitIn(vs ...string) predicate.ProductSpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUnit), v...))
	})
}

// UnitNotIn applies the NotIn predicate on the "unit" field.
func UnitNotIn(vs ...string) predicate.ProductSpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUnit), v...))
	})
}

// UnitGT applies the GT predicate on the "unit" field.
func UnitGT(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnit), v))
	})
}

// UnitGTE applies the GTE predicate on the "unit" field.
func UnitGTE(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnit), v))
	})
}

// UnitLT applies the LT predicate on the "unit" field.
func UnitLT(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnit), v))
	})
}

// UnitLTE applies the LTE predicate on the "unit" field.
func UnitLTE(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnit), v))
	})
}

// UnitContains applies the Contains predicate on the "unit" field.
func UnitContains(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUnit), v))
	})
}

// UnitHasPrefix applies the HasPrefix predicate on the "unit" field.
func UnitHasPrefix(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUnit), v))
	})
}

// UnitHasSuffix applies the HasSuffix predicate on the "unit" field.
func UnitHasSuffix(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUnit), v))
	})
}

// UnitEqualFold applies the EqualFold predicate on the "unit" field.
func UnitEqualFold(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUnit), v))
	})
}

// UnitContainsFold applies the ContainsFold predicate on the "unit" field.
func UnitContainsFold(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUnit), v))
	})
}

// BannerURLEQ applies the EQ predicate on the "banner_url" field.
func BannerURLEQ(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBannerURL), v))
	})
}

// BannerURLNEQ applies the NEQ predicate on the "banner_url" field.
func BannerURLNEQ(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBannerURL), v))
	})
}

// BannerURLIn applies the In predicate on the "banner_url" field.
func BannerURLIn(vs ...string) predicate.ProductSpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBannerURL), v...))
	})
}

// BannerURLNotIn applies the NotIn predicate on the "banner_url" field.
func BannerURLNotIn(vs ...string) predicate.ProductSpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBannerURL), v...))
	})
}

// BannerURLGT applies the GT predicate on the "banner_url" field.
func BannerURLGT(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBannerURL), v))
	})
}

// BannerURLGTE applies the GTE predicate on the "banner_url" field.
func BannerURLGTE(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBannerURL), v))
	})
}

// BannerURLLT applies the LT predicate on the "banner_url" field.
func BannerURLLT(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBannerURL), v))
	})
}

// BannerURLLTE applies the LTE predicate on the "banner_url" field.
func BannerURLLTE(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBannerURL), v))
	})
}

// BannerURLContains applies the Contains predicate on the "banner_url" field.
func BannerURLContains(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBannerURL), v))
	})
}

// BannerURLHasPrefix applies the HasPrefix predicate on the "banner_url" field.
func BannerURLHasPrefix(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBannerURL), v))
	})
}

// BannerURLHasSuffix applies the HasSuffix predicate on the "banner_url" field.
func BannerURLHasSuffix(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBannerURL), v))
	})
}

// BannerURLEqualFold applies the EqualFold predicate on the "banner_url" field.
func BannerURLEqualFold(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBannerURL), v))
	})
}

// BannerURLContainsFold applies the ContainsFold predicate on the "banner_url" field.
func BannerURLContainsFold(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBannerURL), v))
	})
}

// MainURLEQ applies the EQ predicate on the "main_url" field.
func MainURLEQ(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMainURL), v))
	})
}

// MainURLNEQ applies the NEQ predicate on the "main_url" field.
func MainURLNEQ(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMainURL), v))
	})
}

// MainURLIn applies the In predicate on the "main_url" field.
func MainURLIn(vs ...string) predicate.ProductSpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMainURL), v...))
	})
}

// MainURLNotIn applies the NotIn predicate on the "main_url" field.
func MainURLNotIn(vs ...string) predicate.ProductSpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMainURL), v...))
	})
}

// MainURLGT applies the GT predicate on the "main_url" field.
func MainURLGT(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMainURL), v))
	})
}

// MainURLGTE applies the GTE predicate on the "main_url" field.
func MainURLGTE(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMainURL), v))
	})
}

// MainURLLT applies the LT predicate on the "main_url" field.
func MainURLLT(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMainURL), v))
	})
}

// MainURLLTE applies the LTE predicate on the "main_url" field.
func MainURLLTE(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMainURL), v))
	})
}

// MainURLContains applies the Contains predicate on the "main_url" field.
func MainURLContains(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMainURL), v))
	})
}

// MainURLHasPrefix applies the HasPrefix predicate on the "main_url" field.
func MainURLHasPrefix(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMainURL), v))
	})
}

// MainURLHasSuffix applies the HasSuffix predicate on the "main_url" field.
func MainURLHasSuffix(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMainURL), v))
	})
}

// MainURLEqualFold applies the EqualFold predicate on the "main_url" field.
func MainURLEqualFold(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMainURL), v))
	})
}

// MainURLContainsFold applies the ContainsFold predicate on the "main_url" field.
func MainURLContainsFold(v string) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMainURL), v))
	})
}

// PriceFeeEQ applies the EQ predicate on the "price_fee" field.
func PriceFeeEQ(v int64) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPriceFee), v))
	})
}

// PriceFeeNEQ applies the NEQ predicate on the "price_fee" field.
func PriceFeeNEQ(v int64) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPriceFee), v))
	})
}

// PriceFeeIn applies the In predicate on the "price_fee" field.
func PriceFeeIn(vs ...int64) predicate.ProductSpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPriceFee), v...))
	})
}

// PriceFeeNotIn applies the NotIn predicate on the "price_fee" field.
func PriceFeeNotIn(vs ...int64) predicate.ProductSpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPriceFee), v...))
	})
}

// PriceFeeGT applies the GT predicate on the "price_fee" field.
func PriceFeeGT(v int64) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPriceFee), v))
	})
}

// PriceFeeGTE applies the GTE predicate on the "price_fee" field.
func PriceFeeGTE(v int64) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPriceFee), v))
	})
}

// PriceFeeLT applies the LT predicate on the "price_fee" field.
func PriceFeeLT(v int64) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPriceFee), v))
	})
}

// PriceFeeLTE applies the LTE predicate on the "price_fee" field.
func PriceFeeLTE(v int64) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPriceFee), v))
	})
}

// PriceScaleEQ applies the EQ predicate on the "price_scale" field.
func PriceScaleEQ(v int8) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPriceScale), v))
	})
}

// PriceScaleNEQ applies the NEQ predicate on the "price_scale" field.
func PriceScaleNEQ(v int8) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPriceScale), v))
	})
}

// PriceScaleIn applies the In predicate on the "price_scale" field.
func PriceScaleIn(vs ...int8) predicate.ProductSpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPriceScale), v...))
	})
}

// PriceScaleNotIn applies the NotIn predicate on the "price_scale" field.
func PriceScaleNotIn(vs ...int8) predicate.ProductSpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPriceScale), v...))
	})
}

// PriceScaleGT applies the GT predicate on the "price_scale" field.
func PriceScaleGT(v int8) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPriceScale), v))
	})
}

// PriceScaleGTE applies the GTE predicate on the "price_scale" field.
func PriceScaleGTE(v int8) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPriceScale), v))
	})
}

// PriceScaleLT applies the LT predicate on the "price_scale" field.
func PriceScaleLT(v int8) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPriceScale), v))
	})
}

// PriceScaleLTE applies the LTE predicate on the "price_scale" field.
func PriceScaleLTE(v int8) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPriceScale), v))
	})
}

// MarketPriceFeeEQ applies the EQ predicate on the "market_price_fee" field.
func MarketPriceFeeEQ(v int64) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMarketPriceFee), v))
	})
}

// MarketPriceFeeNEQ applies the NEQ predicate on the "market_price_fee" field.
func MarketPriceFeeNEQ(v int64) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMarketPriceFee), v))
	})
}

// MarketPriceFeeIn applies the In predicate on the "market_price_fee" field.
func MarketPriceFeeIn(vs ...int64) predicate.ProductSpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMarketPriceFee), v...))
	})
}

// MarketPriceFeeNotIn applies the NotIn predicate on the "market_price_fee" field.
func MarketPriceFeeNotIn(vs ...int64) predicate.ProductSpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMarketPriceFee), v...))
	})
}

// MarketPriceFeeGT applies the GT predicate on the "market_price_fee" field.
func MarketPriceFeeGT(v int64) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMarketPriceFee), v))
	})
}

// MarketPriceFeeGTE applies the GTE predicate on the "market_price_fee" field.
func MarketPriceFeeGTE(v int64) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMarketPriceFee), v))
	})
}

// MarketPriceFeeLT applies the LT predicate on the "market_price_fee" field.
func MarketPriceFeeLT(v int64) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMarketPriceFee), v))
	})
}

// MarketPriceFeeLTE applies the LTE predicate on the "market_price_fee" field.
func MarketPriceFeeLTE(v int64) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMarketPriceFee), v))
	})
}

// MarketPriceScaleEQ applies the EQ predicate on the "market_price_scale" field.
func MarketPriceScaleEQ(v int8) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMarketPriceScale), v))
	})
}

// MarketPriceScaleNEQ applies the NEQ predicate on the "market_price_scale" field.
func MarketPriceScaleNEQ(v int8) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMarketPriceScale), v))
	})
}

// MarketPriceScaleIn applies the In predicate on the "market_price_scale" field.
func MarketPriceScaleIn(vs ...int8) predicate.ProductSpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMarketPriceScale), v...))
	})
}

// MarketPriceScaleNotIn applies the NotIn predicate on the "market_price_scale" field.
func MarketPriceScaleNotIn(vs ...int8) predicate.ProductSpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMarketPriceScale), v...))
	})
}

// MarketPriceScaleGT applies the GT predicate on the "market_price_scale" field.
func MarketPriceScaleGT(v int8) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMarketPriceScale), v))
	})
}

// MarketPriceScaleGTE applies the GTE predicate on the "market_price_scale" field.
func MarketPriceScaleGTE(v int8) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMarketPriceScale), v))
	})
}

// MarketPriceScaleLT applies the LT predicate on the "market_price_scale" field.
func MarketPriceScaleLT(v int8) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMarketPriceScale), v))
	})
}

// MarketPriceScaleLTE applies the LTE predicate on the "market_price_scale" field.
func MarketPriceScaleLTE(v int8) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMarketPriceScale), v))
	})
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v time.Time) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v time.Time) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...time.Time) predicate.ProductSpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateAt), v...))
	})
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...time.Time) predicate.ProductSpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateAt), v...))
	})
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v time.Time) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateAt), v))
	})
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v time.Time) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateAt), v))
	})
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v time.Time) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateAt), v))
	})
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v time.Time) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateAt), v))
	})
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v time.Time) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v time.Time) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...time.Time) predicate.ProductSpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...time.Time) predicate.ProductSpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v time.Time) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v time.Time) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v time.Time) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v time.Time) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateAt), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int8) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int8) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int8) predicate.ProductSpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int8) predicate.ProductSpu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductSpu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int8) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int8) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int8) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int8) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProductSpu) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProductSpu) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProductSpu) predicate.ProductSpu {
	return predicate.ProductSpu(func(s *sql.Selector) {
		p(s.Not())
	})
}
