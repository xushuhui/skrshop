// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"
	"skrshop/internal/data/ent/predicate"
	"skrshop/internal/data/ent/skrmember"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SkrMemberQuery is the builder for querying SkrMember entities.
type SkrMemberQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	fields     []string
	predicates []predicate.SkrMember
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SkrMemberQuery builder.
func (smq *SkrMemberQuery) Where(ps ...predicate.SkrMember) *SkrMemberQuery {
	smq.predicates = append(smq.predicates, ps...)
	return smq
}

// Limit adds a limit step to the query.
func (smq *SkrMemberQuery) Limit(limit int) *SkrMemberQuery {
	smq.limit = &limit
	return smq
}

// Offset adds an offset step to the query.
func (smq *SkrMemberQuery) Offset(offset int) *SkrMemberQuery {
	smq.offset = &offset
	return smq
}

// Order adds an order step to the query.
func (smq *SkrMemberQuery) Order(o ...OrderFunc) *SkrMemberQuery {
	smq.order = append(smq.order, o...)
	return smq
}

// First returns the first SkrMember entity from the query.
// Returns a *NotFoundError when no SkrMember was found.
func (smq *SkrMemberQuery) First(ctx context.Context) (*SkrMember, error) {
	nodes, err := smq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{skrmember.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (smq *SkrMemberQuery) FirstX(ctx context.Context) *SkrMember {
	node, err := smq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SkrMember ID from the query.
// Returns a *NotFoundError when no SkrMember ID was found.
func (smq *SkrMemberQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = smq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{skrmember.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (smq *SkrMemberQuery) FirstIDX(ctx context.Context) int {
	id, err := smq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SkrMember entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one SkrMember entity is not found.
// Returns a *NotFoundError when no SkrMember entities are found.
func (smq *SkrMemberQuery) Only(ctx context.Context) (*SkrMember, error) {
	nodes, err := smq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{skrmember.Label}
	default:
		return nil, &NotSingularError{skrmember.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (smq *SkrMemberQuery) OnlyX(ctx context.Context) *SkrMember {
	node, err := smq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SkrMember ID in the query.
// Returns a *NotSingularError when exactly one SkrMember ID is not found.
// Returns a *NotFoundError when no entities are found.
func (smq *SkrMemberQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = smq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{skrmember.Label}
	default:
		err = &NotSingularError{skrmember.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (smq *SkrMemberQuery) OnlyIDX(ctx context.Context) int {
	id, err := smq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SkrMembers.
func (smq *SkrMemberQuery) All(ctx context.Context) ([]*SkrMember, error) {
	if err := smq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return smq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (smq *SkrMemberQuery) AllX(ctx context.Context) []*SkrMember {
	nodes, err := smq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SkrMember IDs.
func (smq *SkrMemberQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := smq.Select(skrmember.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (smq *SkrMemberQuery) IDsX(ctx context.Context) []int {
	ids, err := smq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (smq *SkrMemberQuery) Count(ctx context.Context) (int, error) {
	if err := smq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return smq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (smq *SkrMemberQuery) CountX(ctx context.Context) int {
	count, err := smq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (smq *SkrMemberQuery) Exist(ctx context.Context) (bool, error) {
	if err := smq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return smq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (smq *SkrMemberQuery) ExistX(ctx context.Context) bool {
	exist, err := smq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SkrMemberQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (smq *SkrMemberQuery) Clone() *SkrMemberQuery {
	if smq == nil {
		return nil
	}
	return &SkrMemberQuery{
		config:     smq.config,
		limit:      smq.limit,
		offset:     smq.offset,
		order:      append([]OrderFunc{}, smq.order...),
		predicates: append([]predicate.SkrMember{}, smq.predicates...),
		// clone intermediate query.
		sql:  smq.sql.Clone(),
		path: smq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UID int64 `json:"uid,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SkrMember.Query().
//		GroupBy(skrmember.FieldUID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (smq *SkrMemberQuery) GroupBy(field string, fields ...string) *SkrMemberGroupBy {
	group := &SkrMemberGroupBy{config: smq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := smq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return smq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UID int64 `json:"uid,omitempty"`
//	}
//
//	client.SkrMember.Query().
//		Select(skrmember.FieldUID).
//		Scan(ctx, &v)
//
func (smq *SkrMemberQuery) Select(field string, fields ...string) *SkrMemberSelect {
	smq.fields = append([]string{field}, fields...)
	return &SkrMemberSelect{SkrMemberQuery: smq}
}

func (smq *SkrMemberQuery) prepareQuery(ctx context.Context) error {
	for _, f := range smq.fields {
		if !skrmember.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if smq.path != nil {
		prev, err := smq.path(ctx)
		if err != nil {
			return err
		}
		smq.sql = prev
	}
	return nil
}

func (smq *SkrMemberQuery) sqlAll(ctx context.Context) ([]*SkrMember, error) {
	var (
		nodes = []*SkrMember{}
		_spec = smq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &SkrMember{config: smq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, smq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (smq *SkrMemberQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := smq.querySpec()
	return sqlgraph.CountNodes(ctx, smq.driver, _spec)
}

func (smq *SkrMemberQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := smq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (smq *SkrMemberQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   skrmember.Table,
			Columns: skrmember.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: skrmember.FieldID,
			},
		},
		From:   smq.sql,
		Unique: true,
	}
	if fields := smq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, skrmember.FieldID)
		for i := range fields {
			if fields[i] != skrmember.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := smq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := smq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := smq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := smq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, skrmember.ValidColumn)
			}
		}
	}
	return _spec
}

func (smq *SkrMemberQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(smq.driver.Dialect())
	t1 := builder.Table(skrmember.Table)
	selector := builder.Select(t1.Columns(skrmember.Columns...)...).From(t1)
	if smq.sql != nil {
		selector = smq.sql
		selector.Select(selector.Columns(skrmember.Columns...)...)
	}
	for _, p := range smq.predicates {
		p(selector)
	}
	for _, p := range smq.order {
		p(selector, skrmember.ValidColumn)
	}
	if offset := smq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := smq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SkrMemberGroupBy is the group-by builder for SkrMember entities.
type SkrMemberGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (smgb *SkrMemberGroupBy) Aggregate(fns ...AggregateFunc) *SkrMemberGroupBy {
	smgb.fns = append(smgb.fns, fns...)
	return smgb
}

// Scan applies the group-by query and scans the result into the given value.
func (smgb *SkrMemberGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := smgb.path(ctx)
	if err != nil {
		return err
	}
	smgb.sql = query
	return smgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (smgb *SkrMemberGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := smgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (smgb *SkrMemberGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(smgb.fields) > 1 {
		return nil, errors.New("ent: SkrMemberGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := smgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (smgb *SkrMemberGroupBy) StringsX(ctx context.Context) []string {
	v, err := smgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (smgb *SkrMemberGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = smgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{skrmember.Label}
	default:
		err = fmt.Errorf("ent: SkrMemberGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (smgb *SkrMemberGroupBy) StringX(ctx context.Context) string {
	v, err := smgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (smgb *SkrMemberGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(smgb.fields) > 1 {
		return nil, errors.New("ent: SkrMemberGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := smgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (smgb *SkrMemberGroupBy) IntsX(ctx context.Context) []int {
	v, err := smgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (smgb *SkrMemberGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = smgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{skrmember.Label}
	default:
		err = fmt.Errorf("ent: SkrMemberGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (smgb *SkrMemberGroupBy) IntX(ctx context.Context) int {
	v, err := smgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (smgb *SkrMemberGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(smgb.fields) > 1 {
		return nil, errors.New("ent: SkrMemberGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := smgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (smgb *SkrMemberGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := smgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (smgb *SkrMemberGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = smgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{skrmember.Label}
	default:
		err = fmt.Errorf("ent: SkrMemberGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (smgb *SkrMemberGroupBy) Float64X(ctx context.Context) float64 {
	v, err := smgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (smgb *SkrMemberGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(smgb.fields) > 1 {
		return nil, errors.New("ent: SkrMemberGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := smgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (smgb *SkrMemberGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := smgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (smgb *SkrMemberGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = smgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{skrmember.Label}
	default:
		err = fmt.Errorf("ent: SkrMemberGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (smgb *SkrMemberGroupBy) BoolX(ctx context.Context) bool {
	v, err := smgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (smgb *SkrMemberGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range smgb.fields {
		if !skrmember.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := smgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := smgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (smgb *SkrMemberGroupBy) sqlQuery() *sql.Selector {
	selector := smgb.sql
	columns := make([]string, 0, len(smgb.fields)+len(smgb.fns))
	columns = append(columns, smgb.fields...)
	for _, fn := range smgb.fns {
		columns = append(columns, fn(selector, skrmember.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(smgb.fields...)
}

// SkrMemberSelect is the builder for selecting fields of SkrMember entities.
type SkrMemberSelect struct {
	*SkrMemberQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (sms *SkrMemberSelect) Scan(ctx context.Context, v interface{}) error {
	if err := sms.prepareQuery(ctx); err != nil {
		return err
	}
	sms.sql = sms.SkrMemberQuery.sqlQuery(ctx)
	return sms.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (sms *SkrMemberSelect) ScanX(ctx context.Context, v interface{}) {
	if err := sms.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (sms *SkrMemberSelect) Strings(ctx context.Context) ([]string, error) {
	if len(sms.fields) > 1 {
		return nil, errors.New("ent: SkrMemberSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := sms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (sms *SkrMemberSelect) StringsX(ctx context.Context) []string {
	v, err := sms.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (sms *SkrMemberSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = sms.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{skrmember.Label}
	default:
		err = fmt.Errorf("ent: SkrMemberSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (sms *SkrMemberSelect) StringX(ctx context.Context) string {
	v, err := sms.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (sms *SkrMemberSelect) Ints(ctx context.Context) ([]int, error) {
	if len(sms.fields) > 1 {
		return nil, errors.New("ent: SkrMemberSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := sms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (sms *SkrMemberSelect) IntsX(ctx context.Context) []int {
	v, err := sms.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (sms *SkrMemberSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = sms.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{skrmember.Label}
	default:
		err = fmt.Errorf("ent: SkrMemberSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (sms *SkrMemberSelect) IntX(ctx context.Context) int {
	v, err := sms.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (sms *SkrMemberSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(sms.fields) > 1 {
		return nil, errors.New("ent: SkrMemberSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := sms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (sms *SkrMemberSelect) Float64sX(ctx context.Context) []float64 {
	v, err := sms.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (sms *SkrMemberSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = sms.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{skrmember.Label}
	default:
		err = fmt.Errorf("ent: SkrMemberSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (sms *SkrMemberSelect) Float64X(ctx context.Context) float64 {
	v, err := sms.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (sms *SkrMemberSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(sms.fields) > 1 {
		return nil, errors.New("ent: SkrMemberSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := sms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (sms *SkrMemberSelect) BoolsX(ctx context.Context) []bool {
	v, err := sms.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (sms *SkrMemberSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = sms.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{skrmember.Label}
	default:
		err = fmt.Errorf("ent: SkrMemberSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (sms *SkrMemberSelect) BoolX(ctx context.Context) bool {
	v, err := sms.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sms *SkrMemberSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := sms.sqlQuery().Query()
	if err := sms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (sms *SkrMemberSelect) sqlQuery() sql.Querier {
	selector := sms.sql
	selector.Select(selector.Columns(sms.fields...)...)
	return selector
}
