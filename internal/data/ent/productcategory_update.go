// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"skrshop/internal/data/ent/predicate"
	"skrshop/internal/data/ent/productcategory"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductCategoryUpdate is the builder for updating ProductCategory entities.
type ProductCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *ProductCategoryMutation
}

// Where adds a new predicate for the ProductCategoryUpdate builder.
func (pcu *ProductCategoryUpdate) Where(ps ...predicate.ProductCategory) *ProductCategoryUpdate {
	pcu.mutation.predicates = append(pcu.mutation.predicates, ps...)
	return pcu
}

// SetPid sets the "pid" field.
func (pcu *ProductCategoryUpdate) SetPid(i int64) *ProductCategoryUpdate {
	pcu.mutation.ResetPid()
	pcu.mutation.SetPid(i)
	return pcu
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (pcu *ProductCategoryUpdate) SetNillablePid(i *int64) *ProductCategoryUpdate {
	if i != nil {
		pcu.SetPid(*i)
	}
	return pcu
}

// AddPid adds i to the "pid" field.
func (pcu *ProductCategoryUpdate) AddPid(i int64) *ProductCategoryUpdate {
	pcu.mutation.AddPid(i)
	return pcu
}

// SetName sets the "name" field.
func (pcu *ProductCategoryUpdate) SetName(s string) *ProductCategoryUpdate {
	pcu.mutation.SetName(s)
	return pcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pcu *ProductCategoryUpdate) SetNillableName(s *string) *ProductCategoryUpdate {
	if s != nil {
		pcu.SetName(*s)
	}
	return pcu
}

// SetDesc sets the "desc" field.
func (pcu *ProductCategoryUpdate) SetDesc(s string) *ProductCategoryUpdate {
	pcu.mutation.SetDesc(s)
	return pcu
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (pcu *ProductCategoryUpdate) SetNillableDesc(s *string) *ProductCategoryUpdate {
	if s != nil {
		pcu.SetDesc(*s)
	}
	return pcu
}

// SetPicURL sets the "pic_url" field.
func (pcu *ProductCategoryUpdate) SetPicURL(s string) *ProductCategoryUpdate {
	pcu.mutation.SetPicURL(s)
	return pcu
}

// SetNillablePicURL sets the "pic_url" field if the given value is not nil.
func (pcu *ProductCategoryUpdate) SetNillablePicURL(s *string) *ProductCategoryUpdate {
	if s != nil {
		pcu.SetPicURL(*s)
	}
	return pcu
}

// SetPath sets the "path" field.
func (pcu *ProductCategoryUpdate) SetPath(s string) *ProductCategoryUpdate {
	pcu.mutation.SetPath(s)
	return pcu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (pcu *ProductCategoryUpdate) SetNillablePath(s *string) *ProductCategoryUpdate {
	if s != nil {
		pcu.SetPath(*s)
	}
	return pcu
}

// SetStatus sets the "status" field.
func (pcu *ProductCategoryUpdate) SetStatus(i int8) *ProductCategoryUpdate {
	pcu.mutation.ResetStatus()
	pcu.mutation.SetStatus(i)
	return pcu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pcu *ProductCategoryUpdate) SetNillableStatus(i *int8) *ProductCategoryUpdate {
	if i != nil {
		pcu.SetStatus(*i)
	}
	return pcu
}

// AddStatus adds i to the "status" field.
func (pcu *ProductCategoryUpdate) AddStatus(i int8) *ProductCategoryUpdate {
	pcu.mutation.AddStatus(i)
	return pcu
}

// SetCreateAt sets the "create_at" field.
func (pcu *ProductCategoryUpdate) SetCreateAt(t time.Time) *ProductCategoryUpdate {
	pcu.mutation.SetCreateAt(t)
	return pcu
}

// SetUpdateAt sets the "update_at" field.
func (pcu *ProductCategoryUpdate) SetUpdateAt(t time.Time) *ProductCategoryUpdate {
	pcu.mutation.SetUpdateAt(t)
	return pcu
}

// Mutation returns the ProductCategoryMutation object of the builder.
func (pcu *ProductCategoryUpdate) Mutation() *ProductCategoryMutation {
	return pcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcu *ProductCategoryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pcu.hooks) == 0 {
		if err = pcu.check(); err != nil {
			return 0, err
		}
		affected, err = pcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pcu.check(); err != nil {
				return 0, err
			}
			pcu.mutation = mutation
			affected, err = pcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pcu.hooks) - 1; i >= 0; i-- {
			mut = pcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pcu *ProductCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := pcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcu *ProductCategoryUpdate) Exec(ctx context.Context) error {
	_, err := pcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcu *ProductCategoryUpdate) ExecX(ctx context.Context) {
	if err := pcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcu *ProductCategoryUpdate) check() error {
	if v, ok := pcu.mutation.Pid(); ok {
		if err := productcategory.PidValidator(v); err != nil {
			return &ValidationError{Name: "pid", err: fmt.Errorf("ent: validator failed for field \"pid\": %w", err)}
		}
	}
	if v, ok := pcu.mutation.Name(); ok {
		if err := productcategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := pcu.mutation.Desc(); ok {
		if err := productcategory.DescValidator(v); err != nil {
			return &ValidationError{Name: "desc", err: fmt.Errorf("ent: validator failed for field \"desc\": %w", err)}
		}
	}
	if v, ok := pcu.mutation.PicURL(); ok {
		if err := productcategory.PicURLValidator(v); err != nil {
			return &ValidationError{Name: "pic_url", err: fmt.Errorf("ent: validator failed for field \"pic_url\": %w", err)}
		}
	}
	if v, ok := pcu.mutation.Path(); ok {
		if err := productcategory.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf("ent: validator failed for field \"path\": %w", err)}
		}
	}
	return nil
}

func (pcu *ProductCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productcategory.Table,
			Columns: productcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productcategory.FieldID,
			},
		},
	}
	if ps := pcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcu.mutation.Pid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productcategory.FieldPid,
		})
	}
	if value, ok := pcu.mutation.AddedPid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productcategory.FieldPid,
		})
	}
	if value, ok := pcu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldName,
		})
	}
	if value, ok := pcu.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldDesc,
		})
	}
	if value, ok := pcu.mutation.PicURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldPicURL,
		})
	}
	if value, ok := pcu.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldPath,
		})
	}
	if value, ok := pcu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productcategory.FieldStatus,
		})
	}
	if value, ok := pcu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productcategory.FieldStatus,
		})
	}
	if value, ok := pcu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productcategory.FieldCreateAt,
		})
	}
	if value, ok := pcu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productcategory.FieldUpdateAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productcategory.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProductCategoryUpdateOne is the builder for updating a single ProductCategory entity.
type ProductCategoryUpdateOne struct {
	config
	hooks    []Hook
	mutation *ProductCategoryMutation
}

// SetPid sets the "pid" field.
func (pcuo *ProductCategoryUpdateOne) SetPid(i int64) *ProductCategoryUpdateOne {
	pcuo.mutation.ResetPid()
	pcuo.mutation.SetPid(i)
	return pcuo
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (pcuo *ProductCategoryUpdateOne) SetNillablePid(i *int64) *ProductCategoryUpdateOne {
	if i != nil {
		pcuo.SetPid(*i)
	}
	return pcuo
}

// AddPid adds i to the "pid" field.
func (pcuo *ProductCategoryUpdateOne) AddPid(i int64) *ProductCategoryUpdateOne {
	pcuo.mutation.AddPid(i)
	return pcuo
}

// SetName sets the "name" field.
func (pcuo *ProductCategoryUpdateOne) SetName(s string) *ProductCategoryUpdateOne {
	pcuo.mutation.SetName(s)
	return pcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pcuo *ProductCategoryUpdateOne) SetNillableName(s *string) *ProductCategoryUpdateOne {
	if s != nil {
		pcuo.SetName(*s)
	}
	return pcuo
}

// SetDesc sets the "desc" field.
func (pcuo *ProductCategoryUpdateOne) SetDesc(s string) *ProductCategoryUpdateOne {
	pcuo.mutation.SetDesc(s)
	return pcuo
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (pcuo *ProductCategoryUpdateOne) SetNillableDesc(s *string) *ProductCategoryUpdateOne {
	if s != nil {
		pcuo.SetDesc(*s)
	}
	return pcuo
}

// SetPicURL sets the "pic_url" field.
func (pcuo *ProductCategoryUpdateOne) SetPicURL(s string) *ProductCategoryUpdateOne {
	pcuo.mutation.SetPicURL(s)
	return pcuo
}

// SetNillablePicURL sets the "pic_url" field if the given value is not nil.
func (pcuo *ProductCategoryUpdateOne) SetNillablePicURL(s *string) *ProductCategoryUpdateOne {
	if s != nil {
		pcuo.SetPicURL(*s)
	}
	return pcuo
}

// SetPath sets the "path" field.
func (pcuo *ProductCategoryUpdateOne) SetPath(s string) *ProductCategoryUpdateOne {
	pcuo.mutation.SetPath(s)
	return pcuo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (pcuo *ProductCategoryUpdateOne) SetNillablePath(s *string) *ProductCategoryUpdateOne {
	if s != nil {
		pcuo.SetPath(*s)
	}
	return pcuo
}

// SetStatus sets the "status" field.
func (pcuo *ProductCategoryUpdateOne) SetStatus(i int8) *ProductCategoryUpdateOne {
	pcuo.mutation.ResetStatus()
	pcuo.mutation.SetStatus(i)
	return pcuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pcuo *ProductCategoryUpdateOne) SetNillableStatus(i *int8) *ProductCategoryUpdateOne {
	if i != nil {
		pcuo.SetStatus(*i)
	}
	return pcuo
}

// AddStatus adds i to the "status" field.
func (pcuo *ProductCategoryUpdateOne) AddStatus(i int8) *ProductCategoryUpdateOne {
	pcuo.mutation.AddStatus(i)
	return pcuo
}

// SetCreateAt sets the "create_at" field.
func (pcuo *ProductCategoryUpdateOne) SetCreateAt(t time.Time) *ProductCategoryUpdateOne {
	pcuo.mutation.SetCreateAt(t)
	return pcuo
}

// SetUpdateAt sets the "update_at" field.
func (pcuo *ProductCategoryUpdateOne) SetUpdateAt(t time.Time) *ProductCategoryUpdateOne {
	pcuo.mutation.SetUpdateAt(t)
	return pcuo
}

// Mutation returns the ProductCategoryMutation object of the builder.
func (pcuo *ProductCategoryUpdateOne) Mutation() *ProductCategoryMutation {
	return pcuo.mutation
}

// Save executes the query and returns the updated ProductCategory entity.
func (pcuo *ProductCategoryUpdateOne) Save(ctx context.Context) (*ProductCategory, error) {
	var (
		err  error
		node *ProductCategory
	)
	if len(pcuo.hooks) == 0 {
		if err = pcuo.check(); err != nil {
			return nil, err
		}
		node, err = pcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pcuo.check(); err != nil {
				return nil, err
			}
			pcuo.mutation = mutation
			node, err = pcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pcuo.hooks) - 1; i >= 0; i-- {
			mut = pcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pcuo *ProductCategoryUpdateOne) SaveX(ctx context.Context) *ProductCategory {
	node, err := pcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcuo *ProductCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := pcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcuo *ProductCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := pcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcuo *ProductCategoryUpdateOne) check() error {
	if v, ok := pcuo.mutation.Pid(); ok {
		if err := productcategory.PidValidator(v); err != nil {
			return &ValidationError{Name: "pid", err: fmt.Errorf("ent: validator failed for field \"pid\": %w", err)}
		}
	}
	if v, ok := pcuo.mutation.Name(); ok {
		if err := productcategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := pcuo.mutation.Desc(); ok {
		if err := productcategory.DescValidator(v); err != nil {
			return &ValidationError{Name: "desc", err: fmt.Errorf("ent: validator failed for field \"desc\": %w", err)}
		}
	}
	if v, ok := pcuo.mutation.PicURL(); ok {
		if err := productcategory.PicURLValidator(v); err != nil {
			return &ValidationError{Name: "pic_url", err: fmt.Errorf("ent: validator failed for field \"pic_url\": %w", err)}
		}
	}
	if v, ok := pcuo.mutation.Path(); ok {
		if err := productcategory.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf("ent: validator failed for field \"path\": %w", err)}
		}
	}
	return nil
}

func (pcuo *ProductCategoryUpdateOne) sqlSave(ctx context.Context) (_node *ProductCategory, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productcategory.Table,
			Columns: productcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productcategory.FieldID,
			},
		},
	}
	id, ok := pcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProductCategory.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := pcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcuo.mutation.Pid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productcategory.FieldPid,
		})
	}
	if value, ok := pcuo.mutation.AddedPid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: productcategory.FieldPid,
		})
	}
	if value, ok := pcuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldName,
		})
	}
	if value, ok := pcuo.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldDesc,
		})
	}
	if value, ok := pcuo.mutation.PicURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldPicURL,
		})
	}
	if value, ok := pcuo.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldPath,
		})
	}
	if value, ok := pcuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productcategory.FieldStatus,
		})
	}
	if value, ok := pcuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: productcategory.FieldStatus,
		})
	}
	if value, ok := pcuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productcategory.FieldCreateAt,
		})
	}
	if value, ok := pcuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productcategory.FieldUpdateAt,
		})
	}
	_node = &ProductCategory{config: pcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productcategory.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
