// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"skrshop/internal/data/ent/authitem"
	"skrshop/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AuthItemUpdate is the builder for updating AuthItem entities.
type AuthItemUpdate struct {
	config
	hooks    []Hook
	mutation *AuthItemMutation
}

// Where adds a new predicate for the AuthItemUpdate builder.
func (aiu *AuthItemUpdate) Where(ps ...predicate.AuthItem) *AuthItemUpdate {
	aiu.mutation.predicates = append(aiu.mutation.predicates, ps...)
	return aiu
}

// SetStatus sets the "status" field.
func (aiu *AuthItemUpdate) SetStatus(i int8) *AuthItemUpdate {
	aiu.mutation.ResetStatus()
	aiu.mutation.SetStatus(i)
	return aiu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aiu *AuthItemUpdate) SetNillableStatus(i *int8) *AuthItemUpdate {
	if i != nil {
		aiu.SetStatus(*i)
	}
	return aiu
}

// AddStatus adds i to the "status" field.
func (aiu *AuthItemUpdate) AddStatus(i int8) *AuthItemUpdate {
	aiu.mutation.AddStatus(i)
	return aiu
}

// SetCreateAt sets the "create_at" field.
func (aiu *AuthItemUpdate) SetCreateAt(t time.Time) *AuthItemUpdate {
	aiu.mutation.SetCreateAt(t)
	return aiu
}

// SetUpdateAt sets the "update_at" field.
func (aiu *AuthItemUpdate) SetUpdateAt(t time.Time) *AuthItemUpdate {
	aiu.mutation.SetUpdateAt(t)
	return aiu
}

// Mutation returns the AuthItemMutation object of the builder.
func (aiu *AuthItemUpdate) Mutation() *AuthItemMutation {
	return aiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aiu *AuthItemUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(aiu.hooks) == 0 {
		affected, err = aiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuthItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aiu.mutation = mutation
			affected, err = aiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aiu.hooks) - 1; i >= 0; i-- {
			mut = aiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aiu *AuthItemUpdate) SaveX(ctx context.Context) int {
	affected, err := aiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aiu *AuthItemUpdate) Exec(ctx context.Context) error {
	_, err := aiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aiu *AuthItemUpdate) ExecX(ctx context.Context) {
	if err := aiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aiu *AuthItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   authitem.Table,
			Columns: authitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: authitem.FieldID,
			},
		},
	}
	if ps := aiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aiu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: authitem.FieldStatus,
		})
	}
	if value, ok := aiu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: authitem.FieldStatus,
		})
	}
	if value, ok := aiu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authitem.FieldCreateAt,
		})
	}
	if value, ok := aiu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authitem.FieldUpdateAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authitem.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AuthItemUpdateOne is the builder for updating a single AuthItem entity.
type AuthItemUpdateOne struct {
	config
	hooks    []Hook
	mutation *AuthItemMutation
}

// SetStatus sets the "status" field.
func (aiuo *AuthItemUpdateOne) SetStatus(i int8) *AuthItemUpdateOne {
	aiuo.mutation.ResetStatus()
	aiuo.mutation.SetStatus(i)
	return aiuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aiuo *AuthItemUpdateOne) SetNillableStatus(i *int8) *AuthItemUpdateOne {
	if i != nil {
		aiuo.SetStatus(*i)
	}
	return aiuo
}

// AddStatus adds i to the "status" field.
func (aiuo *AuthItemUpdateOne) AddStatus(i int8) *AuthItemUpdateOne {
	aiuo.mutation.AddStatus(i)
	return aiuo
}

// SetCreateAt sets the "create_at" field.
func (aiuo *AuthItemUpdateOne) SetCreateAt(t time.Time) *AuthItemUpdateOne {
	aiuo.mutation.SetCreateAt(t)
	return aiuo
}

// SetUpdateAt sets the "update_at" field.
func (aiuo *AuthItemUpdateOne) SetUpdateAt(t time.Time) *AuthItemUpdateOne {
	aiuo.mutation.SetUpdateAt(t)
	return aiuo
}

// Mutation returns the AuthItemMutation object of the builder.
func (aiuo *AuthItemUpdateOne) Mutation() *AuthItemMutation {
	return aiuo.mutation
}

// Save executes the query and returns the updated AuthItem entity.
func (aiuo *AuthItemUpdateOne) Save(ctx context.Context) (*AuthItem, error) {
	var (
		err  error
		node *AuthItem
	)
	if len(aiuo.hooks) == 0 {
		node, err = aiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuthItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aiuo.mutation = mutation
			node, err = aiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aiuo.hooks) - 1; i >= 0; i-- {
			mut = aiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aiuo *AuthItemUpdateOne) SaveX(ctx context.Context) *AuthItem {
	node, err := aiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aiuo *AuthItemUpdateOne) Exec(ctx context.Context) error {
	_, err := aiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aiuo *AuthItemUpdateOne) ExecX(ctx context.Context) {
	if err := aiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aiuo *AuthItemUpdateOne) sqlSave(ctx context.Context) (_node *AuthItem, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   authitem.Table,
			Columns: authitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: authitem.FieldID,
			},
		},
	}
	id, ok := aiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AuthItem.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := aiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aiuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: authitem.FieldStatus,
		})
	}
	if value, ok := aiuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: authitem.FieldStatus,
		})
	}
	if value, ok := aiuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authitem.FieldCreateAt,
		})
	}
	if value, ok := aiuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authitem.FieldUpdateAt,
		})
	}
	_node = &AuthItem{config: aiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authitem.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
